
HC_12_Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d24  08006d24  00007d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  08006d34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  2400002c  08006d60  0000802c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400018c  08006d60  0000818c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012d79  00000000  00000000  0000805a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002536  00000000  00000000  0001add3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c08  00000000  00000000  0001d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000093e  00000000  00000000  0001df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000321a0  00000000  00000000  0001e856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001249b  00000000  00000000  000509f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141dd5  00000000  00000000  00062e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a4c66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003134  00000000  00000000  001a4cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001a7de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400002c 	.word	0x2400002c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006cc8 	.word	0x08006cc8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000030 	.word	0x24000030
 8000308:	08006cc8 	.word	0x08006cc8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t count = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000606:	f000 f9b3 	bl	8000970 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800060a:	4b50      	ldr	r3, [pc, #320]	@ (800074c <main+0x150>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d11b      	bne.n	800064e <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000616:	f3bf 8f4f 	dsb	sy
}
 800061a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061c:	f3bf 8f6f 	isb	sy
}
 8000620:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000622:	4b4a      	ldr	r3, [pc, #296]	@ (800074c <main+0x150>)
 8000624:	2200      	movs	r2, #0
 8000626:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800062a:	f3bf 8f4f 	dsb	sy
}
 800062e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000630:	f3bf 8f6f 	isb	sy
}
 8000634:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000636:	4b45      	ldr	r3, [pc, #276]	@ (800074c <main+0x150>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a44      	ldr	r2, [pc, #272]	@ (800074c <main+0x150>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000648:	f3bf 8f6f 	isb	sy
}
 800064c:	e000      	b.n	8000650 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800064e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <main+0x150>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d138      	bne.n	80006ce <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800065c:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <main+0x150>)
 800065e:	2200      	movs	r2, #0
 8000660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800066a:	4b38      	ldr	r3, [pc, #224]	@ (800074c <main+0x150>)
 800066c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000670:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	0b5b      	lsrs	r3, r3, #13
 8000676:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800067a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000684:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	015a      	lsls	r2, r3, #5
 800068a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800068e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000694:	492d      	ldr	r1, [pc, #180]	@ (800074c <main+0x150>)
 8000696:	4313      	orrs	r3, r2
 8000698:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1ef      	bne.n	8000686 <main+0x8a>
    } while(sets-- != 0U);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	60ba      	str	r2, [r7, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1e5      	bne.n	800067c <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 80006b0:	f3bf 8f4f 	dsb	sy
}
 80006b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b6:	4b25      	ldr	r3, [pc, #148]	@ (800074c <main+0x150>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a24      	ldr	r2, [pc, #144]	@ (800074c <main+0x150>)
 80006bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	e000      	b.n	80006d0 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ce:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fce6 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f840 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 f8fa 	bl	80008d0 <MX_GPIO_Init>
  MX_UART7_Init();
 80006dc:	f000 f8ac 	bl	8000838 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fb15 	bl	8000d10 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fb12 	bl	8000d10 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fb0f 	bl	8000d10 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006f2:	2101      	movs	r1, #1
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fb81 	bl	8000dfc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <main+0x154>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <main+0x154>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <main+0x154>)
 800070a:	2200      	movs	r2, #0
 800070c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <main+0x154>)
 8000710:	2200      	movs	r2, #0
 8000712:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <main+0x154>)
 8000716:	2200      	movs	r2, #0
 8000718:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <main+0x154>)
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fbfd 	bl	8000f1c <BSP_COM_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <main+0x130>
  {
    Error_Handler();
 8000728:	f000 f94e 	bl	80009c8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart7, (uint8_t*)&count, sizeof(count), HAL_MAX_DELAY);
 800072c:	4639      	mov	r1, r7
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	2204      	movs	r2, #4
 8000734:	4807      	ldr	r0, [pc, #28]	@ (8000754 <main+0x158>)
 8000736:	f004 fc2d 	bl	8004f94 <HAL_UART_Transmit>
	  ++count;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	603b      	str	r3, [r7, #0]
	  HAL_Delay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000744:	f000 fd3e 	bl	80011c4 <HAL_Delay>
	  HAL_UART_Transmit(&huart7, (uint8_t*)&count, sizeof(count), HAL_MAX_DELAY);
 8000748:	bf00      	nop
 800074a:	e7ef      	b.n	800072c <main+0x130>
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	24000048 	.word	0x24000048
 8000754:	24000058 	.word	0x24000058

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	@ 0x70
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	224c      	movs	r2, #76	@ 0x4c
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fa82 	bl	8006c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f006 fa7c 	bl	8006c70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000778:	2002      	movs	r0, #2
 800077a:	f001 fe59 	bl	8002430 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b2c      	ldr	r3, [pc, #176]	@ (8000834 <SystemClock_Config+0xdc>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800078a:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <SystemClock_Config+0xdc>)
 800078c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <SystemClock_Config+0xdc>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079e:	bf00      	nop
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <SystemClock_Config+0xdc>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ac:	d1f8      	bne.n	80007a0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007be:	2300      	movs	r3, #0
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007c6:	230c      	movs	r3, #12
 80007c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d6:	230c      	movs	r3, #12
 80007d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007da:	2300      	movs	r3, #0
 80007dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fe5c 	bl	80024a4 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007f2:	f000 f8e9 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	233f      	movs	r3, #63	@ 0x3f
 80007f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000802:	2308      	movs	r3, #8
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800080a:	2340      	movs	r3, #64	@ 0x40
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000814:	2340      	movs	r3, #64	@ 0x40
 8000816:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fa1b 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000828:	f000 f8ce 	bl	80009c8 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3770      	adds	r7, #112	@ 0x70
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58024800 	.word	0x58024800

08000838 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_UART7_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <MX_UART7_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_UART7_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_UART7_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_UART7_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_UART7_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000882:	f004 fb37 	bl	8004ef4 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f89c 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_UART7_Init+0x90>)
 8000894:	f006 f922 	bl	8006adc <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f893 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <MX_UART7_Init+0x90>)
 80008a6:	f006 f957 	bl	8006b58 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f88a 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_UART7_Init+0x90>)
 80008b6:	f006 f8d8 	bl	8006a6a <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f882 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000058 	.word	0x24000058
 80008cc:	40007800 	.word	0x40007800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <MX_GPIO_Init+0x98>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x98>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x98>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_GPIO_Init+0x98>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x98>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_GPIO_Init+0x98>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_GPIO_Init+0x98>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <MX_GPIO_Init+0x98>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_GPIO_Init+0x98>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000940:	230c      	movs	r3, #12
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000950:	2307      	movs	r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_GPIO_Init+0x9c>)
 800095c:	f001 fba6 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	58024400 	.word	0x58024400
 800096c:	58020000 	.word	0x58020000

08000970 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000982:	f000 fd53 	bl	800142c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000986:	2301      	movs	r3, #1
 8000988:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800098a:	2300      	movs	r3, #0
 800098c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000992:	231f      	movs	r3, #31
 8000994:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000996:	2387      	movs	r3, #135	@ 0x87
 8000998:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800099a:	2300      	movs	r3, #0
 800099c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800099e:	2300      	movs	r3, #0
 80009a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a2:	2301      	movs	r3, #1
 80009a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd71 	bl	800149c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ba:	2004      	movs	r0, #4
 80009bc:	f000 fd4e 	bl	800145c <HAL_MPU_Enable>

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e0:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x30>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x30>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58024400 	.word	0x58024400

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0b8      	sub	sp, #224	@ 0xe0
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	22b8      	movs	r2, #184	@ 0xb8
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 f921 	bl	8006c70 <memset>
  if(huart->Instance==UART7)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <HAL_UART_MspInit+0xd4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d14d      	bne.n	8000ad4 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000a38:	f04f 0202 	mov.w	r2, #2
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fc8e 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a5a:	f7ff ffb5 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000a6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <HAL_UART_MspInit+0xd8>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a9a:	2318      	movs	r3, #24
 8000a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000ab2:	230b      	movs	r3, #11
 8000ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000abc:	4619      	mov	r1, r3
 8000abe:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <HAL_UART_MspInit+0xdc>)
 8000ac0:	f001 faf4 	bl	80020ac <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2052      	movs	r0, #82	@ 0x52
 8000aca:	f000 fc7a 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000ace:	2052      	movs	r0, #82	@ 0x52
 8000ad0:	f000 fc91 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART7_MspInit 1 */

  }

}
 8000ad4:	bf00      	nop
 8000ad6:	37e0      	adds	r7, #224	@ 0xe0
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40007800 	.word	0x40007800
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020400 	.word	0x58020400

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 fb21 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f9c8 	bl	8000ee0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <UART7_IRQHandler+0x10>)
 8000b5a:	f004 faa9 	bl	80050b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	24000058 	.word	0x24000058

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <SystemInit+0x100>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <SystemInit+0x100>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <SystemInit+0x104>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	d807      	bhi.n	8000b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b88:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <SystemInit+0x104>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	4a36      	ldr	r2, [pc, #216]	@ (8000c6c <SystemInit+0x104>)
 8000b92:	f043 0307 	orr.w	r3, r3, #7
 8000b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b98:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <SystemInit+0x108>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a34      	ldr	r2, [pc, #208]	@ (8000c70 <SystemInit+0x108>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <SystemInit+0x108>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <SystemInit+0x108>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4930      	ldr	r1, [pc, #192]	@ (8000c70 <SystemInit+0x108>)
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <SystemInit+0x10c>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <SystemInit+0x104>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <SystemInit+0x104>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 030f 	bic.w	r3, r3, #15
 8000bca:	4a28      	ldr	r2, [pc, #160]	@ (8000c6c <SystemInit+0x104>)
 8000bcc:	f043 0307 	orr.w	r3, r3, #7
 8000bd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <SystemInit+0x108>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SystemInit+0x108>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <SystemInit+0x108>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <SystemInit+0x108>)
 8000be6:	4a24      	ldr	r2, [pc, #144]	@ (8000c78 <SystemInit+0x110>)
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <SystemInit+0x108>)
 8000bec:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <SystemInit+0x114>)
 8000bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <SystemInit+0x108>)
 8000bf2:	4a23      	ldr	r2, [pc, #140]	@ (8000c80 <SystemInit+0x118>)
 8000bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <SystemInit+0x108>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <SystemInit+0x108>)
 8000bfe:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <SystemInit+0x118>)
 8000c00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <SystemInit+0x108>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <SystemInit+0x108>)
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <SystemInit+0x118>)
 8000c0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <SystemInit+0x108>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <SystemInit+0x108>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <SystemInit+0x108>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <SystemInit+0x108>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <SystemInit+0x108>)
 8000c28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d113      	bne.n	8000c5c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <SystemInit+0x108>)
 8000c36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <SystemInit+0x108>)
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <SystemInit+0x11c>)
 8000c46:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <SystemInit+0x108>)
 8000c4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <SystemInit+0x108>)
 8000c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	52002000 	.word	0x52002000
 8000c70:	58024400 	.word	0x58024400
 8000c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c78:	02020200 	.word	0x02020200
 8000c7c:	01ff0000 	.word	0x01ff0000
 8000c80:	01010280 	.word	0x01010280
 8000c84:	52004000 	.word	0x52004000

08000c88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c98:	bf00      	nop
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f9      	beq.n	8000c9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	58024800 	.word	0x58024800

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cf4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cbc:	f7ff ffe4 	bl	8000c88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff ff52 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 ffc9 	bl	8006c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc85 	bl	80005fc <main>
  bx  lr
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000cf8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cfc:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000d00:	08006d34 	.word	0x08006d34
  ldr r2, =_sbss
 8000d04:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000d08:	2400018c 	.word	0x2400018c

08000d0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC3_IRQHandler>
	...

08000d10 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	@ 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <BSP_LED_Init+0x28>
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d006      	beq.n	8000d38 <BSP_LED_Init+0x28>
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d003      	beq.n	8000d38 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d30:	f06f 0301 	mvn.w	r3, #1
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d36:	e055      	b.n	8000de4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	e021      	b.n	8000da2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d10f      	bne.n	8000d84 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	e00e      	b.n	8000da2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a19      	ldr	r2, [pc, #100]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <BSP_LED_Init+0xe0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <BSP_LED_Init+0xe4>)
 8000da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000daa:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <BSP_LED_Init+0xe8>)
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	f107 0218 	add.w	r2, r7, #24
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f970 	bl	80020ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <BSP_LED_Init+0xe8>)
 8000dd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <BSP_LED_Init+0xe4>)
 8000dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	f001 fb0c 	bl	80023fc <HAL_GPIO_WritePin>
  }

  return ret;
 8000de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3730      	adds	r7, #48	@ 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58024400 	.word	0x58024400
 8000df4:	08006cf0 	.word	0x08006cf0
 8000df8:	2400000c 	.word	0x2400000c

08000dfc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <BSP_PB_Init+0xcc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec8 <BSP_PB_Init+0xcc>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <BSP_PB_Init+0xcc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <BSP_PB_Init+0xd0>)
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f92b 	bl	80020ac <HAL_GPIO_Init>
 8000e56:	e031      	b.n	8000ebc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	@ (8000ecc <BSP_PB_Init+0xd0>)
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f91d 	bl	80020ac <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <BSP_PB_Init+0xd4>)
 8000e78:	441a      	add	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4915      	ldr	r1, [pc, #84]	@ (8000ed4 <BSP_PB_Init+0xd8>)
 8000e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4610      	mov	r0, r2
 8000e86:	f001 f8cc 	bl	8002022 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <BSP_PB_Init+0xd4>)
 8000e90:	1898      	adds	r0, r3, r2
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <BSP_PB_Init+0xdc>)
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f001 f8a1 	bl	8001fe4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ea2:	2028      	movs	r0, #40	@ 0x28
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <BSP_PB_Init+0xe0>)
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f000 fa87 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa9d 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	24000018 	.word	0x24000018
 8000ed0:	240000ec 	.word	0x240000ec
 8000ed4:	08006cf8 	.word	0x08006cf8
 8000ed8:	2400001c 	.word	0x2400001c
 8000edc:	24000020 	.word	0x24000020

08000ee0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <BSP_PB_IRQHandler+0x20>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f8aa 	bl	800204c <HAL_EXTI_IRQHandler>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240000ec 	.word	0x240000ec

08000f04 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f32:	f06f 0301 	mvn.w	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e018      	b.n	8000f6c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2294      	movs	r2, #148	@ 0x94
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <BSP_COM_Init+0x5c>)
 8000f44:	4413      	add	r3, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f852 	bl	8000ff0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2294      	movs	r2, #148	@ 0x94
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <BSP_COM_Init+0x5c>)
 8000f56:	4413      	add	r3, r2
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f80e 	bl	8000f7c <MX_USART3_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f66:	f06f 0303 	mvn.w	r3, #3
 8000f6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	240000f4 	.word	0x240000f4

08000f7c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_USART3_Init+0x60>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	220c      	movs	r2, #12
 8000f9a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	895b      	ldrh	r3, [r3, #10]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	891b      	ldrh	r3, [r3, #8]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	899b      	ldrh	r3, [r3, #12]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fc8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f003 ff92 	bl	8004ef4 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000008 	.word	0x24000008

08000fe0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff8d 	bl	8000f04 <BSP_PB_Callback>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ff8:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <COM1_MspInit+0xa8>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <COM1_MspInit+0xa8>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <COM1_MspInit+0xa8>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001016:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <COM1_MspInit+0xa8>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <COM1_MspInit+0xa8>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <COM1_MspInit+0xa8>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <COM1_MspInit+0xa8>)
 8001036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <COM1_MspInit+0xa8>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001040:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <COM1_MspInit+0xa8>)
 8001046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001056:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	@ (800109c <COM1_MspInit+0xac>)
 8001070:	f001 f81c 	bl	80020ac <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001078:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800107e:	2307      	movs	r3, #7
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <COM1_MspInit+0xac>)
 800108a:	f001 f80f 	bl	80020ac <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	@ 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	58024400 	.word	0x58024400
 800109c:	58020c00 	.word	0x58020c00

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 f980 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ac:	f001 ff8a 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_Init+0x68>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	4913      	ldr	r1, [pc, #76]	@ (800110c <HAL_Init+0x6c>)
 80010be:	5ccb      	ldrb	r3, [r1, r3]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_Init+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <HAL_Init+0x6c>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_Init+0x70>)
 80010e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <HAL_Init+0x74>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f814 	bl	8001118 <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e002      	b.n	8001100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fc6b 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58024400 	.word	0x58024400
 800110c:	08006ce0 	.word	0x08006ce0
 8001110:	24000004 	.word	0x24000004
 8001114:	24000000 	.word	0x24000000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_InitTick+0x60>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e021      	b.n	8001170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <HAL_InitTick+0x64>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_InitTick+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f965 	bl	8001412 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f92f 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <HAL_InitTick+0x68>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	24000028 	.word	0x24000028
 800117c:	24000000 	.word	0x24000000
 8001180:	24000024 	.word	0x24000024

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	24000028 	.word	0x24000028
 80011a8:	24000188 	.word	0x24000188

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000188 	.word	0x24000188

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000028 	.word	0x24000028

0800120c <__NVIC_SetPriorityGrouping>:
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <__NVIC_SetPriorityGrouping+0x40>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	4313      	orrs	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <__NVIC_SetPriorityGrouping+0x40>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	05fa0000 	.word	0x05fa0000

08001254 <__NVIC_GetPriorityGrouping>:
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	@ (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	@ (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff40 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff90 	bl	8001300 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5f 	bl	80012ac <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff33 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa4 	bl	8001368 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001430:	f3bf 8f5f 	dmb	sy
}
 8001434:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_MPU_Disable+0x28>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_MPU_Disable+0x28>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001440:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_MPU_Disable+0x2c>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	e000ed90 	.word	0xe000ed90

0800145c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001464:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_MPU_Enable+0x38>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_MPU_Enable+0x3c>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_MPU_Enable+0x3c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed90 	.word	0xe000ed90
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	785a      	ldrb	r2, [r3, #1]
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014b8:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
 80014c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7adb      	ldrb	r3, [r3, #11]
 80014ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7a9b      	ldrb	r3, [r3, #10]
 80014d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b9b      	ldrb	r3, [r3, #14]
 80014e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7bdb      	ldrb	r3, [r3, #15]
 80014ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7a5b      	ldrb	r3, [r3, #9]
 80014f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a1b      	ldrb	r3, [r3, #8]
 80014fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001506:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001508:	6113      	str	r3, [r2, #16]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed90 	.word	0xe000ed90

0800151c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fe42 	bl	80011ac <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e2dc      	b.n	8001aee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e2cd      	b.n	8001aee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a76      	ldr	r2, [pc, #472]	@ (8001730 <HAL_DMA_Abort+0x214>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04a      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a74      	ldr	r2, [pc, #464]	@ (8001734 <HAL_DMA_Abort+0x218>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d045      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	@ (8001738 <HAL_DMA_Abort+0x21c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d040      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a71      	ldr	r2, [pc, #452]	@ (800173c <HAL_DMA_Abort+0x220>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d03b      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a70      	ldr	r2, [pc, #448]	@ (8001740 <HAL_DMA_Abort+0x224>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d036      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6e      	ldr	r2, [pc, #440]	@ (8001744 <HAL_DMA_Abort+0x228>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d031      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6d      	ldr	r2, [pc, #436]	@ (8001748 <HAL_DMA_Abort+0x22c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d02c      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a6b      	ldr	r2, [pc, #428]	@ (800174c <HAL_DMA_Abort+0x230>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d027      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001750 <HAL_DMA_Abort+0x234>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d022      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a68      	ldr	r2, [pc, #416]	@ (8001754 <HAL_DMA_Abort+0x238>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d01d      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a67      	ldr	r2, [pc, #412]	@ (8001758 <HAL_DMA_Abort+0x23c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d018      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a65      	ldr	r2, [pc, #404]	@ (800175c <HAL_DMA_Abort+0x240>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a64      	ldr	r2, [pc, #400]	@ (8001760 <HAL_DMA_Abort+0x244>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00e      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a62      	ldr	r2, [pc, #392]	@ (8001764 <HAL_DMA_Abort+0x248>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d009      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a61      	ldr	r2, [pc, #388]	@ (8001768 <HAL_DMA_Abort+0x24c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d004      	beq.n	80015f2 <HAL_DMA_Abort+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5f      	ldr	r2, [pc, #380]	@ (800176c <HAL_DMA_Abort+0x250>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Abort+0xda>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_DMA_Abort+0xdc>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 021e 	bic.w	r2, r2, #30
 800160a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800161a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e00a      	b.n	800163a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 020e 	bic.w	r2, r2, #14
 8001632:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a3c      	ldr	r2, [pc, #240]	@ (8001730 <HAL_DMA_Abort+0x214>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d072      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3a      	ldr	r2, [pc, #232]	@ (8001734 <HAL_DMA_Abort+0x218>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d06d      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a39      	ldr	r2, [pc, #228]	@ (8001738 <HAL_DMA_Abort+0x21c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d068      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a37      	ldr	r2, [pc, #220]	@ (800173c <HAL_DMA_Abort+0x220>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d063      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a36      	ldr	r2, [pc, #216]	@ (8001740 <HAL_DMA_Abort+0x224>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a34      	ldr	r2, [pc, #208]	@ (8001744 <HAL_DMA_Abort+0x228>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d059      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a33      	ldr	r2, [pc, #204]	@ (8001748 <HAL_DMA_Abort+0x22c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d054      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a31      	ldr	r2, [pc, #196]	@ (800174c <HAL_DMA_Abort+0x230>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d04f      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a30      	ldr	r2, [pc, #192]	@ (8001750 <HAL_DMA_Abort+0x234>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d04a      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2e      	ldr	r2, [pc, #184]	@ (8001754 <HAL_DMA_Abort+0x238>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d045      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001758 <HAL_DMA_Abort+0x23c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d040      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <HAL_DMA_Abort+0x240>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d03b      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <HAL_DMA_Abort+0x244>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d036      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <HAL_DMA_Abort+0x248>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d031      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <HAL_DMA_Abort+0x24c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d02c      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a25      	ldr	r2, [pc, #148]	@ (800176c <HAL_DMA_Abort+0x250>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d027      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <HAL_DMA_Abort+0x254>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d022      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <HAL_DMA_Abort+0x258>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01d      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <HAL_DMA_Abort+0x25c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d018      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_DMA_Abort+0x260>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1e      	ldr	r2, [pc, #120]	@ (8001780 <HAL_DMA_Abort+0x264>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00e      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <HAL_DMA_Abort+0x268>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d009      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <HAL_DMA_Abort+0x26c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d004      	beq.n	800172a <HAL_DMA_Abort+0x20e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	@ (800178c <HAL_DMA_Abort+0x270>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d132      	bne.n	8001790 <HAL_DMA_Abort+0x274>
 800172a:	2301      	movs	r3, #1
 800172c:	e031      	b.n	8001792 <HAL_DMA_Abort+0x276>
 800172e:	bf00      	nop
 8001730:	40020010 	.word	0x40020010
 8001734:	40020028 	.word	0x40020028
 8001738:	40020040 	.word	0x40020040
 800173c:	40020058 	.word	0x40020058
 8001740:	40020070 	.word	0x40020070
 8001744:	40020088 	.word	0x40020088
 8001748:	400200a0 	.word	0x400200a0
 800174c:	400200b8 	.word	0x400200b8
 8001750:	40020410 	.word	0x40020410
 8001754:	40020428 	.word	0x40020428
 8001758:	40020440 	.word	0x40020440
 800175c:	40020458 	.word	0x40020458
 8001760:	40020470 	.word	0x40020470
 8001764:	40020488 	.word	0x40020488
 8001768:	400204a0 	.word	0x400204a0
 800176c:	400204b8 	.word	0x400204b8
 8001770:	58025408 	.word	0x58025408
 8001774:	5802541c 	.word	0x5802541c
 8001778:	58025430 	.word	0x58025430
 800177c:	58025444 	.word	0x58025444
 8001780:	58025458 	.word	0x58025458
 8001784:	5802546c 	.word	0x5802546c
 8001788:	58025480 	.word	0x58025480
 800178c:	58025494 	.word	0x58025494
 8001790:	2300      	movs	r3, #0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001960 <HAL_DMA_Abort+0x444>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04a      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001964 <HAL_DMA_Abort+0x448>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d045      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6a      	ldr	r2, [pc, #424]	@ (8001968 <HAL_DMA_Abort+0x44c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d040      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a68      	ldr	r2, [pc, #416]	@ (800196c <HAL_DMA_Abort+0x450>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d03b      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a67      	ldr	r2, [pc, #412]	@ (8001970 <HAL_DMA_Abort+0x454>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d036      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a65      	ldr	r2, [pc, #404]	@ (8001974 <HAL_DMA_Abort+0x458>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d031      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a64      	ldr	r2, [pc, #400]	@ (8001978 <HAL_DMA_Abort+0x45c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d02c      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a62      	ldr	r2, [pc, #392]	@ (800197c <HAL_DMA_Abort+0x460>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d027      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a61      	ldr	r2, [pc, #388]	@ (8001980 <HAL_DMA_Abort+0x464>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5f      	ldr	r2, [pc, #380]	@ (8001984 <HAL_DMA_Abort+0x468>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01d      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <HAL_DMA_Abort+0x46c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d018      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5c      	ldr	r2, [pc, #368]	@ (800198c <HAL_DMA_Abort+0x470>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5b      	ldr	r2, [pc, #364]	@ (8001990 <HAL_DMA_Abort+0x474>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d00e      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a59      	ldr	r2, [pc, #356]	@ (8001994 <HAL_DMA_Abort+0x478>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d009      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_DMA_Abort+0x47c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d004      	beq.n	8001846 <HAL_DMA_Abort+0x32a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a56      	ldr	r2, [pc, #344]	@ (800199c <HAL_DMA_Abort+0x480>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d108      	bne.n	8001858 <HAL_DMA_Abort+0x33c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e007      	b.n	8001868 <HAL_DMA_Abort+0x34c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001868:	e013      	b.n	8001892 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186a:	f7ff fc9f 	bl	80011ac <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b05      	cmp	r3, #5
 8001876:	d90c      	bls.n	8001892 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e12d      	b.n	8001aee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1e5      	bne.n	800186a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <HAL_DMA_Abort+0x444>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d04a      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001964 <HAL_DMA_Abort+0x448>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d045      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001968 <HAL_DMA_Abort+0x44c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d040      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	@ (800196c <HAL_DMA_Abort+0x450>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d03b      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a29      	ldr	r2, [pc, #164]	@ (8001970 <HAL_DMA_Abort+0x454>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d036      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <HAL_DMA_Abort+0x458>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d031      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a26      	ldr	r2, [pc, #152]	@ (8001978 <HAL_DMA_Abort+0x45c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d02c      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a24      	ldr	r2, [pc, #144]	@ (800197c <HAL_DMA_Abort+0x460>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d027      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_DMA_Abort+0x464>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d022      	beq.n	800193e <HAL_DMA_Abort+0x422>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a21      	ldr	r2, [pc, #132]	@ (8001984 <HAL_DMA_Abort+0x468>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01d      	beq.n	800193e <HAL_DMA_Abort+0x422>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <HAL_DMA_Abort+0x46c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d018      	beq.n	800193e <HAL_DMA_Abort+0x422>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1e      	ldr	r2, [pc, #120]	@ (800198c <HAL_DMA_Abort+0x470>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_DMA_Abort+0x422>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1d      	ldr	r2, [pc, #116]	@ (8001990 <HAL_DMA_Abort+0x474>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00e      	beq.n	800193e <HAL_DMA_Abort+0x422>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_DMA_Abort+0x478>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_DMA_Abort+0x422>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_DMA_Abort+0x47c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_DMA_Abort+0x422>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_DMA_Abort+0x480>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Abort+0x426>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_DMA_Abort+0x428>
 8001942:	2300      	movs	r3, #0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d02b      	beq.n	80019a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	223f      	movs	r2, #63	@ 0x3f
 8001958:	409a      	lsls	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	e02a      	b.n	80019b6 <HAL_DMA_Abort+0x49a>
 8001960:	40020010 	.word	0x40020010
 8001964:	40020028 	.word	0x40020028
 8001968:	40020040 	.word	0x40020040
 800196c:	40020058 	.word	0x40020058
 8001970:	40020070 	.word	0x40020070
 8001974:	40020088 	.word	0x40020088
 8001978:	400200a0 	.word	0x400200a0
 800197c:	400200b8 	.word	0x400200b8
 8001980:	40020410 	.word	0x40020410
 8001984:	40020428 	.word	0x40020428
 8001988:	40020440 	.word	0x40020440
 800198c:	40020458 	.word	0x40020458
 8001990:	40020470 	.word	0x40020470
 8001994:	40020488 	.word	0x40020488
 8001998:	400204a0 	.word	0x400204a0
 800199c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2201      	movs	r2, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <HAL_DMA_Abort+0x5dc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d072      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4d      	ldr	r2, [pc, #308]	@ (8001afc <HAL_DMA_Abort+0x5e0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d06d      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001b00 <HAL_DMA_Abort+0x5e4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d068      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_DMA_Abort+0x5e8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d063      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a49      	ldr	r2, [pc, #292]	@ (8001b08 <HAL_DMA_Abort+0x5ec>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d05e      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a47      	ldr	r2, [pc, #284]	@ (8001b0c <HAL_DMA_Abort+0x5f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d059      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a46      	ldr	r2, [pc, #280]	@ (8001b10 <HAL_DMA_Abort+0x5f4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d054      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a44      	ldr	r2, [pc, #272]	@ (8001b14 <HAL_DMA_Abort+0x5f8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d04f      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a43      	ldr	r2, [pc, #268]	@ (8001b18 <HAL_DMA_Abort+0x5fc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d04a      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a41      	ldr	r2, [pc, #260]	@ (8001b1c <HAL_DMA_Abort+0x600>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d045      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a40      	ldr	r2, [pc, #256]	@ (8001b20 <HAL_DMA_Abort+0x604>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d040      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3e      	ldr	r2, [pc, #248]	@ (8001b24 <HAL_DMA_Abort+0x608>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d03b      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	@ (8001b28 <HAL_DMA_Abort+0x60c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d036      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <HAL_DMA_Abort+0x610>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d031      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <HAL_DMA_Abort+0x614>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d02c      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <HAL_DMA_Abort+0x618>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d027      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a37      	ldr	r2, [pc, #220]	@ (8001b38 <HAL_DMA_Abort+0x61c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	@ (8001b3c <HAL_DMA_Abort+0x620>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_DMA_Abort+0x624>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_DMA_Abort+0x628>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_DMA_Abort+0x62c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <HAL_DMA_Abort+0x630>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2e      	ldr	r2, [pc, #184]	@ (8001b50 <HAL_DMA_Abort+0x634>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_DMA_Abort+0x58a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b54 <HAL_DMA_Abort+0x638>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Abort+0x58e>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_Abort+0x590>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ab8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ada:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020010 	.word	0x40020010
 8001afc:	40020028 	.word	0x40020028
 8001b00:	40020040 	.word	0x40020040
 8001b04:	40020058 	.word	0x40020058
 8001b08:	40020070 	.word	0x40020070
 8001b0c:	40020088 	.word	0x40020088
 8001b10:	400200a0 	.word	0x400200a0
 8001b14:	400200b8 	.word	0x400200b8
 8001b18:	40020410 	.word	0x40020410
 8001b1c:	40020428 	.word	0x40020428
 8001b20:	40020440 	.word	0x40020440
 8001b24:	40020458 	.word	0x40020458
 8001b28:	40020470 	.word	0x40020470
 8001b2c:	40020488 	.word	0x40020488
 8001b30:	400204a0 	.word	0x400204a0
 8001b34:	400204b8 	.word	0x400204b8
 8001b38:	58025408 	.word	0x58025408
 8001b3c:	5802541c 	.word	0x5802541c
 8001b40:	58025430 	.word	0x58025430
 8001b44:	58025444 	.word	0x58025444
 8001b48:	58025458 	.word	0x58025458
 8001b4c:	5802546c 	.word	0x5802546c
 8001b50:	58025480 	.word	0x58025480
 8001b54:	58025494 	.word	0x58025494

08001b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e237      	b.n	8001fda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2280      	movs	r2, #128	@ 0x80
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e22c      	b.n	8001fda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf8 <HAL_DMA_Abort_IT+0x1a0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d04a      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cfc <HAL_DMA_Abort_IT+0x1a4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d045      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <HAL_DMA_Abort_IT+0x1a8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d040      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a58      	ldr	r2, [pc, #352]	@ (8001d04 <HAL_DMA_Abort_IT+0x1ac>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d03b      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a56      	ldr	r2, [pc, #344]	@ (8001d08 <HAL_DMA_Abort_IT+0x1b0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d036      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a55      	ldr	r2, [pc, #340]	@ (8001d0c <HAL_DMA_Abort_IT+0x1b4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d031      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a53      	ldr	r2, [pc, #332]	@ (8001d10 <HAL_DMA_Abort_IT+0x1b8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02c      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a52      	ldr	r2, [pc, #328]	@ (8001d14 <HAL_DMA_Abort_IT+0x1bc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d027      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_DMA_Abort_IT+0x1c0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d022      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a4f      	ldr	r2, [pc, #316]	@ (8001d1c <HAL_DMA_Abort_IT+0x1c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01d      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <HAL_DMA_Abort_IT+0x1c8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <HAL_DMA_Abort_IT+0x1cc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8001d28 <HAL_DMA_Abort_IT+0x1d0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a49      	ldr	r2, [pc, #292]	@ (8001d2c <HAL_DMA_Abort_IT+0x1d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a47      	ldr	r2, [pc, #284]	@ (8001d30 <HAL_DMA_Abort_IT+0x1d8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_DMA_Abort_IT+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a46      	ldr	r2, [pc, #280]	@ (8001d34 <HAL_DMA_Abort_IT+0x1dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Abort_IT+0xcc>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_DMA_Abort_IT+0xce>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8086 	beq.w	8001d38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf8 <HAL_DMA_Abort_IT+0x1a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d04a      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2e      	ldr	r2, [pc, #184]	@ (8001cfc <HAL_DMA_Abort_IT+0x1a4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d045      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d00 <HAL_DMA_Abort_IT+0x1a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d040      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <HAL_DMA_Abort_IT+0x1ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d03b      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a29      	ldr	r2, [pc, #164]	@ (8001d08 <HAL_DMA_Abort_IT+0x1b0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d036      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <HAL_DMA_Abort_IT+0x1b4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d031      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <HAL_DMA_Abort_IT+0x1b8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02c      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a25      	ldr	r2, [pc, #148]	@ (8001d14 <HAL_DMA_Abort_IT+0x1bc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d027      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_DMA_Abort_IT+0x1c0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d022      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a22      	ldr	r2, [pc, #136]	@ (8001d1c <HAL_DMA_Abort_IT+0x1c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01d      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a20      	ldr	r2, [pc, #128]	@ (8001d20 <HAL_DMA_Abort_IT+0x1c8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d018      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_DMA_Abort_IT+0x1cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_DMA_Abort_IT+0x1d0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <HAL_DMA_Abort_IT+0x1d4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d30 <HAL_DMA_Abort_IT+0x1d8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x17c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_DMA_Abort_IT+0x1dc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <HAL_DMA_Abort_IT+0x18e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e178      	b.n	8001fd8 <HAL_DMA_Abort_IT+0x480>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e16f      	b.n	8001fd8 <HAL_DMA_Abort_IT+0x480>
 8001cf8:	40020010 	.word	0x40020010
 8001cfc:	40020028 	.word	0x40020028
 8001d00:	40020040 	.word	0x40020040
 8001d04:	40020058 	.word	0x40020058
 8001d08:	40020070 	.word	0x40020070
 8001d0c:	40020088 	.word	0x40020088
 8001d10:	400200a0 	.word	0x400200a0
 8001d14:	400200b8 	.word	0x400200b8
 8001d18:	40020410 	.word	0x40020410
 8001d1c:	40020428 	.word	0x40020428
 8001d20:	40020440 	.word	0x40020440
 8001d24:	40020458 	.word	0x40020458
 8001d28:	40020470 	.word	0x40020470
 8001d2c:	40020488 	.word	0x40020488
 8001d30:	400204a0 	.word	0x400204a0
 8001d34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020e 	bic.w	r2, r2, #14
 8001d46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	@ (8001f00 <HAL_DMA_Abort_IT+0x3a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d04a      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6b      	ldr	r2, [pc, #428]	@ (8001f04 <HAL_DMA_Abort_IT+0x3ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d045      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a69      	ldr	r2, [pc, #420]	@ (8001f08 <HAL_DMA_Abort_IT+0x3b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d040      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a68      	ldr	r2, [pc, #416]	@ (8001f0c <HAL_DMA_Abort_IT+0x3b4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d03b      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a66      	ldr	r2, [pc, #408]	@ (8001f10 <HAL_DMA_Abort_IT+0x3b8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d036      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <HAL_DMA_Abort_IT+0x3bc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d031      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a63      	ldr	r2, [pc, #396]	@ (8001f18 <HAL_DMA_Abort_IT+0x3c0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d02c      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a62      	ldr	r2, [pc, #392]	@ (8001f1c <HAL_DMA_Abort_IT+0x3c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d027      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a60      	ldr	r2, [pc, #384]	@ (8001f20 <HAL_DMA_Abort_IT+0x3c8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d022      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f24 <HAL_DMA_Abort_IT+0x3cc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d01d      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f28 <HAL_DMA_Abort_IT+0x3d0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d018      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a5c      	ldr	r2, [pc, #368]	@ (8001f2c <HAL_DMA_Abort_IT+0x3d4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f30 <HAL_DMA_Abort_IT+0x3d8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00e      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <HAL_DMA_Abort_IT+0x3dc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a57      	ldr	r2, [pc, #348]	@ (8001f38 <HAL_DMA_Abort_IT+0x3e0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x290>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a56      	ldr	r2, [pc, #344]	@ (8001f3c <HAL_DMA_Abort_IT+0x3e4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d108      	bne.n	8001dfa <HAL_DMA_Abort_IT+0x2a2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_DMA_Abort_IT+0x2b2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f00 <HAL_DMA_Abort_IT+0x3a8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d072      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3a      	ldr	r2, [pc, #232]	@ (8001f04 <HAL_DMA_Abort_IT+0x3ac>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d06d      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a39      	ldr	r2, [pc, #228]	@ (8001f08 <HAL_DMA_Abort_IT+0x3b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d068      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a37      	ldr	r2, [pc, #220]	@ (8001f0c <HAL_DMA_Abort_IT+0x3b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d063      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a36      	ldr	r2, [pc, #216]	@ (8001f10 <HAL_DMA_Abort_IT+0x3b8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d05e      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a34      	ldr	r2, [pc, #208]	@ (8001f14 <HAL_DMA_Abort_IT+0x3bc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d059      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <HAL_DMA_Abort_IT+0x3c0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d054      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a31      	ldr	r2, [pc, #196]	@ (8001f1c <HAL_DMA_Abort_IT+0x3c4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04f      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a30      	ldr	r2, [pc, #192]	@ (8001f20 <HAL_DMA_Abort_IT+0x3c8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04a      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2e      	ldr	r2, [pc, #184]	@ (8001f24 <HAL_DMA_Abort_IT+0x3cc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d045      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2d      	ldr	r2, [pc, #180]	@ (8001f28 <HAL_DMA_Abort_IT+0x3d0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d040      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <HAL_DMA_Abort_IT+0x3d4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d03b      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <HAL_DMA_Abort_IT+0x3d8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d036      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a28      	ldr	r2, [pc, #160]	@ (8001f34 <HAL_DMA_Abort_IT+0x3dc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d031      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_DMA_Abort_IT+0x3e0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d02c      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <HAL_DMA_Abort_IT+0x3e4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d027      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <HAL_DMA_Abort_IT+0x3e8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <HAL_DMA_Abort_IT+0x3ec>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01d      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_DMA_Abort_IT+0x3f0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <HAL_DMA_Abort_IT+0x3f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_DMA_Abort_IT+0x3f8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00e      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f54 <HAL_DMA_Abort_IT+0x3fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_DMA_Abort_IT+0x400>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_DMA_Abort_IT+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <HAL_DMA_Abort_IT+0x404>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d132      	bne.n	8001f60 <HAL_DMA_Abort_IT+0x408>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e031      	b.n	8001f62 <HAL_DMA_Abort_IT+0x40a>
 8001efe:	bf00      	nop
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
 8001f40:	58025408 	.word	0x58025408
 8001f44:	5802541c 	.word	0x5802541c
 8001f48:	58025430 	.word	0x58025430
 8001f4c:	58025444 	.word	0x58025444
 8001f50:	58025458 	.word	0x58025458
 8001f54:	5802546c 	.word	0x5802546c
 8001f58:	58025480 	.word	0x58025480
 8001f5c:	58025494 	.word	0x58025494
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d028      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop

08001fe4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	460b      	mov	r3, r1
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00a      	b.n	8002016 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]
      break;
 800200c:	e002      	b.n	8002014 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
      break;
 8002012:	bf00      	nop
  }

  return status;
 8002014:	7dfb      	ldrb	r3, [r7, #23]
}
 8002016:	4618      	mov	r0, r3
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e003      	b.n	800203e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2201      	movs	r2, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	011a      	lsls	r2, r3, #4
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_EXTI_IRQHandler+0x5c>)
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4798      	blx	r3
    }
  }
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	58000088 	.word	0x58000088

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ba:	4b86      	ldr	r3, [pc, #536]	@ (80022d4 <HAL_GPIO_Init+0x228>)
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020be:	e18c      	b.n	80023da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 817e 	beq.w	80023d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_GPIO_Init+0x44>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d017      	beq.n	800218e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d123      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80d8 	beq.w	80023d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 8002226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222a:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <HAL_GPIO_Init+0x22c>)
 8002236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a26      	ldr	r2, [pc, #152]	@ (80022dc <HAL_GPIO_Init+0x230>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1d      	ldr	r2, [pc, #116]	@ (80022e0 <HAL_GPIO_Init+0x234>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d04a      	beq.n	8002304 <HAL_GPIO_Init+0x258>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <HAL_GPIO_Init+0x238>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <HAL_GPIO_Init+0x23c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_GPIO_Init+0x240>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_GPIO_Init+0x244>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <HAL_GPIO_Init+0x248>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_GPIO_Init+0x24c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_GPIO_Init+0x250>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x20a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <HAL_GPIO_Init+0x254>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x206>
 80022ae:	2309      	movs	r3, #9
 80022b0:	e029      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022b2:	230a      	movs	r3, #10
 80022b4:	e027      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e025      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e023      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022be:	2305      	movs	r3, #5
 80022c0:	e021      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e01f      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e01d      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e01b      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e019      	b.n	8002306 <HAL_GPIO_Init+0x25a>
 80022d2:	bf00      	nop
 80022d4:	58000080 	.word	0x58000080
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58000400 	.word	0x58000400
 80022e0:	58020000 	.word	0x58020000
 80022e4:	58020400 	.word	0x58020400
 80022e8:	58020800 	.word	0x58020800
 80022ec:	58020c00 	.word	0x58020c00
 80022f0:	58021000 	.word	0x58021000
 80022f4:	58021400 	.word	0x58021400
 80022f8:	58021800 	.word	0x58021800
 80022fc:	58021c00 	.word	0x58021c00
 8002300:	58022400 	.word	0x58022400
 8002304:	2300      	movs	r3, #0
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	4093      	lsls	r3, r2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002316:	4938      	ldr	r1, [pc, #224]	@ (80023f8 <HAL_GPIO_Init+0x34c>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae6b 	bne.w	80020c0 <HAL_GPIO_Init+0x14>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3724      	adds	r7, #36	@ 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_PWREx_ConfigSupply+0x70>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d00a      	beq.n	800245a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e01f      	b.n	8002496 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e01d      	b.n	8002496 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <HAL_PWREx_ConfigSupply+0x70>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	490f      	ldr	r1, [pc, #60]	@ (80024a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4313      	orrs	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800246a:	f7fe fe9f 	bl	80011ac <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002470:	e009      	b.n	8002486 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002472:	f7fe fe9b 	bl	80011ac <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002480:	d901      	bls.n	8002486 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e007      	b.n	8002496 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002492:	d1ee      	bne.n	8002472 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	58024800 	.word	0x58024800

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e3c8      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8087 	beq.w	80025d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c4:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ce:	4b86      	ldr	r3, [pc, #536]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d007      	beq.n	80024ea <HAL_RCC_OscConfig+0x46>
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	2b18      	cmp	r3, #24
 80024de:	d110      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
 80024e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b7f      	ldr	r3, [pc, #508]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d06c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x12c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d168      	bne.n	80025d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e3a2      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x76>
 800250c:	4b76      	ldr	r3, [pc, #472]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a75      	ldr	r2, [pc, #468]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e02e      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b71      	ldr	r3, [pc, #452]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a70      	ldr	r2, [pc, #448]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6e      	ldr	r3, [pc, #440]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6d      	ldr	r2, [pc, #436]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0xbc>
 8002546:	4b68      	ldr	r3, [pc, #416]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a67      	ldr	r2, [pc, #412]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a64      	ldr	r2, [pc, #400]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 8002560:	4b61      	ldr	r3, [pc, #388]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a60      	ldr	r2, [pc, #384]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b5e      	ldr	r3, [pc, #376]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fe14 	bl	80011ac <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fe10 	bl	80011ac <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e356      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259a:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xe4>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fe00 	bl	80011ac <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fdfc 	bl	80011ac <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e342      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c2:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x10c>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 808c 	beq.w	80026f8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e0:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_RCC_OscConfig+0x162>
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2b18      	cmp	r3, #24
 80025fa:	d137      	bne.n	800266c <HAL_RCC_OscConfig+0x1c8>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d132      	bne.n	800266c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002606:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x17a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e314      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800261e:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0219 	bic.w	r2, r3, #25
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	492f      	ldr	r1, [pc, #188]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fdbc 	bl	80011ac <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002638:	f7fe fdb8 	bl	80011ac <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e2fe      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	4920      	ldr	r1, [pc, #128]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266a:	e045      	b.n	80026f8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d026      	beq.n	80026c2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 0219 	bic.w	r2, r3, #25
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4919      	ldr	r1, [pc, #100]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fd91 	bl	80011ac <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe fd8d 	bl	80011ac <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e2d3      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	490b      	ldr	r1, [pc, #44]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
 80026c0:	e01a      	b.n	80026f8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a08      	ldr	r2, [pc, #32]	@ (80026e8 <HAL_RCC_OscConfig+0x244>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fd6d 	bl	80011ac <HAL_GetTick>
 80026d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fd69 	bl	80011ac <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d903      	bls.n	80026ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e2af      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
 80026e8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ec:	4b96      	ldr	r3, [pc, #600]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ee      	bne.n	80026d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d06a      	beq.n	80027da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002704:	4b90      	ldr	r3, [pc, #576]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800270c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800270e:	4b8e      	ldr	r3, [pc, #568]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d007      	beq.n	800272a <HAL_RCC_OscConfig+0x286>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b18      	cmp	r3, #24
 800271e:	d11b      	bne.n	8002758 <HAL_RCC_OscConfig+0x2b4>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272a:	4b87      	ldr	r3, [pc, #540]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x29e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e282      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002742:	4b81      	ldr	r3, [pc, #516]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	061b      	lsls	r3, r3, #24
 8002750:	497d      	ldr	r1, [pc, #500]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002756:	e040      	b.n	80027da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002760:	4b79      	ldr	r3, [pc, #484]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a78      	ldr	r2, [pc, #480]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fd1e 	bl	80011ac <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002774:	f7fe fd1a 	bl	80011ac <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e260      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002786:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002792:	4b6d      	ldr	r3, [pc, #436]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	4969      	ldr	r1, [pc, #420]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60cb      	str	r3, [r1, #12]
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027a8:	4b67      	ldr	r3, [pc, #412]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a66      	ldr	r2, [pc, #408]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fcfa 	bl	80011ac <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027bc:	f7fe fcf6 	bl	80011ac <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e23c      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d036      	beq.n	8002854 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b56      	ldr	r3, [pc, #344]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f2:	4a55      	ldr	r2, [pc, #340]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fcd7 	bl	80011ac <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fcd3 	bl	80011ac <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e219      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002814:	4b4c      	ldr	r3, [pc, #304]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x35e>
 8002820:	e018      	b.n	8002854 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002826:	4a48      	ldr	r2, [pc, #288]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fcbd 	bl	80011ac <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fcb9 	bl	80011ac <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1ff      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002848:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d036      	beq.n	80028ce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d019      	beq.n	800289c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002868:	4b37      	ldr	r3, [pc, #220]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a36      	ldr	r2, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800286e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002872:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002874:	f7fe fc9a 	bl	80011ac <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287c:	f7fe fc96 	bl	80011ac <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1dc      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800288e:	4b2e      	ldr	r3, [pc, #184]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x3d8>
 800289a:	e018      	b.n	80028ce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80028a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fc80 	bl	80011ac <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b0:	f7fe fc7c 	bl	80011ac <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1c2      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c2:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8086 	beq.w	80029e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x4a8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_RCC_OscConfig+0x4a8>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc60 	bl	80011ac <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fc5c 	bl	80011ac <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1a2      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x4a8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x480>
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	e032      	b.n	800298a <HAL_RCC_OscConfig+0x4e6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4ac>
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a02      	ldr	r2, [pc, #8]	@ (8002948 <HAL_RCC_OscConfig+0x4a4>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
 8002944:	e021      	b.n	800298a <HAL_RCC_OscConfig+0x4e6>
 8002946:	bf00      	nop
 8002948:	58024400 	.word	0x58024400
 800294c:	58024800 	.word	0x58024800
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x4ce>
 8002958:	4b83      	ldr	r3, [pc, #524]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a82      	ldr	r2, [pc, #520]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	4b80      	ldr	r3, [pc, #512]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a7f      	ldr	r2, [pc, #508]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x4e6>
 8002972:	4b7d      	ldr	r3, [pc, #500]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a7c      	ldr	r2, [pc, #496]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
 800297e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a79      	ldr	r2, [pc, #484]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fc0b 	bl	80011ac <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fc07 	bl	80011ac <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e14b      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ee      	beq.n	800299a <HAL_RCC_OscConfig+0x4f6>
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fbf5 	bl	80011ac <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fbf1 	bl	80011ac <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e135      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029dc:	4b62      	ldr	r3, [pc, #392]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 812a 	beq.w	8002c46 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029fa:	2b18      	cmp	r3, #24
 80029fc:	f000 80ba 	beq.w	8002b74 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f040 8095 	bne.w	8002b34 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b57      	ldr	r3, [pc, #348]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a56      	ldr	r2, [pc, #344]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe fbc9 	bl	80011ac <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fbc5 	bl	80011ac <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e10b      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a30:	4b4d      	ldr	r3, [pc, #308]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a40:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_OscConfig+0x6c8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	4945      	ldr	r1, [pc, #276]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	3b01      	subs	r3, #1
 8002a66:	025b      	lsls	r3, r3, #9
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a86:	4938      	ldr	r1, [pc, #224]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a8c:	4b36      	ldr	r3, [pc, #216]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a90:	4a35      	ldr	r2, [pc, #212]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a9c:	4b34      	ldr	r3, [pc, #208]	@ (8002b70 <HAL_RCC_OscConfig+0x6cc>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aa4:	00d2      	lsls	r2, r2, #3
 8002aa6:	4930      	ldr	r1, [pc, #192]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aac:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f023 020c 	bic.w	r2, r3, #12
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	492b      	ldr	r1, [pc, #172]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002abe:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	f023 0202 	bic.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4927      	ldr	r1, [pc, #156]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad0:	4b25      	ldr	r3, [pc, #148]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	4a24      	ldr	r2, [pc, #144]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4b22      	ldr	r3, [pc, #136]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002af4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fb4e 	bl	80011ac <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fb4a 	bl	80011ac <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e090      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x670>
 8002b32:	e088      	b.n	8002c46 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fb34 	bl	80011ac <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fb30 	bl	80011ac <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e076      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5a:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_RCC_OscConfig+0x6c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x6a4>
 8002b66:	e06e      	b.n	8002c46 <HAL_RCC_OscConfig+0x7a2>
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	fffffc0c 	.word	0xfffffc0c
 8002b70:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b74:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b7a:	4b35      	ldr	r3, [pc, #212]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d031      	beq.n	8002bec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0203 	and.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d12a      	bne.n	8002bec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d122      	bne.n	8002bec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d11a      	bne.n	8002bec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0a5b      	lsrs	r3, r3, #9
 8002bba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d111      	bne.n	8002bec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e02b      	b.n	8002c48 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bf0:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d01f      	beq.n	8002c46 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	4a11      	ldr	r2, [pc, #68]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c12:	f7fe facb 	bl	80011ac <HAL_GetTick>
 8002c16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c18:	bf00      	nop
 8002c1a:	f7fe fac7 	bl	80011ac <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d0f9      	beq.n	8002c1a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_RCC_OscConfig+0x7b0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c32:	00d2      	lsls	r2, r2, #3
 8002c34:	4906      	ldr	r1, [pc, #24]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_RCC_OscConfig+0x7ac>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3730      	adds	r7, #48	@ 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58024400 	.word	0x58024400
 8002c54:	ffff0007 	.word	0xffff0007

08002c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e19c      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b87      	ldr	r3, [pc, #540]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 020f 	bic.w	r2, r3, #15
 8002c82:	4985      	ldr	r1, [pc, #532]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e184      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb8:	4b78      	ldr	r3, [pc, #480]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4975      	ldr	r1, [pc, #468]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	4b70      	ldr	r3, [pc, #448]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d908      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	496a      	ldr	r1, [pc, #424]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	4b64      	ldr	r3, [pc, #400]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d908      	bls.n	8002d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	495e      	ldr	r1, [pc, #376]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d42:	4b56      	ldr	r3, [pc, #344]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4953      	ldr	r1, [pc, #332]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4b4d      	ldr	r3, [pc, #308]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 020f 	bic.w	r2, r3, #15
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4947      	ldr	r1, [pc, #284]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d055      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d8e:	4b43      	ldr	r3, [pc, #268]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4940      	ldr	r1, [pc, #256]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da8:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d121      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0f6      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc0:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0ea      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd8:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0de      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0d6      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df8:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f023 0207 	bic.w	r2, r3, #7
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4925      	ldr	r1, [pc, #148]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0a:	f7fe f9cf 	bl	80011ac <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe f9cb 	bl	80011ac <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0be      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e28:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d1eb      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d208      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <HAL_RCC_ClockConfig+0x244>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d214      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4906      	ldr	r1, [pc, #24]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e086      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x34e>
 8002e98:	52002000 	.word	0x52002000
 8002e9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d208      	bcs.n	8002ece <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4939      	ldr	r1, [pc, #228]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d208      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eea:	4b31      	ldr	r3, [pc, #196]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	492e      	ldr	r1, [pc, #184]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d208      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	4922      	ldr	r1, [pc, #136]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d208      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4917      	ldr	r1, [pc, #92]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f58:	f000 f834 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	4912      	ldr	r1, [pc, #72]	@ (8002fb4 <HAL_RCC_ClockConfig+0x35c>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_RCC_ClockConfig+0x358>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_RCC_ClockConfig+0x35c>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x360>)
 8002f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_RCC_ClockConfig+0x364>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_RCC_ClockConfig+0x368>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe f8bc 	bl	8001118 <HAL_InitTick>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	08006ce0 	.word	0x08006ce0
 8002fb8:	24000004 	.word	0x24000004
 8002fbc:	24000000 	.word	0x24000000
 8002fc0:	24000024 	.word	0x24000024

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	@ 0x24
 8002fc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fca:	4bb3      	ldr	r3, [pc, #716]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fd2:	2b18      	cmp	r3, #24
 8002fd4:	f200 8155 	bhi.w	8003282 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003283 	.word	0x08003283
 8002fe8:	08003283 	.word	0x08003283
 8002fec:	08003283 	.word	0x08003283
 8002ff0:	08003283 	.word	0x08003283
 8002ff4:	08003283 	.word	0x08003283
 8002ff8:	08003283 	.word	0x08003283
 8002ffc:	08003283 	.word	0x08003283
 8003000:	0800306b 	.word	0x0800306b
 8003004:	08003283 	.word	0x08003283
 8003008:	08003283 	.word	0x08003283
 800300c:	08003283 	.word	0x08003283
 8003010:	08003283 	.word	0x08003283
 8003014:	08003283 	.word	0x08003283
 8003018:	08003283 	.word	0x08003283
 800301c:	08003283 	.word	0x08003283
 8003020:	08003071 	.word	0x08003071
 8003024:	08003283 	.word	0x08003283
 8003028:	08003283 	.word	0x08003283
 800302c:	08003283 	.word	0x08003283
 8003030:	08003283 	.word	0x08003283
 8003034:	08003283 	.word	0x08003283
 8003038:	08003283 	.word	0x08003283
 800303c:	08003283 	.word	0x08003283
 8003040:	08003077 	.word	0x08003077
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003044:	4b94      	ldr	r3, [pc, #592]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003050:	4b91      	ldr	r3, [pc, #580]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	4a90      	ldr	r2, [pc, #576]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003062:	e111      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003064:	4b8d      	ldr	r3, [pc, #564]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003066:	61bb      	str	r3, [r7, #24]
      break;
 8003068:	e10e      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800306a:	4b8d      	ldr	r3, [pc, #564]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800306c:	61bb      	str	r3, [r7, #24]
      break;
 800306e:	e10b      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003070:	4b8c      	ldr	r3, [pc, #560]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003072:	61bb      	str	r3, [r7, #24]
      break;
 8003074:	e108      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003076:	4b88      	ldr	r3, [pc, #544]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003080:	4b85      	ldr	r3, [pc, #532]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800308a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800308c:	4b82      	ldr	r3, [pc, #520]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003096:	4b80      	ldr	r3, [pc, #512]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	08db      	lsrs	r3, r3, #3
 800309c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80e1 	beq.w	800327c <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	f000 8083 	beq.w	80031c8 <HAL_RCC_GetSysClockFreq+0x204>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	f200 80a1 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x248>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x114>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d056      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030d6:	e099      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02d      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	08db      	lsrs	r3, r3, #3
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	4a6b      	ldr	r2, [pc, #428]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310e:	4b62      	ldr	r3, [pc, #392]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003122:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800313e:	e087      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	4b51      	ldr	r3, [pc, #324]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003162:	ed97 6a02 	vldr	s12, [r7, #8]
 8003166:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003182:	e065      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003196:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c6:	e043      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031da:	4b2f      	ldr	r3, [pc, #188]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800320a:	e021      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003216:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800321a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003232:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	0a5b      	lsrs	r3, r3, #9
 8003256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325a:	3301      	adds	r3, #1
 800325c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003268:	edd7 6a07 	vldr	s13, [r7, #28]
 800326c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003274:	ee17 3a90 	vmov	r3, s15
 8003278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800327a:	e005      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
      break;
 8003280:	e002      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003282:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003284:	61bb      	str	r3, [r7, #24]
      break;
 8003286:	bf00      	nop
  }

  return sysclockfreq;
 8003288:	69bb      	ldr	r3, [r7, #24]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
 800329c:	03d09000 	.word	0x03d09000
 80032a0:	003d0900 	.word	0x003d0900
 80032a4:	007a1200 	.word	0x007a1200
 80032a8:	46000000 	.word	0x46000000
 80032ac:	4c742400 	.word	0x4c742400
 80032b0:	4a742400 	.word	0x4a742400
 80032b4:	4af42400 	.word	0x4af42400

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032be:	f7ff fe81 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <HAL_RCC_GetHCLKFreq+0x50>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490f      	ldr	r1, [pc, #60]	@ (800330c <HAL_RCC_GetHCLKFreq+0x54>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <HAL_RCC_GetHCLKFreq+0x50>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	4a09      	ldr	r2, [pc, #36]	@ (800330c <HAL_RCC_GetHCLKFreq+0x54>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x58>)
 80032f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032fc:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x58>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	58024400 	.word	0x58024400
 800330c:	08006ce0 	.word	0x08006ce0
 8003310:	24000004 	.word	0x24000004
 8003314:	24000000 	.word	0x24000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800331c:	f7ff ffcc 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4904      	ldr	r1, [pc, #16]	@ (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	08006ce0 	.word	0x08006ce0

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003348:	f7ff ffb6 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58024400 	.word	0x58024400
 800336c:	08006ce0 	.word	0x08006ce0

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c6      	sub	sp, #280	@ 0x118
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003394:	2500      	movs	r5, #0
 8003396:	ea54 0305 	orrs.w	r3, r4, r5
 800339a:	d049      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033a6:	d02f      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ac:	d828      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033b2:	d01a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033b8:	d822      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c2:	d007      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c4:	e01c      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c6:	4bab      	ldr	r3, [pc, #684]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	4aaa      	ldr	r2, [pc, #680]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033d2:	e01a      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d8:	3308      	adds	r3, #8
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fc25 	bl	8004c2c <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e8:	e00f      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ee:	3328      	adds	r3, #40	@ 0x28
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fccc 	bl	8004d90 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033fe:	e004      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003412:	4b98      	ldr	r3, [pc, #608]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800341a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003420:	4a94      	ldr	r2, [pc, #592]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6513      	str	r3, [r2, #80]	@ 0x50
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800342c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800343c:	f04f 0900 	mov.w	r9, #0
 8003440:	ea58 0309 	orrs.w	r3, r8, r9
 8003444:	d047      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344c:	2b04      	cmp	r3, #4
 800344e:	d82a      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800346d 	.word	0x0800346d
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003491 	.word	0x08003491
 8003464:	080034af 	.word	0x080034af
 8003468:	080034af 	.word	0x080034af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4b81      	ldr	r3, [pc, #516]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	4a80      	ldr	r2, [pc, #512]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003478:	e01a      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347e:	3308      	adds	r3, #8
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fbd2 	bl	8004c2c <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348e:	e00f      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fc79 	bl	8004d90 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	f023 0107 	bic.w	r1, r3, #7
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80034e2:	f04f 0b00 	mov.w	fp, #0
 80034e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034f4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034f8:	d03b      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80034fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034fe:	d834      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003500:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003504:	d037      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003506:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350a:	d82e      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800350c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003510:	d033      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003512:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003516:	d828      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800351c:	d01a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003522:	d822      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800352e:	e01c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4a4f      	ldr	r2, [pc, #316]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353c:	e01e      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003542:	3308      	adds	r3, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fb70 	bl	8004c2c <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003552:	e013      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003558:	3328      	adds	r3, #40	@ 0x28
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc17 	bl	8004d90 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003568:	e008      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003584:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003594:	4a37      	ldr	r2, [pc, #220]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003596:	430b      	orrs	r3, r1
 8003598:	6593      	str	r3, [r2, #88]	@ 0x58
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d05d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035d0:	d03b      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035d6:	d834      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035dc:	d037      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80035de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e2:	d82e      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035e8:	d033      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ee:	d828      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035f4:	d01a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035fa:	d822      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003604:	d007      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003606:	e01c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003608:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800360e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003614:	e01e      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361a:	3308      	adds	r3, #8
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fb04 	bl	8004c2c <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800362a:	e013      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003630:	3328      	adds	r3, #40	@ 0x28
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fbab 	bl	8004d90 <RCCEx_PLL3_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003648:	e004      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003668:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800366c:	4a01      	ldr	r2, [pc, #4]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
 8003672:	e005      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800367c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800368c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003696:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d03a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a6:	2b30      	cmp	r3, #48	@ 0x30
 80036a8:	d01f      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80036aa:	2b30      	cmp	r3, #48	@ 0x30
 80036ac:	d819      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d00c      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d815      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d111      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036be:	4baa      	ldr	r3, [pc, #680]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	4aa9      	ldr	r2, [pc, #676]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d0:	3308      	adds	r3, #8
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 faa9 	bl	8004c2c <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	4a98      	ldr	r2, [pc, #608]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003708:	430b      	orrs	r3, r1
 800370a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003712:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800372c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d051      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003740:	d035      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003746:	d82e      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800374c:	d031      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800374e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003752:	d828      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003758:	d01a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800375a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375e:	d822      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003768:	d007      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800376a:	e01c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376c:	4b7e      	ldr	r3, [pc, #504]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	4a7d      	ldr	r2, [pc, #500]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003778:	e01c      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377e:	3308      	adds	r3, #8
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fa52 	bl	8004c2c <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800378e:	e011      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	3328      	adds	r3, #40	@ 0x28
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 faf9 	bl	8004d90 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	4a67      	ldr	r2, [pc, #412]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d053      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d033      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003806:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800380a:	d82c      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800380c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003810:	d02f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003816:	d826      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003818:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800381c:	d02b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800381e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003822:	d820      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003828:	d012      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800382a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800382e:	d81a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d115      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383e:	3308      	adds	r3, #8
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f001 f9f2 	bl	8004c2c <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800384e:	e015      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003854:	3328      	adds	r3, #40	@ 0x28
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fa99 	bl	8004d90 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003884:	4b38      	ldr	r3, [pc, #224]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	4a35      	ldr	r2, [pc, #212]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	@ 0x50
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038bc:	460b      	mov	r3, r1
 80038be:	4313      	orrs	r3, r2
 80038c0:	d058      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ce:	d033      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d4:	d82c      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038da:	d02f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e0:	d826      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038e6:	d02b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80038e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038ec:	d820      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f2:	d012      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80038f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f8:	d81a      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d022      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003902:	d115      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003908:	3308      	adds	r3, #8
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f98d 	bl	8004c2c <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003918:	e015      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	3328      	adds	r3, #40	@ 0x28
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fa34 	bl	8004d90 <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800392e:	e00a      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003936:	e006      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003938:	bf00      	nop
 800393a:	e004      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800393c:	bf00      	nop
 800393e:	e002      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003940:	bf00      	nop
 8003942:	e000      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800395e:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003960:	430b      	orrs	r3, r1
 8003962:	6593      	str	r3, [r2, #88]	@ 0x58
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800398a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	d037      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800399e:	d00e      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a4:	d816      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ae:	d111      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4bc4      	ldr	r3, [pc, #784]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	4ac3      	ldr	r2, [pc, #780]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c2:	3308      	adds	r3, #8
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f930 	bl	8004c2c <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039e6:	4bb7      	ldr	r3, [pc, #732]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f4:	4ab3      	ldr	r2, [pc, #716]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d039      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d81c      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a71 	.word	0x08003a71
 8003a38:	08003a45 	.word	0x08003a45
 8003a3c:	08003a53 	.word	0x08003a53
 8003a40:	08003a71 	.word	0x08003a71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b9f      	ldr	r3, [pc, #636]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	4a9e      	ldr	r2, [pc, #632]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a56:	3308      	adds	r3, #8
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f8e6 	bl	8004c2c <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a7a:	4b92      	ldr	r3, [pc, #584]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	f023 0103 	bic.w	r1, r3, #3
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a88:	4a8e      	ldr	r2, [pc, #568]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f000 8099 	beq.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	4b83      	ldr	r3, [pc, #524]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a82      	ldr	r2, [pc, #520]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fb71 	bl	80011ac <HAL_GetTick>
 8003aca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fd fb6c 	bl	80011ac <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	@ 0x64
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae8:	4b77      	ldr	r3, [pc, #476]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ed      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d173      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003afc:	4b71      	ldr	r3, [pc, #452]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b08:	4053      	eors	r3, r2
 8003b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b12:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	4b69      	ldr	r3, [pc, #420]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a68      	ldr	r2, [pc, #416]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2a:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b36:	4a63      	ldr	r2, [pc, #396]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4a:	d118      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb2e 	bl	80011ac <HAL_GetTick>
 8003b50:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b54:	e00d      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fb29 	bl	80011ac <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d903      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003b70:	e005      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b72:	4b54      	ldr	r3, [pc, #336]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0eb      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d129      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b96:	d10e      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b98:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ba8:	091a      	lsrs	r2, r3, #4
 8003baa:	4b48      	ldr	r3, [pc, #288]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	4a45      	ldr	r2, [pc, #276]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6113      	str	r3, [r2, #16]
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bb6:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bc0:	6113      	str	r3, [r2, #16]
 8003bc2:	4b40      	ldr	r3, [pc, #256]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 0301 	and.w	r3, r2, #1
 8003bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f000 808f 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c14:	2b28      	cmp	r3, #40	@ 0x28
 8003c16:	d871      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c18:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003d05 	.word	0x08003d05
 8003c24:	08003cfd 	.word	0x08003cfd
 8003c28:	08003cfd 	.word	0x08003cfd
 8003c2c:	08003cfd 	.word	0x08003cfd
 8003c30:	08003cfd 	.word	0x08003cfd
 8003c34:	08003cfd 	.word	0x08003cfd
 8003c38:	08003cfd 	.word	0x08003cfd
 8003c3c:	08003cfd 	.word	0x08003cfd
 8003c40:	08003cd1 	.word	0x08003cd1
 8003c44:	08003cfd 	.word	0x08003cfd
 8003c48:	08003cfd 	.word	0x08003cfd
 8003c4c:	08003cfd 	.word	0x08003cfd
 8003c50:	08003cfd 	.word	0x08003cfd
 8003c54:	08003cfd 	.word	0x08003cfd
 8003c58:	08003cfd 	.word	0x08003cfd
 8003c5c:	08003cfd 	.word	0x08003cfd
 8003c60:	08003ce7 	.word	0x08003ce7
 8003c64:	08003cfd 	.word	0x08003cfd
 8003c68:	08003cfd 	.word	0x08003cfd
 8003c6c:	08003cfd 	.word	0x08003cfd
 8003c70:	08003cfd 	.word	0x08003cfd
 8003c74:	08003cfd 	.word	0x08003cfd
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003cfd 	.word	0x08003cfd
 8003c80:	08003d05 	.word	0x08003d05
 8003c84:	08003cfd 	.word	0x08003cfd
 8003c88:	08003cfd 	.word	0x08003cfd
 8003c8c:	08003cfd 	.word	0x08003cfd
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003cfd 	.word	0x08003cfd
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003cfd 	.word	0x08003cfd
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003cfd 	.word	0x08003cfd
 8003cb8:	08003cfd 	.word	0x08003cfd
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003d05 	.word	0x08003d05
 8003cc4:	58024400 	.word	0x58024400
 8003cc8:	58024800 	.word	0x58024800
 8003ccc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ffa7 	bl	8004c2c <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cea:	3328      	adds	r3, #40	@ 0x28
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 f84e 	bl	8004d90 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d0e:	4bbf      	ldr	r3, [pc, #764]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d1c:	4abb      	ldr	r2, [pc, #748]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0302 	and.w	r3, r2, #2
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d041      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d824      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d56:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003da9 	.word	0x08003da9
 8003d60:	08003d75 	.word	0x08003d75
 8003d64:	08003d8b 	.word	0x08003d8b
 8003d68:	08003da9 	.word	0x08003da9
 8003d6c:	08003da9 	.word	0x08003da9
 8003d70:	08003da9 	.word	0x08003da9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d78:	3308      	adds	r3, #8
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ff55 	bl	8004c2c <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d88:	e00f      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8e:	3328      	adds	r3, #40	@ 0x28
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fffc 	bl	8004d90 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db2:	4b96      	ldr	r3, [pc, #600]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	f023 0107 	bic.w	r1, r3, #7
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	4a92      	ldr	r2, [pc, #584]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f002 0304 	and.w	r3, r2, #4
 8003ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003de6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d044      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d825      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e20:	3308      	adds	r3, #8
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 ff01 	bl	8004c2c <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e30:	e00f      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e36:	3328      	adds	r3, #40	@ 0x28
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 ffa8 	bl	8004d90 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e46:	e004      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	f023 0107 	bic.w	r1, r3, #7
 8003e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	4a68      	ldr	r2, [pc, #416]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f002 0320 	and.w	r3, r2, #32
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d055      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea6:	d033      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eac:	d82c      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d02f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb8:	d826      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ebe:	d02b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ec0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ec4:	d820      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eca:	d012      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed0:	d81a      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d022      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eda:	d115      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fea1 	bl	8004c2c <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e015      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	3328      	adds	r3, #40	@ 0x28
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ff48 	bl	8004d90 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f06:	e00a      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f0e:	e006      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f10:	bf00      	nop
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f14:	bf00      	nop
 8003f16:	e002      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f26:	4b39      	ldr	r3, [pc, #228]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f36:	4a35      	ldr	r2, [pc, #212]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f5c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d058      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f72:	d033      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003f74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f78:	d82c      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f84:	d826      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f8a:	d02b      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f90:	d820      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f96:	d012      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d81a      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d022      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fac:	3308      	adds	r3, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe3b 	bl	8004c2c <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fbc:	e015      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc2:	3328      	adds	r3, #40	@ 0x28
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fee2 	bl	8004d90 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e00a      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10e      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004002:	4a02      	ldr	r2, [pc, #8]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6593      	str	r3, [r2, #88]	@ 0x58
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800402e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d055      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004040:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004044:	d033      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004046:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800404a:	d82c      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004050:	d02f      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004056:	d826      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004058:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800405c:	d02b      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800405e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004062:	d820      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004068:	d012      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800406a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406e:	d81a      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d022      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004078:	d115      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407e:	3308      	adds	r3, #8
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fdd2 	bl	8004c2c <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800408e:	e015      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004094:	3328      	adds	r3, #40	@ 0x28
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fe79 	bl	8004d90 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00a      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d4:	4a9c      	ldr	r2, [pc, #624]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 0308 	and.w	r3, r2, #8
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d01e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004110:	d10c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fe38 	bl	8004d90 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800412c:	4b86      	ldr	r3, [pc, #536]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413c:	4a82      	ldr	r2, [pc, #520]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f002 0310 	and.w	r3, r2, #16
 800414e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004158:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800415c:	460b      	mov	r3, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	d01e      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416e:	d10c      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	3328      	adds	r3, #40	@ 0x28
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fe09 	bl	8004d90 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800418a:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419a:	4a6b      	ldr	r2, [pc, #428]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ae:	2300      	movs	r3, #0
 80041b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d03e      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c8:	d022      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ce:	d81b      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d00b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80041da:	e015      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e0:	3308      	adds	r3, #8
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fd21 	bl	8004c2c <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041f0:	e00f      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f6:	3328      	adds	r3, #40	@ 0x28
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fdc8 	bl	8004d90 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421a:	4b4b      	ldr	r3, [pc, #300]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004226:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800422a:	4a47      	ldr	r2, [pc, #284]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800422c:	430b      	orrs	r3, r1
 800422e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004236:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004246:	673b      	str	r3, [r7, #112]	@ 0x70
 8004248:	2300      	movs	r3, #0
 800424a:	677b      	str	r3, [r7, #116]	@ 0x74
 800424c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004250:	460b      	mov	r3, r1
 8004252:	4313      	orrs	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004262:	d01f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004264:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004268:	d818      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004274:	d007      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004276:	e011      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004278:	4b33      	ldr	r3, [pc, #204]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	4a32      	ldr	r2, [pc, #200]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004284:	e00f      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428a:	3328      	adds	r3, #40	@ 0x28
 800428c:	2101      	movs	r1, #1
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fd7e 	bl	8004d90 <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800429a:	e004      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042be:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042dc:	2300      	movs	r3, #0
 80042de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d034      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f8:	d007      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80042fa:	e011      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004308:	e00e      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800430a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430e:	3308      	adds	r3, #8
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fc8a 	bl	8004c2c <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433e:	4a02      	ldr	r2, [pc, #8]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004340:	430b      	orrs	r3, r1
 8004342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004344:	e006      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004346:	bf00      	nop
 8004348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004360:	663b      	str	r3, [r7, #96]	@ 0x60
 8004362:	2300      	movs	r3, #0
 8004364:	667b      	str	r3, [r7, #100]	@ 0x64
 8004366:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d00c      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	3328      	adds	r3, #40	@ 0x28
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd09 	bl	8004d90 <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800438a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004396:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004398:	2300      	movs	r3, #0
 800439a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b0:	d018      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b6:	d811      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d014      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80043be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c2:	d80b      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d011      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80043c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043cc:	d106      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4bb7      	ldr	r3, [pc, #732]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	4ab6      	ldr	r2, [pc, #728]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043da:	e008      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043e4:	bf00      	nop
 80043e6:	e002      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f6:	4bad      	ldr	r3, [pc, #692]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004404:	4aa9      	ldr	r2, [pc, #676]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004406:	430b      	orrs	r3, r1
 8004408:	6553      	str	r3, [r2, #84]	@ 0x54
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004420:	653b      	str	r3, [r7, #80]	@ 0x50
 8004422:	2300      	movs	r3, #0
 8004424:	657b      	str	r3, [r7, #84]	@ 0x54
 8004426:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004430:	4b9e      	ldr	r3, [pc, #632]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004434:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a9b      	ldr	r2, [pc, #620]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004440:	430b      	orrs	r3, r1
 8004442:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004452:	2300      	movs	r3, #0
 8004454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004456:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800445a:	460b      	mov	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004460:	4b92      	ldr	r3, [pc, #584]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800446e:	4a8f      	ldr	r2, [pc, #572]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
 8004482:	2300      	movs	r3, #0
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004490:	4b86      	ldr	r3, [pc, #536]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4a85      	ldr	r2, [pc, #532]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800449a:	6113      	str	r3, [r2, #16]
 800449c:	4b83      	ldr	r3, [pc, #524]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800449e:	6919      	ldr	r1, [r3, #16]
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044a8:	4a80      	ldr	r2, [pc, #512]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044bc:	2300      	movs	r3, #0
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ca:	4b78      	ldr	r3, [pc, #480]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d8:	4a74      	ldr	r2, [pc, #464]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ec:	2300      	movs	r3, #0
 80044ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044fa:	4b6c      	ldr	r3, [pc, #432]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450a:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800450c:	430b      	orrs	r3, r1
 800450e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	2100      	movs	r1, #0
 800451a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004522:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d011      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004530:	3308      	adds	r3, #8
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb79 	bl	8004c2c <RCCEx_PLL2_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	2100      	movs	r1, #0
 800455a:	6239      	str	r1, [r7, #32]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
 8004562:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d011      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	3308      	adds	r3, #8
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fb59 	bl	8004c2c <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	2100      	movs	r1, #0
 800459a:	61b9      	str	r1, [r7, #24]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d011      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	3308      	adds	r3, #8
 80045b2:	2102      	movs	r1, #2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb39 	bl	8004c2c <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	2100      	movs	r1, #0
 80045da:	6139      	str	r1, [r7, #16]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d011      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f0:	3328      	adds	r3, #40	@ 0x28
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fbcb 	bl	8004d90 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800460c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	2100      	movs	r1, #0
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d011      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004630:	3328      	adds	r3, #40	@ 0x28
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fbab 	bl	8004d90 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800464c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	2100      	movs	r1, #0
 800465a:	6039      	str	r1, [r7, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d011      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004670:	3328      	adds	r3, #40	@ 0x28
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fb8b 	bl	8004d90 <RCCEx_PLL3_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800468c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004690:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
}
 800469e:	4618      	mov	r0, r3
 80046a0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400

080046b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046b4:	f7fe fe00 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4904      	ldr	r1, [pc, #16]	@ (80046d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	58024400 	.word	0x58024400
 80046d8:	08006ce0 	.word	0x08006ce0

080046dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	@ 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e4:	4ba1      	ldr	r3, [pc, #644]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046ee:	4b9f      	ldr	r3, [pc, #636]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	0b1b      	lsrs	r3, r3, #12
 80046f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046fa:	4b9c      	ldr	r3, [pc, #624]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004706:	4b99      	ldr	r3, [pc, #612]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8111 	beq.w	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b02      	cmp	r3, #2
 800472e:	f000 8083 	beq.w	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b02      	cmp	r3, #2
 8004736:	f200 80a1 	bhi.w	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d056      	beq.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004746:	e099      	b.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004748:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02d      	beq.n	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004754:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	08db      	lsrs	r3, r3, #3
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	4a84      	ldr	r2, [pc, #528]	@ (8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b7b      	ldr	r3, [pc, #492]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ae:	e087      	b.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b6a      	ldr	r3, [pc, #424]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f2:	e065      	b.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004836:	e043      	b.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b48      	ldr	r3, [pc, #288]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487a:	e021      	b.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b37      	ldr	r3, [pc, #220]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048c0:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048da:	edd7 6a07 	vldr	s13, [r7, #28]
 80048de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e6:	ee17 2a90 	vmov	r2, s15
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048ee:	4b1f      	ldr	r3, [pc, #124]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004908:	edd7 6a07 	vldr	s13, [r7, #28]
 800490c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004914:	ee17 2a90 	vmov	r2, s15
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800491c:	4b13      	ldr	r3, [pc, #76]	@ (800496c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	0e1b      	lsrs	r3, r3, #24
 8004922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004936:	edd7 6a07 	vldr	s13, [r7, #28]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 2a90 	vmov	r2, s15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800494a:	e008      	b.n	800495e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	609a      	str	r2, [r3, #8]
}
 800495e:	bf00      	nop
 8004960:	3724      	adds	r7, #36	@ 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58024400 	.word	0x58024400
 8004970:	03d09000 	.word	0x03d09000
 8004974:	46000000 	.word	0x46000000
 8004978:	4c742400 	.word	0x4c742400
 800497c:	4a742400 	.word	0x4a742400
 8004980:	4af42400 	.word	0x4af42400

08004984 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	@ 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800498c:	4ba1      	ldr	r3, [pc, #644]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004996:	4b9f      	ldr	r3, [pc, #636]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	0d1b      	lsrs	r3, r3, #20
 800499c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ae:	4b99      	ldr	r3, [pc, #612]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8111 	beq.w	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f000 8083 	beq.w	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	f200 80a1 	bhi.w	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d056      	beq.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049ee:	e099      	b.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f0:	4b88      	ldr	r3, [pc, #544]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02d      	beq.n	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049fc:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	08db      	lsrs	r3, r3, #3
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	4a84      	ldr	r2, [pc, #528]	@ (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b7b      	ldr	r3, [pc, #492]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a56:	e087      	b.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	e065      	b.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ade:	e043      	b.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b48      	ldr	r3, [pc, #288]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b22:	e021      	b.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b37      	ldr	r3, [pc, #220]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b68:	4b2a      	ldr	r3, [pc, #168]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	0a5b      	lsrs	r3, r3, #9
 8004b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8e:	ee17 2a90 	vmov	r2, s15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b96:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbc:	ee17 2a90 	vmov	r2, s15
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	@ (8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bea:	ee17 2a90 	vmov	r2, s15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bf2:	e008      	b.n	8004c06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	609a      	str	r2, [r3, #8]
}
 8004c06:	bf00      	nop
 8004c08:	3724      	adds	r7, #36	@ 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	03d09000 	.word	0x03d09000
 8004c1c:	46000000 	.word	0x46000000
 8004c20:	4c742400 	.word	0x4c742400
 8004c24:	4a742400 	.word	0x4a742400
 8004c28:	4af42400 	.word	0x4af42400

08004c2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c3a:	4b53      	ldr	r3, [pc, #332]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d101      	bne.n	8004c4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e099      	b.n	8004d7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fc faa9 	bl	80011ac <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c5e:	f7fc faa5 	bl	80011ac <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e086      	b.n	8004d7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c70:	4b45      	ldr	r3, [pc, #276]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c7c:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	031b      	lsls	r3, r3, #12
 8004c8a:	493f      	ldr	r1, [pc, #252]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cc0:	4931      	ldr	r1, [pc, #196]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cc6:	4b30      	ldr	r3, [pc, #192]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	492d      	ldr	r1, [pc, #180]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f023 0220 	bic.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4928      	ldr	r1, [pc, #160]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	4a26      	ldr	r2, [pc, #152]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	f023 0310 	bic.w	r3, r3, #16
 8004cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cf6:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <RCCEx_PLL2_Config+0x160>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	69d2      	ldr	r2, [r2, #28]
 8004d02:	00d2      	lsls	r2, r2, #3
 8004d04:	4920      	ldr	r1, [pc, #128]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	f043 0310 	orr.w	r3, r3, #16
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d28:	e00f      	b.n	8004d4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d30:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a14      	ldr	r2, [pc, #80]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d3c:	e005      	b.n	8004d4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fc fa29 	bl	80011ac <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d5e:	f7fc fa25 	bl	80011ac <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e006      	b.n	8004d7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	ffff0007 	.word	0xffff0007

08004d90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d9e:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d101      	bne.n	8004dae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e099      	b.n	8004ee2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4e      	ldr	r2, [pc, #312]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dba:	f7fc f9f7 	bl	80011ac <HAL_GetTick>
 8004dbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc0:	e008      	b.n	8004dd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dc2:	f7fc f9f3 	bl	80011ac <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e086      	b.n	8004ee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd4:	4b45      	ldr	r3, [pc, #276]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f0      	bne.n	8004dc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004de0:	4b42      	ldr	r3, [pc, #264]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	051b      	lsls	r3, r3, #20
 8004dee:	493f      	ldr	r1, [pc, #252]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	025b      	lsls	r3, r3, #9
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e24:	4931      	ldr	r1, [pc, #196]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e2a:	4b30      	ldr	r3, [pc, #192]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	492d      	ldr	r1, [pc, #180]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	4928      	ldr	r1, [pc, #160]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e4e:	4b27      	ldr	r3, [pc, #156]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <RCCEx_PLL3_Config+0x160>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	69d2      	ldr	r2, [r2, #28]
 8004e66:	00d2      	lsls	r2, r2, #3
 8004e68:	4920      	ldr	r1, [pc, #128]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e80:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	4a19      	ldr	r2, [pc, #100]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e8c:	e00f      	b.n	8004eae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d106      	bne.n	8004ea2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e94:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ea0:	e005      	b.n	8004eae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	4a11      	ldr	r2, [pc, #68]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eba:	f7fc f977 	bl	80011ac <HAL_GetTick>
 8004ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec0:	e008      	b.n	8004ed4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec2:	f7fc f973 	bl	80011ac <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e006      	b.n	8004ee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	ffff0007 	.word	0xffff0007

08004ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e042      	b.n	8004f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fb fd75 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2224      	movs	r2, #36	@ 0x24
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0201 	bic.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fb18 	bl	8006574 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fca9 	bl	800589c <UART_SetConfig>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e01b      	b.n	8004f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 fb97 	bl	80066b8 <UART_CheckIdleState>
 8004f8a:	4603      	mov	r3, r0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	@ 0x28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d17b      	bne.n	80050a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_UART_Transmit+0x26>
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e074      	b.n	80050a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2221      	movs	r2, #33	@ 0x21
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fce:	f7fc f8ed 	bl	80011ac <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fec:	d108      	bne.n	8005000 <HAL_UART_Transmit+0x6c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	e003      	b.n	8005008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005008:	e030      	b.n	800506c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	@ 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fbf9 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e03d      	b.n	80050a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	3302      	adds	r3, #2
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	e007      	b.n	800505a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	3301      	adds	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1c8      	bne.n	800500a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	2140      	movs	r1, #64	@ 0x40
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f001 fbc2 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e006      	b.n	80050a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b0ba      	sub	sp, #232	@ 0xe8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80050da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80050de:	4013      	ands	r3, r2
 80050e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80050e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11b      	bne.n	8005124 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8393 	beq.w	8005840 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
      }
      return;
 8005122:	e38d      	b.n	8005840 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8123 	beq.w	8005374 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800512e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005132:	4b8d      	ldr	r3, [pc, #564]	@ (8005368 <HAL_UART_IRQHandler+0x2b8>)
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800513a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800513e:	4b8b      	ldr	r3, [pc, #556]	@ (800536c <HAL_UART_IRQHandler+0x2bc>)
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8116 	beq.w	8005374 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d011      	beq.n	8005178 <HAL_UART_IRQHandler+0xc8>
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f043 0201 	orr.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d011      	beq.n	80051a8 <HAL_UART_IRQHandler+0xf8>
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2202      	movs	r2, #2
 8005196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519e:	f043 0204 	orr.w	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <HAL_UART_IRQHandler+0x128>
 80051b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2204      	movs	r2, #4
 80051c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f043 0202 	orr.w	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d017      	beq.n	8005214 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80051f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80051f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005368 <HAL_UART_IRQHandler+0x2b8>)
 80051f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	f043 0208 	orr.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d012      	beq.n	8005246 <HAL_UART_IRQHandler+0x196>
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 82f9 	beq.w	8005844 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d013      	beq.n	8005286 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800525e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800526a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529a:	2b40      	cmp	r3, #64	@ 0x40
 800529c:	d005      	beq.n	80052aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800529e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d054      	beq.n	8005354 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fb1c 	bl	80068e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d146      	bne.n	800534c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1d9      	bne.n	80052be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531a:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <HAL_UART_IRQHandler+0x2c0>)
 800531c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fc17 	bl	8001b58 <HAL_DMA_Abort_IT>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d019      	beq.n	8005364 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800533e:	4610      	mov	r0, r2
 8005340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005342:	e00f      	b.n	8005364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fa93 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534a:	e00b      	b.n	8005364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fa8f 	bl	8005870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005352:	e007      	b.n	8005364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa8b 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005362:	e26f      	b.n	8005844 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	bf00      	nop
    return;
 8005366:	e26d      	b.n	8005844 <HAL_UART_IRQHandler+0x794>
 8005368:	10000001 	.word	0x10000001
 800536c:	04000120 	.word	0x04000120
 8005370:	080069b5 	.word	0x080069b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005378:	2b01      	cmp	r3, #1
 800537a:	f040 8203 	bne.w	8005784 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 81fc 	beq.w	8005784 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 81f5 	beq.w	8005784 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2210      	movs	r2, #16
 80053a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	f040 816d 	bne.w	800568c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4aa4      	ldr	r2, [pc, #656]	@ (800564c <HAL_UART_IRQHandler+0x59c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d068      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005650 <HAL_UART_IRQHandler+0x5a0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d061      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a9f      	ldr	r2, [pc, #636]	@ (8005654 <HAL_UART_IRQHandler+0x5a4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d05a      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005658 <HAL_UART_IRQHandler+0x5a8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d053      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a9a      	ldr	r2, [pc, #616]	@ (800565c <HAL_UART_IRQHandler+0x5ac>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d04c      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a97      	ldr	r2, [pc, #604]	@ (8005660 <HAL_UART_IRQHandler+0x5b0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d045      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a95      	ldr	r2, [pc, #596]	@ (8005664 <HAL_UART_IRQHandler+0x5b4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03e      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a92      	ldr	r2, [pc, #584]	@ (8005668 <HAL_UART_IRQHandler+0x5b8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d037      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a90      	ldr	r2, [pc, #576]	@ (800566c <HAL_UART_IRQHandler+0x5bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d030      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a8d      	ldr	r2, [pc, #564]	@ (8005670 <HAL_UART_IRQHandler+0x5c0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d029      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a8b      	ldr	r2, [pc, #556]	@ (8005674 <HAL_UART_IRQHandler+0x5c4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a88      	ldr	r2, [pc, #544]	@ (8005678 <HAL_UART_IRQHandler+0x5c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a86      	ldr	r2, [pc, #536]	@ (800567c <HAL_UART_IRQHandler+0x5cc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d014      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a83      	ldr	r2, [pc, #524]	@ (8005680 <HAL_UART_IRQHandler+0x5d0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00d      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a81      	ldr	r2, [pc, #516]	@ (8005684 <HAL_UART_IRQHandler+0x5d4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d006      	beq.n	8005492 <HAL_UART_IRQHandler+0x3e2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a7e      	ldr	r2, [pc, #504]	@ (8005688 <HAL_UART_IRQHandler+0x5d8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d106      	bne.n	80054a0 <HAL_UART_IRQHandler+0x3f0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	b29b      	uxth	r3, r3
 800549e:	e005      	b.n	80054ac <HAL_UART_IRQHandler+0x3fc>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80ad 	beq.w	8005614 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f080 80a5 	bcs.w	8005614 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e0:	f000 8087 	beq.w	80055f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800550e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005512:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800551a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1da      	bne.n	80054e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800553e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800555a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e1      	bne.n	800552e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800557a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800558e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800559c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e4      	bne.n	80055b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fb ff95 	bl	800151c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005604:	b29b      	uxth	r3, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	b29b      	uxth	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f939 	bl	8005884 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005612:	e119      	b.n	8005848 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800561e:	429a      	cmp	r2, r3
 8005620:	f040 8112 	bne.w	8005848 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005630:	f040 810a 	bne.w	8005848 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f91e 	bl	8005884 <HAL_UARTEx_RxEventCallback>
      return;
 8005648:	e0fe      	b.n	8005848 <HAL_UART_IRQHandler+0x798>
 800564a:	bf00      	nop
 800564c:	40020010 	.word	0x40020010
 8005650:	40020028 	.word	0x40020028
 8005654:	40020040 	.word	0x40020040
 8005658:	40020058 	.word	0x40020058
 800565c:	40020070 	.word	0x40020070
 8005660:	40020088 	.word	0x40020088
 8005664:	400200a0 	.word	0x400200a0
 8005668:	400200b8 	.word	0x400200b8
 800566c:	40020410 	.word	0x40020410
 8005670:	40020428 	.word	0x40020428
 8005674:	40020440 	.word	0x40020440
 8005678:	40020458 	.word	0x40020458
 800567c:	40020470 	.word	0x40020470
 8005680:	40020488 	.word	0x40020488
 8005684:	400204a0 	.word	0x400204a0
 8005688:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005698:	b29b      	uxth	r3, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80cf 	beq.w	800584c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80056ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80ca 	beq.w	800584c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056da:	647b      	str	r3, [r7, #68]	@ 0x44
 80056dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e4      	bne.n	80056b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	623b      	str	r3, [r7, #32]
   return(result);
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	4b55      	ldr	r3, [pc, #340]	@ (8005858 <HAL_UART_IRQHandler+0x7a8>)
 8005702:	4013      	ands	r3, r2
 8005704:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005712:	633a      	str	r2, [r7, #48]	@ 0x30
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e3      	bne.n	80056ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60fb      	str	r3, [r7, #12]
   return(result);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	617b      	str	r3, [r7, #20]
   return(result);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e4      	bne.n	800573a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005776:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f881 	bl	8005884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005782:	e063      	b.n	800584c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <HAL_UART_IRQHandler+0x6fe>
 8005790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 f941 	bl	8006a2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ac:	e051      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d014      	beq.n	80057e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03a      	beq.n	8005850 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
    }
    return;
 80057e2:	e035      	b.n	8005850 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_UART_IRQHandler+0x754>
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 f8eb 	bl	80069d8 <UART_EndTransmit_IT>
    return;
 8005802:	e026      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_UART_IRQHandler+0x774>
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005814:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 f91a 	bl	8006a56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005822:	e016      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <HAL_UART_IRQHandler+0x7a2>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	2b00      	cmp	r3, #0
 8005836:	da0c      	bge.n	8005852 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 f902 	bl	8006a42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800583e:	e008      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005840:	bf00      	nop
 8005842:	e006      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005844:	bf00      	nop
 8005846:	e004      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005848:	bf00      	nop
 800584a:	e002      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
      return;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005850:	bf00      	nop
  }
}
 8005852:	37e8      	adds	r7, #232	@ 0xe8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	effffffe 	.word	0xeffffffe

0800585c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a0:	b092      	sub	sp, #72	@ 0x48
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4bbe      	ldr	r3, [pc, #760]	@ (8005bc4 <UART_SetConfig+0x328>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4ab3      	ldr	r2, [pc, #716]	@ (8005bc8 <UART_SetConfig+0x32c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005904:	4313      	orrs	r3, r2
 8005906:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	4baf      	ldr	r3, [pc, #700]	@ (8005bcc <UART_SetConfig+0x330>)
 8005910:	4013      	ands	r3, r2
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005918:	430b      	orrs	r3, r1
 800591a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	f023 010f 	bic.w	r1, r3, #15
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4aa6      	ldr	r2, [pc, #664]	@ (8005bd0 <UART_SetConfig+0x334>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d177      	bne.n	8005a2c <UART_SetConfig+0x190>
 800593c:	4ba5      	ldr	r3, [pc, #660]	@ (8005bd4 <UART_SetConfig+0x338>)
 800593e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005944:	2b28      	cmp	r3, #40	@ 0x28
 8005946:	d86d      	bhi.n	8005a24 <UART_SetConfig+0x188>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <UART_SetConfig+0xb4>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	080059f5 	.word	0x080059f5
 8005954:	08005a25 	.word	0x08005a25
 8005958:	08005a25 	.word	0x08005a25
 800595c:	08005a25 	.word	0x08005a25
 8005960:	08005a25 	.word	0x08005a25
 8005964:	08005a25 	.word	0x08005a25
 8005968:	08005a25 	.word	0x08005a25
 800596c:	08005a25 	.word	0x08005a25
 8005970:	080059fd 	.word	0x080059fd
 8005974:	08005a25 	.word	0x08005a25
 8005978:	08005a25 	.word	0x08005a25
 800597c:	08005a25 	.word	0x08005a25
 8005980:	08005a25 	.word	0x08005a25
 8005984:	08005a25 	.word	0x08005a25
 8005988:	08005a25 	.word	0x08005a25
 800598c:	08005a25 	.word	0x08005a25
 8005990:	08005a05 	.word	0x08005a05
 8005994:	08005a25 	.word	0x08005a25
 8005998:	08005a25 	.word	0x08005a25
 800599c:	08005a25 	.word	0x08005a25
 80059a0:	08005a25 	.word	0x08005a25
 80059a4:	08005a25 	.word	0x08005a25
 80059a8:	08005a25 	.word	0x08005a25
 80059ac:	08005a25 	.word	0x08005a25
 80059b0:	08005a0d 	.word	0x08005a0d
 80059b4:	08005a25 	.word	0x08005a25
 80059b8:	08005a25 	.word	0x08005a25
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	08005a25 	.word	0x08005a25
 80059c4:	08005a25 	.word	0x08005a25
 80059c8:	08005a25 	.word	0x08005a25
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a25 	.word	0x08005a25
 80059d8:	08005a25 	.word	0x08005a25
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a25 	.word	0x08005a25
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a25 	.word	0x08005a25
 80059ec:	08005a25 	.word	0x08005a25
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e326      	b.n	800604a <UART_SetConfig+0x7ae>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e322      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e31e      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e31a      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a14:	2320      	movs	r3, #32
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e316      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a1c:	2340      	movs	r3, #64	@ 0x40
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e312      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e30e      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a69      	ldr	r2, [pc, #420]	@ (8005bd8 <UART_SetConfig+0x33c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d130      	bne.n	8005a98 <UART_SetConfig+0x1fc>
 8005a36:	4b67      	ldr	r3, [pc, #412]	@ (8005bd4 <UART_SetConfig+0x338>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d826      	bhi.n	8005a90 <UART_SetConfig+0x1f4>
 8005a42:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <UART_SetConfig+0x1ac>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a71 	.word	0x08005a71
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e2f0      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e2ec      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e2e8      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e2e4      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a80:	2320      	movs	r3, #32
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e2e0      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a88:	2340      	movs	r3, #64	@ 0x40
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e2dc      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a90:	2380      	movs	r3, #128	@ 0x80
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e2d8      	b.n	800604a <UART_SetConfig+0x7ae>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8005bdc <UART_SetConfig+0x340>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d130      	bne.n	8005b04 <UART_SetConfig+0x268>
 8005aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8005bd4 <UART_SetConfig+0x338>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d826      	bhi.n	8005afc <UART_SetConfig+0x260>
 8005aae:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <UART_SetConfig+0x218>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e2ba      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e2b6      	b.n	800604a <UART_SetConfig+0x7ae>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e2b2      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e2ae      	b.n	800604a <UART_SetConfig+0x7ae>
 8005aec:	2320      	movs	r3, #32
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e2aa      	b.n	800604a <UART_SetConfig+0x7ae>
 8005af4:	2340      	movs	r3, #64	@ 0x40
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e2a6      	b.n	800604a <UART_SetConfig+0x7ae>
 8005afc:	2380      	movs	r3, #128	@ 0x80
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e2a2      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a35      	ldr	r2, [pc, #212]	@ (8005be0 <UART_SetConfig+0x344>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d130      	bne.n	8005b70 <UART_SetConfig+0x2d4>
 8005b0e:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <UART_SetConfig+0x338>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d826      	bhi.n	8005b68 <UART_SetConfig+0x2cc>
 8005b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <UART_SetConfig+0x284>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e284      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e280      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e27c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e278      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e274      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b60:	2340      	movs	r3, #64	@ 0x40
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e270      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e26c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1b      	ldr	r2, [pc, #108]	@ (8005be4 <UART_SetConfig+0x348>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d142      	bne.n	8005c00 <UART_SetConfig+0x364>
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <UART_SetConfig+0x338>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d838      	bhi.n	8005bf8 <UART_SetConfig+0x35c>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x2f0>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005bb5 	.word	0x08005bb5
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e24e      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e24a      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e246      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e242      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bc4:	cfff69f3 	.word	0xcfff69f3
 8005bc8:	58000c00 	.word	0x58000c00
 8005bcc:	11fff4ff 	.word	0x11fff4ff
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	40004400 	.word	0x40004400
 8005bdc:	40004800 	.word	0x40004800
 8005be0:	40004c00 	.word	0x40004c00
 8005be4:	40005000 	.word	0x40005000
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e22c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bf0:	2340      	movs	r3, #64	@ 0x40
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e228      	b.n	800604a <UART_SetConfig+0x7ae>
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e224      	b.n	800604a <UART_SetConfig+0x7ae>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4ab1      	ldr	r2, [pc, #708]	@ (8005ecc <UART_SetConfig+0x630>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d176      	bne.n	8005cf8 <UART_SetConfig+0x45c>
 8005c0a:	4bb1      	ldr	r3, [pc, #708]	@ (8005ed0 <UART_SetConfig+0x634>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c12:	2b28      	cmp	r3, #40	@ 0x28
 8005c14:	d86c      	bhi.n	8005cf0 <UART_SetConfig+0x454>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x380>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005cc1 	.word	0x08005cc1
 8005c20:	08005cf1 	.word	0x08005cf1
 8005c24:	08005cf1 	.word	0x08005cf1
 8005c28:	08005cf1 	.word	0x08005cf1
 8005c2c:	08005cf1 	.word	0x08005cf1
 8005c30:	08005cf1 	.word	0x08005cf1
 8005c34:	08005cf1 	.word	0x08005cf1
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cc9 	.word	0x08005cc9
 8005c40:	08005cf1 	.word	0x08005cf1
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cd1 	.word	0x08005cd1
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005cf1 	.word	0x08005cf1
 8005c74:	08005cf1 	.word	0x08005cf1
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005cf1 	.word	0x08005cf1
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e1c0      	b.n	800604a <UART_SetConfig+0x7ae>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e1bc      	b.n	800604a <UART_SetConfig+0x7ae>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e1b8      	b.n	800604a <UART_SetConfig+0x7ae>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e1b4      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e1b0      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ce8:	2340      	movs	r3, #64	@ 0x40
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e1ac      	b.n	800604a <UART_SetConfig+0x7ae>
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e1a8      	b.n	800604a <UART_SetConfig+0x7ae>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a75      	ldr	r2, [pc, #468]	@ (8005ed4 <UART_SetConfig+0x638>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d130      	bne.n	8005d64 <UART_SetConfig+0x4c8>
 8005d02:	4b73      	ldr	r3, [pc, #460]	@ (8005ed0 <UART_SetConfig+0x634>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d826      	bhi.n	8005d5c <UART_SetConfig+0x4c0>
 8005d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <UART_SetConfig+0x478>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e18a      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e186      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e182      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e17e      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e17a      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e176      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e172      	b.n	800604a <UART_SetConfig+0x7ae>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5b      	ldr	r2, [pc, #364]	@ (8005ed8 <UART_SetConfig+0x63c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d130      	bne.n	8005dd0 <UART_SetConfig+0x534>
 8005d6e:	4b58      	ldr	r3, [pc, #352]	@ (8005ed0 <UART_SetConfig+0x634>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d826      	bhi.n	8005dc8 <UART_SetConfig+0x52c>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x4e4>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e154      	b.n	800604a <UART_SetConfig+0x7ae>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e150      	b.n	800604a <UART_SetConfig+0x7ae>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e14c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e148      	b.n	800604a <UART_SetConfig+0x7ae>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e144      	b.n	800604a <UART_SetConfig+0x7ae>
 8005dc0:	2340      	movs	r3, #64	@ 0x40
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e140      	b.n	800604a <UART_SetConfig+0x7ae>
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e13c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a41      	ldr	r2, [pc, #260]	@ (8005edc <UART_SetConfig+0x640>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f040 8082 	bne.w	8005ee0 <UART_SetConfig+0x644>
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed0 <UART_SetConfig+0x634>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005de4:	2b28      	cmp	r3, #40	@ 0x28
 8005de6:	d86d      	bhi.n	8005ec4 <UART_SetConfig+0x628>
 8005de8:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <UART_SetConfig+0x554>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e95 	.word	0x08005e95
 8005df4:	08005ec5 	.word	0x08005ec5
 8005df8:	08005ec5 	.word	0x08005ec5
 8005dfc:	08005ec5 	.word	0x08005ec5
 8005e00:	08005ec5 	.word	0x08005ec5
 8005e04:	08005ec5 	.word	0x08005ec5
 8005e08:	08005ec5 	.word	0x08005ec5
 8005e0c:	08005ec5 	.word	0x08005ec5
 8005e10:	08005e9d 	.word	0x08005e9d
 8005e14:	08005ec5 	.word	0x08005ec5
 8005e18:	08005ec5 	.word	0x08005ec5
 8005e1c:	08005ec5 	.word	0x08005ec5
 8005e20:	08005ec5 	.word	0x08005ec5
 8005e24:	08005ec5 	.word	0x08005ec5
 8005e28:	08005ec5 	.word	0x08005ec5
 8005e2c:	08005ec5 	.word	0x08005ec5
 8005e30:	08005ea5 	.word	0x08005ea5
 8005e34:	08005ec5 	.word	0x08005ec5
 8005e38:	08005ec5 	.word	0x08005ec5
 8005e3c:	08005ec5 	.word	0x08005ec5
 8005e40:	08005ec5 	.word	0x08005ec5
 8005e44:	08005ec5 	.word	0x08005ec5
 8005e48:	08005ec5 	.word	0x08005ec5
 8005e4c:	08005ec5 	.word	0x08005ec5
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ec5 	.word	0x08005ec5
 8005e58:	08005ec5 	.word	0x08005ec5
 8005e5c:	08005ec5 	.word	0x08005ec5
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08005ec5 	.word	0x08005ec5
 8005e68:	08005ec5 	.word	0x08005ec5
 8005e6c:	08005ec5 	.word	0x08005ec5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005ec5 	.word	0x08005ec5
 8005e80:	08005ec5 	.word	0x08005ec5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ec5 	.word	0x08005ec5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e0d6      	b.n	800604a <UART_SetConfig+0x7ae>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e0d2      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e0ce      	b.n	800604a <UART_SetConfig+0x7ae>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e0ca      	b.n	800604a <UART_SetConfig+0x7ae>
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e0c6      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ebc:	2340      	movs	r3, #64	@ 0x40
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e0c2      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e0be      	b.n	800604a <UART_SetConfig+0x7ae>
 8005ecc:	40011400 	.word	0x40011400
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	40007800 	.word	0x40007800
 8005ed8:	40007c00 	.word	0x40007c00
 8005edc:	40011800 	.word	0x40011800
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4aad      	ldr	r2, [pc, #692]	@ (800619c <UART_SetConfig+0x900>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d176      	bne.n	8005fd8 <UART_SetConfig+0x73c>
 8005eea:	4bad      	ldr	r3, [pc, #692]	@ (80061a0 <UART_SetConfig+0x904>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ef2:	2b28      	cmp	r3, #40	@ 0x28
 8005ef4:	d86c      	bhi.n	8005fd0 <UART_SetConfig+0x734>
 8005ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8005efc <UART_SetConfig+0x660>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fd1 	.word	0x08005fd1
 8005f04:	08005fd1 	.word	0x08005fd1
 8005f08:	08005fd1 	.word	0x08005fd1
 8005f0c:	08005fd1 	.word	0x08005fd1
 8005f10:	08005fd1 	.word	0x08005fd1
 8005f14:	08005fd1 	.word	0x08005fd1
 8005f18:	08005fd1 	.word	0x08005fd1
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fd1 	.word	0x08005fd1
 8005f24:	08005fd1 	.word	0x08005fd1
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08005fd1 	.word	0x08005fd1
 8005f34:	08005fd1 	.word	0x08005fd1
 8005f38:	08005fd1 	.word	0x08005fd1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fd1 	.word	0x08005fd1
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005fd1 	.word	0x08005fd1
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005fd1 	.word	0x08005fd1
 8005f54:	08005fd1 	.word	0x08005fd1
 8005f58:	08005fd1 	.word	0x08005fd1
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fd1 	.word	0x08005fd1
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005fd1 	.word	0x08005fd1
 8005f70:	08005fd1 	.word	0x08005fd1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e050      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e04c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e048      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e044      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e040      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fc8:	2340      	movs	r3, #64	@ 0x40
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e03c      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fd0:	2380      	movs	r3, #128	@ 0x80
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e038      	b.n	800604a <UART_SetConfig+0x7ae>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a71      	ldr	r2, [pc, #452]	@ (80061a4 <UART_SetConfig+0x908>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x7a8>
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80061a0 <UART_SetConfig+0x904>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x7a0>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x758>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2302      	movs	r3, #2
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e01a      	b.n	800604a <UART_SetConfig+0x7ae>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e016      	b.n	800604a <UART_SetConfig+0x7ae>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e012      	b.n	800604a <UART_SetConfig+0x7ae>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e00e      	b.n	800604a <UART_SetConfig+0x7ae>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e00a      	b.n	800604a <UART_SetConfig+0x7ae>
 8006034:	2340      	movs	r3, #64	@ 0x40
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e006      	b.n	800604a <UART_SetConfig+0x7ae>
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e002      	b.n	800604a <UART_SetConfig+0x7ae>
 8006044:	2380      	movs	r3, #128	@ 0x80
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a55      	ldr	r2, [pc, #340]	@ (80061a4 <UART_SetConfig+0x908>)
 8006050:	4293      	cmp	r3, r2
 8006052:	f040 80f8 	bne.w	8006246 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006056:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800605a:	2b20      	cmp	r3, #32
 800605c:	dc46      	bgt.n	80060ec <UART_SetConfig+0x850>
 800605e:	2b02      	cmp	r3, #2
 8006060:	db75      	blt.n	800614e <UART_SetConfig+0x8b2>
 8006062:	3b02      	subs	r3, #2
 8006064:	2b1e      	cmp	r3, #30
 8006066:	d872      	bhi.n	800614e <UART_SetConfig+0x8b2>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <UART_SetConfig+0x7d4>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	080060f3 	.word	0x080060f3
 8006074:	0800614f 	.word	0x0800614f
 8006078:	080060fb 	.word	0x080060fb
 800607c:	0800614f 	.word	0x0800614f
 8006080:	0800614f 	.word	0x0800614f
 8006084:	0800614f 	.word	0x0800614f
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800614f 	.word	0x0800614f
 8006090:	0800614f 	.word	0x0800614f
 8006094:	0800614f 	.word	0x0800614f
 8006098:	0800614f 	.word	0x0800614f
 800609c:	0800614f 	.word	0x0800614f
 80060a0:	0800614f 	.word	0x0800614f
 80060a4:	0800614f 	.word	0x0800614f
 80060a8:	0800611b 	.word	0x0800611b
 80060ac:	0800614f 	.word	0x0800614f
 80060b0:	0800614f 	.word	0x0800614f
 80060b4:	0800614f 	.word	0x0800614f
 80060b8:	0800614f 	.word	0x0800614f
 80060bc:	0800614f 	.word	0x0800614f
 80060c0:	0800614f 	.word	0x0800614f
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	0800614f 	.word	0x0800614f
 80060cc:	0800614f 	.word	0x0800614f
 80060d0:	0800614f 	.word	0x0800614f
 80060d4:	0800614f 	.word	0x0800614f
 80060d8:	0800614f 	.word	0x0800614f
 80060dc:	0800614f 	.word	0x0800614f
 80060e0:	0800614f 	.word	0x0800614f
 80060e4:	0800614f 	.word	0x0800614f
 80060e8:	08006141 	.word	0x08006141
 80060ec:	2b40      	cmp	r3, #64	@ 0x40
 80060ee:	d02a      	beq.n	8006146 <UART_SetConfig+0x8aa>
 80060f0:	e02d      	b.n	800614e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060f2:	f7fe fadd 	bl	80046b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80060f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060f8:	e02f      	b.n	800615a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe faec 	bl	80046dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006108:	e027      	b.n	800615a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fc38 	bl	8004984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006118:	e01f      	b.n	800615a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800611a:	4b21      	ldr	r3, [pc, #132]	@ (80061a0 <UART_SetConfig+0x904>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006126:	4b1e      	ldr	r3, [pc, #120]	@ (80061a0 <UART_SetConfig+0x904>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	08db      	lsrs	r3, r3, #3
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <UART_SetConfig+0x90c>)
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006138:	e00f      	b.n	800615a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800613a:	4b1b      	ldr	r3, [pc, #108]	@ (80061a8 <UART_SetConfig+0x90c>)
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613e:	e00c      	b.n	800615a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006140:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <UART_SetConfig+0x910>)
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800615a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 81ee 	beq.w	800653e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	4a12      	ldr	r2, [pc, #72]	@ (80061b0 <UART_SetConfig+0x914>)
 8006168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616c:	461a      	mov	r2, r3
 800616e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006170:	fbb3 f3f2 	udiv	r3, r3, r2
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006182:	429a      	cmp	r2, r3
 8006184:	d305      	bcc.n	8006192 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800618c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800618e:	429a      	cmp	r2, r3
 8006190:	d910      	bls.n	80061b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006198:	e1d1      	b.n	800653e <UART_SetConfig+0xca2>
 800619a:	bf00      	nop
 800619c:	40011c00 	.word	0x40011c00
 80061a0:	58024400 	.word	0x58024400
 80061a4:	58000c00 	.word	0x58000c00
 80061a8:	03d09000 	.word	0x03d09000
 80061ac:	003d0900 	.word	0x003d0900
 80061b0:	08006cfc 	.word	0x08006cfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b6:	2200      	movs	r2, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	60fa      	str	r2, [r7, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	4ac0      	ldr	r2, [pc, #768]	@ (80064c4 <UART_SetConfig+0xc28>)
 80061c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2200      	movs	r2, #0
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061d6:	f7fa f899 	bl	800030c <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	020b      	lsls	r3, r1, #8
 80061ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061f0:	0202      	lsls	r2, r0, #8
 80061f2:	6979      	ldr	r1, [r7, #20]
 80061f4:	6849      	ldr	r1, [r1, #4]
 80061f6:	0849      	lsrs	r1, r1, #1
 80061f8:	2000      	movs	r0, #0
 80061fa:	460c      	mov	r4, r1
 80061fc:	4605      	mov	r5, r0
 80061fe:	eb12 0804 	adds.w	r8, r2, r4
 8006202:	eb43 0905 	adc.w	r9, r3, r5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	469a      	mov	sl, r3
 800620e:	4693      	mov	fp, r2
 8006210:	4652      	mov	r2, sl
 8006212:	465b      	mov	r3, fp
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	f7fa f878 	bl	800030c <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800622a:	d308      	bcc.n	800623e <UART_SetConfig+0x9a2>
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006232:	d204      	bcs.n	800623e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	e17f      	b.n	800653e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006244:	e17b      	b.n	800653e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624e:	f040 80bd 	bne.w	80063cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006252:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006256:	2b20      	cmp	r3, #32
 8006258:	dc48      	bgt.n	80062ec <UART_SetConfig+0xa50>
 800625a:	2b00      	cmp	r3, #0
 800625c:	db7b      	blt.n	8006356 <UART_SetConfig+0xaba>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d879      	bhi.n	8006356 <UART_SetConfig+0xaba>
 8006262:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <UART_SetConfig+0x9cc>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	080062f3 	.word	0x080062f3
 800626c:	080062fb 	.word	0x080062fb
 8006270:	08006357 	.word	0x08006357
 8006274:	08006357 	.word	0x08006357
 8006278:	08006303 	.word	0x08006303
 800627c:	08006357 	.word	0x08006357
 8006280:	08006357 	.word	0x08006357
 8006284:	08006357 	.word	0x08006357
 8006288:	08006313 	.word	0x08006313
 800628c:	08006357 	.word	0x08006357
 8006290:	08006357 	.word	0x08006357
 8006294:	08006357 	.word	0x08006357
 8006298:	08006357 	.word	0x08006357
 800629c:	08006357 	.word	0x08006357
 80062a0:	08006357 	.word	0x08006357
 80062a4:	08006357 	.word	0x08006357
 80062a8:	08006323 	.word	0x08006323
 80062ac:	08006357 	.word	0x08006357
 80062b0:	08006357 	.word	0x08006357
 80062b4:	08006357 	.word	0x08006357
 80062b8:	08006357 	.word	0x08006357
 80062bc:	08006357 	.word	0x08006357
 80062c0:	08006357 	.word	0x08006357
 80062c4:	08006357 	.word	0x08006357
 80062c8:	08006357 	.word	0x08006357
 80062cc:	08006357 	.word	0x08006357
 80062d0:	08006357 	.word	0x08006357
 80062d4:	08006357 	.word	0x08006357
 80062d8:	08006357 	.word	0x08006357
 80062dc:	08006357 	.word	0x08006357
 80062e0:	08006357 	.word	0x08006357
 80062e4:	08006357 	.word	0x08006357
 80062e8:	08006349 	.word	0x08006349
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d02e      	beq.n	800634e <UART_SetConfig+0xab2>
 80062f0:	e031      	b.n	8006356 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f2:	f7fd f811 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80062f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062f8:	e033      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fa:	f7fd f823 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 80062fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006300:	e02f      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe f9e8 	bl	80046dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e027      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006312:	f107 0318 	add.w	r3, r7, #24
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fb34 	bl	8004984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006320:	e01f      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006322:	4b69      	ldr	r3, [pc, #420]	@ (80064c8 <UART_SetConfig+0xc2c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800632e:	4b66      	ldr	r3, [pc, #408]	@ (80064c8 <UART_SetConfig+0xc2c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	08db      	lsrs	r3, r3, #3
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	4a64      	ldr	r2, [pc, #400]	@ (80064cc <UART_SetConfig+0xc30>)
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006340:	e00f      	b.n	8006362 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006342:	4b62      	ldr	r3, [pc, #392]	@ (80064cc <UART_SetConfig+0xc30>)
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006346:	e00c      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006348:	4b61      	ldr	r3, [pc, #388]	@ (80064d0 <UART_SetConfig+0xc34>)
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634c:	e009      	b.n	8006362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006354:	e005      	b.n	8006362 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80ea 	beq.w	800653e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	4a55      	ldr	r2, [pc, #340]	@ (80064c4 <UART_SetConfig+0xc28>)
 8006370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006374:	461a      	mov	r2, r3
 8006376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006378:	fbb3 f3f2 	udiv	r3, r3, r2
 800637c:	005a      	lsls	r2, r3, #1
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	441a      	add	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d916      	bls.n	80063c4 <UART_SetConfig+0xb28>
 8006396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800639c:	d212      	bcs.n	80063c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f023 030f 	bic.w	r3, r3, #15
 80063a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063b6:	4313      	orrs	r3, r2
 80063b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e0bc      	b.n	800653e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063ca:	e0b8      	b.n	800653e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	dc4b      	bgt.n	800646c <UART_SetConfig+0xbd0>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f2c0 8087 	blt.w	80064e8 <UART_SetConfig+0xc4c>
 80063da:	2b20      	cmp	r3, #32
 80063dc:	f200 8084 	bhi.w	80064e8 <UART_SetConfig+0xc4c>
 80063e0:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <UART_SetConfig+0xb4c>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	08006473 	.word	0x08006473
 80063ec:	0800647b 	.word	0x0800647b
 80063f0:	080064e9 	.word	0x080064e9
 80063f4:	080064e9 	.word	0x080064e9
 80063f8:	08006483 	.word	0x08006483
 80063fc:	080064e9 	.word	0x080064e9
 8006400:	080064e9 	.word	0x080064e9
 8006404:	080064e9 	.word	0x080064e9
 8006408:	08006493 	.word	0x08006493
 800640c:	080064e9 	.word	0x080064e9
 8006410:	080064e9 	.word	0x080064e9
 8006414:	080064e9 	.word	0x080064e9
 8006418:	080064e9 	.word	0x080064e9
 800641c:	080064e9 	.word	0x080064e9
 8006420:	080064e9 	.word	0x080064e9
 8006424:	080064e9 	.word	0x080064e9
 8006428:	080064a3 	.word	0x080064a3
 800642c:	080064e9 	.word	0x080064e9
 8006430:	080064e9 	.word	0x080064e9
 8006434:	080064e9 	.word	0x080064e9
 8006438:	080064e9 	.word	0x080064e9
 800643c:	080064e9 	.word	0x080064e9
 8006440:	080064e9 	.word	0x080064e9
 8006444:	080064e9 	.word	0x080064e9
 8006448:	080064e9 	.word	0x080064e9
 800644c:	080064e9 	.word	0x080064e9
 8006450:	080064e9 	.word	0x080064e9
 8006454:	080064e9 	.word	0x080064e9
 8006458:	080064e9 	.word	0x080064e9
 800645c:	080064e9 	.word	0x080064e9
 8006460:	080064e9 	.word	0x080064e9
 8006464:	080064e9 	.word	0x080064e9
 8006468:	080064db 	.word	0x080064db
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	d037      	beq.n	80064e0 <UART_SetConfig+0xc44>
 8006470:	e03a      	b.n	80064e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006472:	f7fc ff51 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8006476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006478:	e03c      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800647a:	f7fc ff63 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 800647e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006480:	e038      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe f928 	bl	80046dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006490:	e030      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006492:	f107 0318 	add.w	r3, r7, #24
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fa74 	bl	8004984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a0:	e028      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a2:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <UART_SetConfig+0xc2c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d012      	beq.n	80064d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ae:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <UART_SetConfig+0xc2c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <UART_SetConfig+0xc30>)
 80064ba:	fa22 f303 	lsr.w	r3, r2, r3
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064c0:	e018      	b.n	80064f4 <UART_SetConfig+0xc58>
 80064c2:	bf00      	nop
 80064c4:	08006cfc 	.word	0x08006cfc
 80064c8:	58024400 	.word	0x58024400
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80064d4:	4b24      	ldr	r3, [pc, #144]	@ (8006568 <UART_SetConfig+0xccc>)
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d8:	e00c      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064da:	4b24      	ldr	r3, [pc, #144]	@ (800656c <UART_SetConfig+0xcd0>)
 80064dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064de:	e009      	b.n	80064f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e6:	e005      	b.n	80064f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064f2:	bf00      	nop
    }

    if (pclk != 0U)
 80064f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d021      	beq.n	800653e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <UART_SetConfig+0xcd4>)
 8006500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006504:	461a      	mov	r2, r3
 8006506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006508:	fbb3 f2f2 	udiv	r2, r3, r2
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	441a      	add	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	2b0f      	cmp	r3, #15
 8006522:	d909      	bls.n	8006538 <UART_SetConfig+0xc9c>
 8006524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652a:	d205      	bcs.n	8006538 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	b29a      	uxth	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e002      	b.n	800653e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2201      	movs	r2, #1
 8006542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2201      	movs	r2, #1
 800654a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2200      	movs	r2, #0
 8006552:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800655a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800655e:	4618      	mov	r0, r3
 8006560:	3748      	adds	r7, #72	@ 0x48
 8006562:	46bd      	mov	sp, r7
 8006564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006568:	03d09000 	.word	0x03d09000
 800656c:	003d0900 	.word	0x003d0900
 8006570:	08006cfc 	.word	0x08006cfc

08006574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01a      	beq.n	800668a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006672:	d10a      	bne.n	800668a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b098      	sub	sp, #96	@ 0x60
 80066bc:	af02      	add	r7, sp, #8
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c8:	f7fa fd70 	bl	80011ac <HAL_GetTick>
 80066cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d12f      	bne.n	800673c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f88e 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d022      	beq.n	800673c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670a:	653b      	str	r3, [r7, #80]	@ 0x50
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006714:	647b      	str	r3, [r7, #68]	@ 0x44
 8006716:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800671a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e6      	bne.n	80066f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e063      	b.n	8006804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d149      	bne.n	80067de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006752:	2200      	movs	r2, #0
 8006754:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f857 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d03c      	beq.n	80067de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	623b      	str	r3, [r7, #32]
   return(result);
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006782:	633b      	str	r3, [r7, #48]	@ 0x30
 8006784:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e6      	bne.n	8006764 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b6:	61fa      	str	r2, [r7, #28]
 80067b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	69b9      	ldr	r1, [r7, #24]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	617b      	str	r3, [r7, #20]
   return(result);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e5      	bne.n	8006796 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e012      	b.n	8006804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3758      	adds	r7, #88	@ 0x58
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681c:	e04f      	b.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d04b      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fa fcc1 	bl	80011ac <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <UART_WaitOnFlagUntilTimeout+0x30>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e04e      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d037      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b80      	cmp	r3, #128	@ 0x80
 8006852:	d034      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b40      	cmp	r3, #64	@ 0x40
 8006858:	d031      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d110      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2208      	movs	r2, #8
 800686e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f839 	bl	80068e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2208      	movs	r2, #8
 800687a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e029      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006898:	d111      	bne.n	80068be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f81f 	bl	80068e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e00f      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4013      	ands	r3, r2
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	bf0c      	ite	eq
 80068ce:	2301      	moveq	r3, #1
 80068d0:	2300      	movne	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d0a0      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b095      	sub	sp, #84	@ 0x54
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006910:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	61fb      	str	r3, [r7, #28]
   return(result);
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	4b1e      	ldr	r3, [pc, #120]	@ (80069b0 <UART_EndRxTransfer+0xc8>)
 8006936:	4013      	ands	r3, r2
 8006938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d118      	bne.n	8006990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	60bb      	str	r3, [r7, #8]
   return(result);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f023 0310 	bic.w	r3, r3, #16
 8006972:	647b      	str	r3, [r7, #68]	@ 0x44
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6979      	ldr	r1, [r7, #20]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	613b      	str	r3, [r7, #16]
   return(result);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069a4:	bf00      	nop
 80069a6:	3754      	adds	r7, #84	@ 0x54
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	effffffe 	.word	0xeffffffe

080069b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7fe ff50 	bl	8005870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d0:	bf00      	nop
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6979      	ldr	r1, [r7, #20]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7fe ff1b 	bl	800585c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a26:	bf00      	nop
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e027      	b.n	8006ad0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2224      	movs	r2, #36	@ 0x24
 8006a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006aae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e02d      	b.n	8006b50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2224      	movs	r2, #36	@ 0x24
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f84f 	bl	8006bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e02d      	b.n	8006bcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2224      	movs	r2, #36	@ 0x24
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f811 	bl	8006bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bf4:	e031      	b.n	8006c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bfa:	2310      	movs	r3, #16
 8006bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	0e5b      	lsrs	r3, r3, #25
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	0f5b      	lsrs	r3, r3, #29
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	7b3a      	ldrb	r2, [r7, #12]
 8006c22:	4911      	ldr	r1, [pc, #68]	@ (8006c68 <UARTEx_SetNbDataToProcess+0x94>)
 8006c24:	5c8a      	ldrb	r2, [r1, r2]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c2a:	7b3a      	ldrb	r2, [r7, #12]
 8006c2c:	490f      	ldr	r1, [pc, #60]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x98>)
 8006c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	7b7a      	ldrb	r2, [r7, #13]
 8006c40:	4909      	ldr	r1, [pc, #36]	@ (8006c68 <UARTEx_SetNbDataToProcess+0x94>)
 8006c42:	5c8a      	ldrb	r2, [r1, r2]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c48:	7b7a      	ldrb	r2, [r7, #13]
 8006c4a:	4908      	ldr	r1, [pc, #32]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x98>)
 8006c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	08006d14 	.word	0x08006d14
 8006c6c:	08006d1c 	.word	0x08006d1c

08006c70 <memset>:
 8006c70:	4402      	add	r2, r0
 8006c72:	4603      	mov	r3, r0
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <memset+0xa>
 8006c78:	4770      	bx	lr
 8006c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7e:	e7f9      	b.n	8006c74 <memset+0x4>

08006c80 <__libc_init_array>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	4d0d      	ldr	r5, [pc, #52]	@ (8006cb8 <__libc_init_array+0x38>)
 8006c84:	4c0d      	ldr	r4, [pc, #52]	@ (8006cbc <__libc_init_array+0x3c>)
 8006c86:	1b64      	subs	r4, r4, r5
 8006c88:	10a4      	asrs	r4, r4, #2
 8006c8a:	2600      	movs	r6, #0
 8006c8c:	42a6      	cmp	r6, r4
 8006c8e:	d109      	bne.n	8006ca4 <__libc_init_array+0x24>
 8006c90:	4d0b      	ldr	r5, [pc, #44]	@ (8006cc0 <__libc_init_array+0x40>)
 8006c92:	4c0c      	ldr	r4, [pc, #48]	@ (8006cc4 <__libc_init_array+0x44>)
 8006c94:	f000 f818 	bl	8006cc8 <_init>
 8006c98:	1b64      	subs	r4, r4, r5
 8006c9a:	10a4      	asrs	r4, r4, #2
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	42a6      	cmp	r6, r4
 8006ca0:	d105      	bne.n	8006cae <__libc_init_array+0x2e>
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca8:	4798      	blx	r3
 8006caa:	3601      	adds	r6, #1
 8006cac:	e7ee      	b.n	8006c8c <__libc_init_array+0xc>
 8006cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb2:	4798      	blx	r3
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	e7f2      	b.n	8006c9e <__libc_init_array+0x1e>
 8006cb8:	08006d2c 	.word	0x08006d2c
 8006cbc:	08006d2c 	.word	0x08006d2c
 8006cc0:	08006d2c 	.word	0x08006d2c
 8006cc4:	08006d30 	.word	0x08006d30

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
