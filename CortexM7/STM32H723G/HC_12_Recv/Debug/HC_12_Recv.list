
HC_12_Recv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c20  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009ef0  08009ef0  0000aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  08009ff4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  24000084  0800a078  0000b084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f8  0800a078  0000b2f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000153bb  00000000  00000000  0000b0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c4f  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec8  00000000  00000000  000230c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b58  00000000  00000000  00023f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033b6f  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016673  00000000  00000000  0005864f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147c79  00000000  00000000  0006ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b693b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004508  00000000  00000000  001b6980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001bae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000084 	.word	0x24000084
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009ed8 	.word	0x08009ed8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000088 	.word	0x24000088
 800030c:	08009ed8 	.word	0x08009ed8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_write>:
static void MX_USART3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&husart3, (uint8_t*)ptr, len, HAL_MAX_DELAY); // USART3 사용
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <_write+0x28>)
 80006c8:	f004 fd92 	bl	80051f0 <HAL_UART_Transmit>
    return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	24000134 	.word	0x24000134

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e2:	f000 fa27 	bl	8000b34 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006e6:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <main+0x12c>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11b      	bne.n	800072a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006f2:	f3bf 8f4f 	dsb	sy
}
 80006f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f8:	f3bf 8f6f 	isb	sy
}
 80006fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006fe:	4b42      	ldr	r3, [pc, #264]	@ (8000808 <main+0x12c>)
 8000700:	2200      	movs	r2, #0
 8000702:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
}
 800070a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070c:	f3bf 8f6f 	isb	sy
}
 8000710:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000712:	4b3d      	ldr	r3, [pc, #244]	@ (8000808 <main+0x12c>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a3c      	ldr	r2, [pc, #240]	@ (8000808 <main+0x12c>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	e000      	b.n	800072c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800072a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800072c:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <main+0x12c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d138      	bne.n	80007aa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000738:	4b33      	ldr	r3, [pc, #204]	@ (8000808 <main+0x12c>)
 800073a:	2200      	movs	r2, #0
 800073c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <main+0x12c>)
 8000748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800074c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0b5b      	lsrs	r3, r3, #13
 8000752:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000756:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000760:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	015a      	lsls	r2, r3, #5
 8000766:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800076a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000770:	4925      	ldr	r1, [pc, #148]	@ (8000808 <main+0x12c>)
 8000772:	4313      	orrs	r3, r2
 8000774:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1ef      	bne.n	8000762 <main+0x86>
    } while(sets-- != 0U);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	60ba      	str	r2, [r7, #8]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1e5      	bne.n	8000758 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
}
 8000790:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <main+0x12c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <main+0x12c>)
 8000798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800079c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
}
 80007a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a4:	f3bf 8f6f 	isb	sy
}
 80007a8:	e000      	b.n	80007ac <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007aa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fdca 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f838 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f93e 	bl	8000a34 <MX_GPIO_Init>
  MX_UART7_Init();
 80007b8:	f000 f8a4 	bl	8000904 <MX_UART7_Init>
  MX_USART3_Init();
 80007bc:	f000 f8ee 	bl	800099c <MX_USART3_Init>
  /* USER CODE BEGIN 2 */
  printf(" UART7 Initialized!\r\n");
 80007c0:	4812      	ldr	r0, [pc, #72]	@ (800080c <main+0x130>)
 80007c2:	f008 fc91 	bl	80090e8 <puts>

  if (HAL_UART_Init(&husart3) == HAL_OK)
 80007c6:	4812      	ldr	r0, [pc, #72]	@ (8000810 <main+0x134>)
 80007c8:	f004 fcc2 	bl	8005150 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <main+0xfe>
  {
      printf("USART3 Initialized successfully!\r\n");
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <main+0x138>)
 80007d4:	f008 fc88 	bl	80090e8 <puts>
 80007d8:	e002      	b.n	80007e0 <main+0x104>
  }
  else
  {
      printf("USART3 Initialization FAILED!\r\n");
 80007da:	480f      	ldr	r0, [pc, #60]	@ (8000818 <main+0x13c>)
 80007dc:	f008 fc84 	bl	80090e8 <puts>
  }

  //HAL_Delay(1000)
  HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(received_count));
 80007e0:	2204      	movs	r2, #4
 80007e2:	490e      	ldr	r1, [pc, #56]	@ (800081c <main+0x140>)
 80007e4:	480e      	ldr	r0, [pc, #56]	@ (8000820 <main+0x144>)
 80007e6:	f004 fd91 	bl	800530c <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart7, (uint8_t*)rxBuffer, sizeof(rxBuffer) - 1);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 fc9e 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 fc9b 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 fc98 	bl	800112c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fd0a 	bl	8001218 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <main+0x128>
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	08009ef0 	.word	0x08009ef0
 8000810:	24000134 	.word	0x24000134
 8000814:	08009f08 	.word	0x08009f08
 8000818:	08009f2c 	.word	0x08009f2c
 800081c:	24000198 	.word	0x24000198
 8000820:	240000a0 	.word	0x240000a0

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	@ 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	224c      	movs	r2, #76	@ 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f008 fd58 	bl	80092e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f008 fd52 	bl	80092e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000844:	2002      	movs	r0, #2
 8000846:	f001 ff21 	bl	800268c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <SystemClock_Config+0xdc>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000856:	4a2a      	ldr	r2, [pc, #168]	@ (8000900 <SystemClock_Config+0xdc>)
 8000858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemClock_Config+0xdc>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <SystemClock_Config+0xdc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087a:	2302      	movs	r3, #2
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800087e:	2301      	movs	r3, #1
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088a:	2300      	movs	r3, #0
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088e:	2304      	movs	r3, #4
 8000890:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000892:	230c      	movs	r3, #12
 8000894:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089a:	2304      	movs	r3, #4
 800089c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a2:	230c      	movs	r3, #12
 80008a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ff24 	bl	8002700 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008be:	f000 f965 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	233f      	movs	r3, #63	@ 0x3f
 80008c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2303      	movs	r3, #3
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ce:	2308      	movs	r3, #8
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e0:	2340      	movs	r3, #64	@ 0x40
 80008e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fae3 	bl	8002eb4 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f4:	f000 f94a 	bl	8000b8c <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	@ 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024800 	.word	0x58024800

08000904 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <MX_UART7_Init+0x90>)
 800090a:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <MX_UART7_Init+0x94>)
 800090c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800090e:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <MX_UART7_Init+0x90>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_UART7_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_UART7_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_UART7_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_UART7_Init+0x90>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_UART7_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_UART7_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_UART7_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_UART7_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_UART7_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800094c:	4811      	ldr	r0, [pc, #68]	@ (8000994 <MX_UART7_Init+0x90>)
 800094e:	f004 fbff 	bl	8005150 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f918 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_UART7_Init+0x90>)
 8000960:	f007 f879 	bl	8007a56 <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f90f 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <MX_UART7_Init+0x90>)
 8000972:	f007 f8ae 	bl	8007ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f906 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_UART7_Init+0x90>)
 8000982:	f007 f82f 	bl	80079e4 <HAL_UARTEx_DisableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f8fe 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	240000a0 	.word	0x240000a0
 8000998:	40007800 	.word	0x40007800

0800099c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009a2:	4a23      	ldr	r2, [pc, #140]	@ (8000a30 <MX_USART3_Init+0x94>)
 80009a4:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80009e4:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009e6:	f007 f901 	bl	8007bec <HAL_USART_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80009f0:	f000 f8cc 	bl	8000b8c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_USART3_Init+0x90>)
 80009f8:	f008 f997 	bl	8008d2a <HAL_USARTEx_SetTxFifoThreshold>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000a02:	f000 f8c3 	bl	8000b8c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <MX_USART3_Init+0x90>)
 8000a0a:	f008 f9cc 	bl	8008da6 <HAL_USARTEx_SetRxFifoThreshold>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f8ba 	bl	8000b8c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_USART3_Init+0x90>)
 8000a1a:	f008 f94d 	bl	8008cb8 <HAL_USARTEx_DisableFifoMode>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8000a24:	f000 f8b2 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	24000134 	.word	0x24000134
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART7)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <HAL_UART_RxCpltCallback+0x58>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11e      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x50>
	{
		memcpy(&received_count, rx_buffer, sizeof(received_count));
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_UART_RxCpltCallback+0x5c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000adc:	6013      	str	r3, [r2, #0]

		char msg[32];
		sprintf(msg, "Received: %lu\r\n", received_count);
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4910      	ldr	r1, [pc, #64]	@ (8000b28 <HAL_UART_RxCpltCallback+0x64>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f008 fb05 	bl	80090f8 <siprintf>
		HAL_UART_Transmit(&husart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fc0c 	bl	8000310 <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f107 0108 	add.w	r1, r7, #8
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <HAL_UART_RxCpltCallback+0x68>)
 8000b06:	f004 fb73 	bl	80051f0 <HAL_UART_Transmit>

		HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(received_count));
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4904      	ldr	r1, [pc, #16]	@ (8000b20 <HAL_UART_RxCpltCallback+0x5c>)
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <HAL_UART_RxCpltCallback+0x6c>)
 8000b10:	f004 fbfc 	bl	800530c <HAL_UART_Receive_IT>
//    if (huart->Instance == UART7)  // UART7에서 인터럽트 발생한 경우
//    {
//        printf("RF Received: %s\r\n", rxBuffer);
//        HAL_UART_Receive_IT(&huart7, (uint8_t*)rxBuffer, sizeof(rxBuffer) - 1);
//    }
}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40007800 	.word	0x40007800
 8000b20:	24000198 	.word	0x24000198
 8000b24:	24000194 	.word	0x24000194
 8000b28:	08009f4c 	.word	0x08009f4c
 8000b2c:	24000134 	.word	0x24000134
 8000b30:	240000a0 	.word	0x240000a0

08000b34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b46:	f000 fd9f 	bl	8001688 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b56:	231f      	movs	r3, #31
 8000b58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b5a:	2387      	movs	r3, #135	@ 0x87
 8000b5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b76:	463b      	mov	r3, r7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fdbd 	bl	80016f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f000 fd9a 	bl	80016b8 <HAL_MPU_Enable>

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ba4:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <HAL_MspInit+0x30>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_MspInit+0x30>)
 8000bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	58024400 	.word	0x58024400

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0b8      	sub	sp, #224	@ 0xe0
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	22b8      	movs	r2, #184	@ 0xb8
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fb7b 	bl	80092e8 <memset>
  if(huart->Instance==UART7)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca0 <HAL_UART_MspInit+0xd4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d14d      	bne.n	8000c98 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000bfc:	f04f 0202 	mov.w	r2, #2
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fcda 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c1e:	f7ff ffb5 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c28:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_UART_MspInit+0xd8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c5e:	2318      	movs	r3, #24
 8000c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000c76:	230b      	movs	r3, #11
 8000c78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c80:	4619      	mov	r1, r3
 8000c82:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <HAL_UART_MspInit+0xdc>)
 8000c84:	f001 fb40 	bl	8002308 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2052      	movs	r0, #82	@ 0x52
 8000c8e:	f000 fcc6 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000c92:	2052      	movs	r0, #82	@ 0x52
 8000c94:	f000 fcdd 	bl	8001652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART7_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	37e0      	adds	r7, #224	@ 0xe0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40007800 	.word	0x40007800
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	58020400 	.word	0x58020400

08000cac <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ba      	sub	sp, #232	@ 0xe8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	22b8      	movs	r2, #184	@ 0xb8
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f008 fb0b 	bl	80092e8 <memset>
  if(husart->Instance==USART3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dcc <HAL_USART_MspInit+0x120>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d173      	bne.n	8000dc4 <HAL_USART_MspInit+0x118>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cdc:	f04f 0202 	mov.w	r2, #2
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fc6a 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8000cfe:	f7ff ff45 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d02:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d08:	4a31      	ldr	r2, [pc, #196]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_USART_MspInit+0x124>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d76:	2307      	movs	r3, #7
 8000d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <HAL_USART_MspInit+0x128>)
 8000d84:	f001 fac0 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d88:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da2:	2307      	movs	r3, #7
 8000da4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dac:	4619      	mov	r1, r3
 8000dae:	480a      	ldr	r0, [pc, #40]	@ (8000dd8 <HAL_USART_MspInit+0x12c>)
 8000db0:	f001 faaa 	bl	8002308 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2027      	movs	r0, #39	@ 0x27
 8000dba:	f000 fc30 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dbe:	2027      	movs	r0, #39	@ 0x27
 8000dc0:	f000 fc47 	bl	8001652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dc4:	bf00      	nop
 8000dc6:	37e8      	adds	r7, #232	@ 0xe8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58020c00 	.word	0x58020c00

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 faf9 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	f006 ff1d 	bl	8007c80 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000134 	.word	0x24000134

08000e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 fa51 	bl	80012fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <UART7_IRQHandler+0x10>)
 8000e66:	f004 fa9d 	bl	80053a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	240000a0 	.word	0x240000a0

08000e74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
  }

  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f008 fa1c 	bl	8009384 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24050000 	.word	0x24050000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	2400019c 	.word	0x2400019c
 8000f80:	240002f8 	.word	0x240002f8

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <SystemInit+0x100>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <SystemInit+0x100>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f98:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <SystemInit+0x104>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d807      	bhi.n	8000fb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa4:	4b38      	ldr	r3, [pc, #224]	@ (8001088 <SystemInit+0x104>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 030f 	bic.w	r3, r3, #15
 8000fac:	4a36      	ldr	r2, [pc, #216]	@ (8001088 <SystemInit+0x104>)
 8000fae:	f043 0307 	orr.w	r3, r3, #7
 8000fb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <SystemInit+0x108>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a34      	ldr	r2, [pc, #208]	@ (800108c <SystemInit+0x108>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <SystemInit+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <SystemInit+0x108>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4930      	ldr	r1, [pc, #192]	@ (800108c <SystemInit+0x108>)
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <SystemInit+0x10c>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <SystemInit+0x104>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <SystemInit+0x104>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 030f 	bic.w	r3, r3, #15
 8000fe6:	4a28      	ldr	r2, [pc, #160]	@ (8001088 <SystemInit+0x104>)
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <SystemInit+0x108>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <SystemInit+0x108>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <SystemInit+0x108>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <SystemInit+0x108>)
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <SystemInit+0x110>)
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <SystemInit+0x108>)
 8001008:	4a23      	ldr	r2, [pc, #140]	@ (8001098 <SystemInit+0x114>)
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <SystemInit+0x108>)
 800100e:	4a23      	ldr	r2, [pc, #140]	@ (800109c <SystemInit+0x118>)
 8001010:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <SystemInit+0x108>)
 8001014:	2200      	movs	r2, #0
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <SystemInit+0x108>)
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <SystemInit+0x118>)
 800101c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <SystemInit+0x108>)
 8001020:	2200      	movs	r2, #0
 8001022:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <SystemInit+0x108>)
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <SystemInit+0x118>)
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <SystemInit+0x108>)
 800102c:	2200      	movs	r2, #0
 800102e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <SystemInit+0x108>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a15      	ldr	r2, [pc, #84]	@ (800108c <SystemInit+0x108>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <SystemInit+0x108>)
 800103e:	2200      	movs	r2, #0
 8001040:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <SystemInit+0x108>)
 8001044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d113      	bne.n	8001078 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <SystemInit+0x108>)
 8001052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001056:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <SystemInit+0x108>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800105c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <SystemInit+0x11c>)
 8001062:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001066:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <SystemInit+0x108>)
 800106a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800106e:	4a07      	ldr	r2, [pc, #28]	@ (800108c <SystemInit+0x108>)
 8001070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001074:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	52002000 	.word	0x52002000
 800108c:	58024400 	.word	0x58024400
 8001090:	eaf6ed7f 	.word	0xeaf6ed7f
 8001094:	02020200 	.word	0x02020200
 8001098:	01ff0000 	.word	0x01ff0000
 800109c:	01010280 	.word	0x01010280
 80010a0:	52004000 	.word	0x52004000

080010a4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <ExitRun0Mode+0x2c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <ExitRun0Mode+0x2c>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80010b4:	bf00      	nop
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <ExitRun0Mode+0x2c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f9      	beq.n	80010b6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	58024800 	.word	0x58024800

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010d8:	f7ff ffe4 	bl	80010a4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff ff52 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f008 f943 	bl	8009390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fae7 	bl	80006dc <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 800111c:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8001120:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8001124:	240002f8 	.word	0x240002f8

08001128 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC3_IRQHandler>
	...

0800112c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d009      	beq.n	8001154 <BSP_LED_Init+0x28>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d006      	beq.n	8001154 <BSP_LED_Init+0x28>
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d003      	beq.n	8001154 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800114c:	f06f 0301 	mvn.w	r3, #1
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001152:	e055      	b.n	8001200 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800115a:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <BSP_LED_Init+0xe0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <BSP_LED_Init+0xe0>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <BSP_LED_Init+0xe0>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	e021      	b.n	80011be <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10f      	bne.n	80011a0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <BSP_LED_Init+0xe0>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a21      	ldr	r2, [pc, #132]	@ (800120c <BSP_LED_Init+0xe0>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <BSP_LED_Init+0xe0>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	e00e      	b.n	80011be <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <BSP_LED_Init+0xe0>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <BSP_LED_Init+0xe0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <BSP_LED_Init+0xe0>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <BSP_LED_Init+0xe4>)
 80011c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <BSP_LED_Init+0xe8>)
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	f107 0218 	add.w	r2, r7, #24
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f890 	bl	8002308 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <BSP_LED_Init+0xe8>)
 80011ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <BSP_LED_Init+0xe4>)
 80011f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f001 fa2c 	bl	8002658 <HAL_GPIO_WritePin>
  }

  return ret;
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001202:	4618      	mov	r0, r3
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
 8001210:	08009f6c 	.word	0x08009f6c
 8001214:	24000008 	.word	0x24000008

08001218 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <BSP_PB_Init+0xcc>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <BSP_PB_Init+0xcc>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001238:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <BSP_PB_Init+0xcc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800124c:	2302      	movs	r3, #2
 800124e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <BSP_PB_Init+0xd0>)
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f001 f84b 	bl	8002308 <HAL_GPIO_Init>
 8001272:	e031      	b.n	80012d8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001278:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a1a      	ldr	r2, [pc, #104]	@ (80012e8 <BSP_PB_Init+0xd0>)
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f001 f83d 	bl	8002308 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <BSP_PB_Init+0xd4>)
 8001294:	441a      	add	r2, r3
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4915      	ldr	r1, [pc, #84]	@ (80012f0 <BSP_PB_Init+0xd8>)
 800129a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f000 ffec 	bl	800227e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <BSP_PB_Init+0xd4>)
 80012ac:	1898      	adds	r0, r3, r2
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <BSP_PB_Init+0xdc>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f000 ffc1 	bl	8002240 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80012be:	2028      	movs	r0, #40	@ 0x28
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <BSP_PB_Init+0xe0>)
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	f000 f9a7 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80012d0:	2328      	movs	r3, #40	@ 0x28
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f9bd 	bl	8001652 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024400 	.word	0x58024400
 80012e8:	24000014 	.word	0x24000014
 80012ec:	240001a0 	.word	0x240001a0
 80012f0:	08009f74 	.word	0x08009f74
 80012f4:	24000018 	.word	0x24000018
 80012f8:	2400001c 	.word	0x2400001c

080012fc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <BSP_PB_IRQHandler+0x20>)
 800130c:	4413      	add	r3, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 ffca 	bl	80022a8 <HAL_EXTI_IRQHandler>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	240001a0 	.word	0x240001a0

08001320 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fff0 	bl	8001320 <BSP_PB_Callback>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f95c 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001350:	f001 ff66 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	4913      	ldr	r1, [pc, #76]	@ (80013b0 <HAL_Init+0x6c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_Init+0x6c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_Init+0x70>)
 8001386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_Init+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f814 	bl	80013bc <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e002      	b.n	80013a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fbfb 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	08009f5c 	.word	0x08009f5c
 80013b4:	24000004 	.word	0x24000004
 80013b8:	24000000 	.word	0x24000000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_InitTick+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e021      	b.n	8001414 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_InitTick+0x64>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f941 	bl	800166e <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f90b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x68>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	24000024 	.word	0x24000024
 8001420:	24000000 	.word	0x24000000
 8001424:	24000020 	.word	0x24000020

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	24000024 	.word	0x24000024
 800144c:	240001a8 	.word	0x240001a8

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	240001a8 	.word	0x240001a8

08001468 <__NVIC_SetPriorityGrouping>:
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x40>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	4313      	orrs	r3, r2
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	05fa0000 	.word	0x05fa0000

080014b0 <__NVIC_GetPriorityGrouping>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff40 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff33 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa4 	bl	80015c4 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800168c:	f3bf 8f5f 	dmb	sy
}
 8001690:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <HAL_MPU_Disable+0x28>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <HAL_MPU_Disable+0x28>)
 8001698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_MPU_Disable+0x2c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	e000ed90 	.word	0xe000ed90

080016b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_MPU_Enable+0x38>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_MPU_Enable+0x3c>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <HAL_MPU_Enable+0x3c>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016dc:	f3bf 8f6f 	isb	sy
}
 80016e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed90 	.word	0xe000ed90
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	785a      	ldrb	r2, [r3, #1]
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_MPU_ConfigRegion+0x7c>)
 8001706:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_MPU_ConfigRegion+0x7c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <HAL_MPU_ConfigRegion+0x7c>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001714:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_MPU_ConfigRegion+0x7c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7adb      	ldrb	r3, [r3, #11]
 8001726:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7a9b      	ldrb	r3, [r3, #10]
 800172e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7b5b      	ldrb	r3, [r3, #13]
 8001736:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7b9b      	ldrb	r3, [r3, #14]
 800173e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7bdb      	ldrb	r3, [r3, #15]
 8001746:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7a5b      	ldrb	r3, [r3, #9]
 800174e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7a1b      	ldrb	r3, [r3, #8]
 8001756:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001758:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001760:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001762:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001764:	6113      	str	r3, [r2, #16]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed90 	.word	0xe000ed90

08001778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fe66 	bl	8001450 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2dc      	b.n	8001d4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e2cd      	b.n	8001d4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a76      	ldr	r2, [pc, #472]	@ (800198c <HAL_DMA_Abort+0x214>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04a      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a74      	ldr	r2, [pc, #464]	@ (8001990 <HAL_DMA_Abort+0x218>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d045      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a73      	ldr	r2, [pc, #460]	@ (8001994 <HAL_DMA_Abort+0x21c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d040      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a71      	ldr	r2, [pc, #452]	@ (8001998 <HAL_DMA_Abort+0x220>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d03b      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a70      	ldr	r2, [pc, #448]	@ (800199c <HAL_DMA_Abort+0x224>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d036      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a6e      	ldr	r2, [pc, #440]	@ (80019a0 <HAL_DMA_Abort+0x228>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d031      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6d      	ldr	r2, [pc, #436]	@ (80019a4 <HAL_DMA_Abort+0x22c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d02c      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6b      	ldr	r2, [pc, #428]	@ (80019a8 <HAL_DMA_Abort+0x230>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d027      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6a      	ldr	r2, [pc, #424]	@ (80019ac <HAL_DMA_Abort+0x234>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a68      	ldr	r2, [pc, #416]	@ (80019b0 <HAL_DMA_Abort+0x238>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01d      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a67      	ldr	r2, [pc, #412]	@ (80019b4 <HAL_DMA_Abort+0x23c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d018      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a65      	ldr	r2, [pc, #404]	@ (80019b8 <HAL_DMA_Abort+0x240>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a64      	ldr	r2, [pc, #400]	@ (80019bc <HAL_DMA_Abort+0x244>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00e      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a62      	ldr	r2, [pc, #392]	@ (80019c0 <HAL_DMA_Abort+0x248>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d009      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a61      	ldr	r2, [pc, #388]	@ (80019c4 <HAL_DMA_Abort+0x24c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d004      	beq.n	800184e <HAL_DMA_Abort+0xd6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a5f      	ldr	r2, [pc, #380]	@ (80019c8 <HAL_DMA_Abort+0x250>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_DMA_Abort+0xda>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_DMA_Abort+0xdc>
 8001852:	2300      	movs	r3, #0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 021e 	bic.w	r2, r2, #30
 8001866:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001876:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00a      	b.n	8001896 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3c      	ldr	r2, [pc, #240]	@ (800198c <HAL_DMA_Abort+0x214>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d072      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001990 <HAL_DMA_Abort+0x218>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d06d      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a39      	ldr	r2, [pc, #228]	@ (8001994 <HAL_DMA_Abort+0x21c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d068      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <HAL_DMA_Abort+0x220>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d063      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a36      	ldr	r2, [pc, #216]	@ (800199c <HAL_DMA_Abort+0x224>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <HAL_DMA_Abort+0x228>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d059      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a33      	ldr	r2, [pc, #204]	@ (80019a4 <HAL_DMA_Abort+0x22c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d054      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a31      	ldr	r2, [pc, #196]	@ (80019a8 <HAL_DMA_Abort+0x230>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d04f      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a30      	ldr	r2, [pc, #192]	@ (80019ac <HAL_DMA_Abort+0x234>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d04a      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2e      	ldr	r2, [pc, #184]	@ (80019b0 <HAL_DMA_Abort+0x238>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d045      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <HAL_DMA_Abort+0x23c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d040      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2b      	ldr	r2, [pc, #172]	@ (80019b8 <HAL_DMA_Abort+0x240>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d03b      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_DMA_Abort+0x244>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d036      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <HAL_DMA_Abort+0x248>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d031      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <HAL_DMA_Abort+0x24c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d02c      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a25      	ldr	r2, [pc, #148]	@ (80019c8 <HAL_DMA_Abort+0x250>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d027      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a24      	ldr	r2, [pc, #144]	@ (80019cc <HAL_DMA_Abort+0x254>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d022      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <HAL_DMA_Abort+0x258>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01d      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_DMA_Abort+0x25c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d018      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1f      	ldr	r2, [pc, #124]	@ (80019d8 <HAL_DMA_Abort+0x260>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_DMA_Abort+0x264>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00e      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <HAL_DMA_Abort+0x268>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d009      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <HAL_DMA_Abort+0x26c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d004      	beq.n	8001986 <HAL_DMA_Abort+0x20e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	@ (80019e8 <HAL_DMA_Abort+0x270>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d132      	bne.n	80019ec <HAL_DMA_Abort+0x274>
 8001986:	2301      	movs	r3, #1
 8001988:	e031      	b.n	80019ee <HAL_DMA_Abort+0x276>
 800198a:	bf00      	nop
 800198c:	40020010 	.word	0x40020010
 8001990:	40020028 	.word	0x40020028
 8001994:	40020040 	.word	0x40020040
 8001998:	40020058 	.word	0x40020058
 800199c:	40020070 	.word	0x40020070
 80019a0:	40020088 	.word	0x40020088
 80019a4:	400200a0 	.word	0x400200a0
 80019a8:	400200b8 	.word	0x400200b8
 80019ac:	40020410 	.word	0x40020410
 80019b0:	40020428 	.word	0x40020428
 80019b4:	40020440 	.word	0x40020440
 80019b8:	40020458 	.word	0x40020458
 80019bc:	40020470 	.word	0x40020470
 80019c0:	40020488 	.word	0x40020488
 80019c4:	400204a0 	.word	0x400204a0
 80019c8:	400204b8 	.word	0x400204b8
 80019cc:	58025408 	.word	0x58025408
 80019d0:	5802541c 	.word	0x5802541c
 80019d4:	58025430 	.word	0x58025430
 80019d8:	58025444 	.word	0x58025444
 80019dc:	58025458 	.word	0x58025458
 80019e0:	5802546c 	.word	0x5802546c
 80019e4:	58025480 	.word	0x58025480
 80019e8:	58025494 	.word	0x58025494
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6d      	ldr	r2, [pc, #436]	@ (8001bbc <HAL_DMA_Abort+0x444>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d04a      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6b      	ldr	r2, [pc, #428]	@ (8001bc0 <HAL_DMA_Abort+0x448>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d045      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001bc4 <HAL_DMA_Abort+0x44c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d040      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a68      	ldr	r2, [pc, #416]	@ (8001bc8 <HAL_DMA_Abort+0x450>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d03b      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a67      	ldr	r2, [pc, #412]	@ (8001bcc <HAL_DMA_Abort+0x454>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d036      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a65      	ldr	r2, [pc, #404]	@ (8001bd0 <HAL_DMA_Abort+0x458>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d031      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a64      	ldr	r2, [pc, #400]	@ (8001bd4 <HAL_DMA_Abort+0x45c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d02c      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a62      	ldr	r2, [pc, #392]	@ (8001bd8 <HAL_DMA_Abort+0x460>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d027      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a61      	ldr	r2, [pc, #388]	@ (8001bdc <HAL_DMA_Abort+0x464>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5f      	ldr	r2, [pc, #380]	@ (8001be0 <HAL_DMA_Abort+0x468>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01d      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001be4 <HAL_DMA_Abort+0x46c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a5c      	ldr	r2, [pc, #368]	@ (8001be8 <HAL_DMA_Abort+0x470>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bec <HAL_DMA_Abort+0x474>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a59      	ldr	r2, [pc, #356]	@ (8001bf0 <HAL_DMA_Abort+0x478>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a58      	ldr	r2, [pc, #352]	@ (8001bf4 <HAL_DMA_Abort+0x47c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Abort+0x32a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a56      	ldr	r2, [pc, #344]	@ (8001bf8 <HAL_DMA_Abort+0x480>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d108      	bne.n	8001ab4 <HAL_DMA_Abort+0x33c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e007      	b.n	8001ac4 <HAL_DMA_Abort+0x34c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ac4:	e013      	b.n	8001aee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac6:	f7ff fcc3 	bl	8001450 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d90c      	bls.n	8001aee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e12d      	b.n	8001d4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e5      	bne.n	8001ac6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <HAL_DMA_Abort+0x444>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04a      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <HAL_DMA_Abort+0x448>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d045      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2c      	ldr	r2, [pc, #176]	@ (8001bc4 <HAL_DMA_Abort+0x44c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d040      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc8 <HAL_DMA_Abort+0x450>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d03b      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a29      	ldr	r2, [pc, #164]	@ (8001bcc <HAL_DMA_Abort+0x454>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d036      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_DMA_Abort+0x458>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d031      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a26      	ldr	r2, [pc, #152]	@ (8001bd4 <HAL_DMA_Abort+0x45c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d02c      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <HAL_DMA_Abort+0x460>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d027      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_DMA_Abort+0x464>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <HAL_DMA_Abort+0x468>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01d      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_DMA_Abort+0x46c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d018      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_DMA_Abort+0x470>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_DMA_Abort+0x474>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_DMA_Abort+0x478>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf4 <HAL_DMA_Abort+0x47c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_DMA_Abort+0x422>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <HAL_DMA_Abort+0x480>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA_Abort+0x426>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_Abort+0x428>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d02b      	beq.n	8001bfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	223f      	movs	r2, #63	@ 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	e02a      	b.n	8001c12 <HAL_DMA_Abort+0x49a>
 8001bbc:	40020010 	.word	0x40020010
 8001bc0:	40020028 	.word	0x40020028
 8001bc4:	40020040 	.word	0x40020040
 8001bc8:	40020058 	.word	0x40020058
 8001bcc:	40020070 	.word	0x40020070
 8001bd0:	40020088 	.word	0x40020088
 8001bd4:	400200a0 	.word	0x400200a0
 8001bd8:	400200b8 	.word	0x400200b8
 8001bdc:	40020410 	.word	0x40020410
 8001be0:	40020428 	.word	0x40020428
 8001be4:	40020440 	.word	0x40020440
 8001be8:	40020458 	.word	0x40020458
 8001bec:	40020470 	.word	0x40020470
 8001bf0:	40020488 	.word	0x40020488
 8001bf4:	400204a0 	.word	0x400204a0
 8001bf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a4f      	ldr	r2, [pc, #316]	@ (8001d54 <HAL_DMA_Abort+0x5dc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d072      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	@ (8001d58 <HAL_DMA_Abort+0x5e0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d06d      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d5c <HAL_DMA_Abort+0x5e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d068      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_DMA_Abort+0x5e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d063      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <HAL_DMA_Abort+0x5ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d05e      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a47      	ldr	r2, [pc, #284]	@ (8001d68 <HAL_DMA_Abort+0x5f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d059      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a46      	ldr	r2, [pc, #280]	@ (8001d6c <HAL_DMA_Abort+0x5f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d054      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a44      	ldr	r2, [pc, #272]	@ (8001d70 <HAL_DMA_Abort+0x5f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04f      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a43      	ldr	r2, [pc, #268]	@ (8001d74 <HAL_DMA_Abort+0x5fc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04a      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a41      	ldr	r2, [pc, #260]	@ (8001d78 <HAL_DMA_Abort+0x600>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d045      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <HAL_DMA_Abort+0x604>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3e      	ldr	r2, [pc, #248]	@ (8001d80 <HAL_DMA_Abort+0x608>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d03b      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d84 <HAL_DMA_Abort+0x60c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d036      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_DMA_Abort+0x610>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <HAL_DMA_Abort+0x614>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d02c      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a38      	ldr	r2, [pc, #224]	@ (8001d90 <HAL_DMA_Abort+0x618>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a37      	ldr	r2, [pc, #220]	@ (8001d94 <HAL_DMA_Abort+0x61c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_DMA_Abort+0x620>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a34      	ldr	r2, [pc, #208]	@ (8001d9c <HAL_DMA_Abort+0x624>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a32      	ldr	r2, [pc, #200]	@ (8001da0 <HAL_DMA_Abort+0x628>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <HAL_DMA_Abort+0x62c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <HAL_DMA_Abort+0x630>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <HAL_DMA_Abort+0x634>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Abort+0x58a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <HAL_DMA_Abort+0x638>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Abort+0x58e>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_DMA_Abort+0x590>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020010 	.word	0x40020010
 8001d58:	40020028 	.word	0x40020028
 8001d5c:	40020040 	.word	0x40020040
 8001d60:	40020058 	.word	0x40020058
 8001d64:	40020070 	.word	0x40020070
 8001d68:	40020088 	.word	0x40020088
 8001d6c:	400200a0 	.word	0x400200a0
 8001d70:	400200b8 	.word	0x400200b8
 8001d74:	40020410 	.word	0x40020410
 8001d78:	40020428 	.word	0x40020428
 8001d7c:	40020440 	.word	0x40020440
 8001d80:	40020458 	.word	0x40020458
 8001d84:	40020470 	.word	0x40020470
 8001d88:	40020488 	.word	0x40020488
 8001d8c:	400204a0 	.word	0x400204a0
 8001d90:	400204b8 	.word	0x400204b8
 8001d94:	58025408 	.word	0x58025408
 8001d98:	5802541c 	.word	0x5802541c
 8001d9c:	58025430 	.word	0x58025430
 8001da0:	58025444 	.word	0x58025444
 8001da4:	58025458 	.word	0x58025458
 8001da8:	5802546c 	.word	0x5802546c
 8001dac:	58025480 	.word	0x58025480
 8001db0:	58025494 	.word	0x58025494

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e237      	b.n	8002236 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d004      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e22c      	b.n	8002236 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5c      	ldr	r2, [pc, #368]	@ (8001f54 <HAL_DMA_Abort_IT+0x1a0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5b      	ldr	r2, [pc, #364]	@ (8001f58 <HAL_DMA_Abort_IT+0x1a4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <HAL_DMA_Abort_IT+0x1a8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_DMA_Abort_IT+0x1ac>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_DMA_Abort_IT+0x1b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a55      	ldr	r2, [pc, #340]	@ (8001f68 <HAL_DMA_Abort_IT+0x1b4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a53      	ldr	r2, [pc, #332]	@ (8001f6c <HAL_DMA_Abort_IT+0x1b8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <HAL_DMA_Abort_IT+0x1bc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_DMA_Abort_IT+0x1c0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <HAL_DMA_Abort_IT+0x1c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	@ (8001f7c <HAL_DMA_Abort_IT+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f80 <HAL_DMA_Abort_IT+0x1cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_DMA_Abort_IT+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a49      	ldr	r2, [pc, #292]	@ (8001f88 <HAL_DMA_Abort_IT+0x1d4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a47      	ldr	r2, [pc, #284]	@ (8001f8c <HAL_DMA_Abort_IT+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a46      	ldr	r2, [pc, #280]	@ (8001f90 <HAL_DMA_Abort_IT+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Abort_IT+0xcc>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_DMA_Abort_IT+0xce>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8086 	beq.w	8001f94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <HAL_DMA_Abort_IT+0x1a0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d04a      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_DMA_Abort_IT+0x1a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d045      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <HAL_DMA_Abort_IT+0x1a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d040      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f60 <HAL_DMA_Abort_IT+0x1ac>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d03b      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	@ (8001f64 <HAL_DMA_Abort_IT+0x1b0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d036      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <HAL_DMA_Abort_IT+0x1b4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d031      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_DMA_Abort_IT+0x1b8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02c      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a25      	ldr	r2, [pc, #148]	@ (8001f70 <HAL_DMA_Abort_IT+0x1bc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d027      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <HAL_DMA_Abort_IT+0x1c0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a22      	ldr	r2, [pc, #136]	@ (8001f78 <HAL_DMA_Abort_IT+0x1c4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01d      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	@ (8001f7c <HAL_DMA_Abort_IT+0x1c8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <HAL_DMA_Abort_IT+0x1cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_DMA_Abort_IT+0x1d0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_DMA_Abort_IT+0x1d4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_DMA_Abort_IT+0x1d8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x17c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_DMA_Abort_IT+0x1dc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <HAL_DMA_Abort_IT+0x18e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e178      	b.n	8002234 <HAL_DMA_Abort_IT+0x480>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e16f      	b.n	8002234 <HAL_DMA_Abort_IT+0x480>
 8001f54:	40020010 	.word	0x40020010
 8001f58:	40020028 	.word	0x40020028
 8001f5c:	40020040 	.word	0x40020040
 8001f60:	40020058 	.word	0x40020058
 8001f64:	40020070 	.word	0x40020070
 8001f68:	40020088 	.word	0x40020088
 8001f6c:	400200a0 	.word	0x400200a0
 8001f70:	400200b8 	.word	0x400200b8
 8001f74:	40020410 	.word	0x40020410
 8001f78:	40020428 	.word	0x40020428
 8001f7c:	40020440 	.word	0x40020440
 8001f80:	40020458 	.word	0x40020458
 8001f84:	40020470 	.word	0x40020470
 8001f88:	40020488 	.word	0x40020488
 8001f8c:	400204a0 	.word	0x400204a0
 8001f90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020e 	bic.w	r2, r2, #14
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6c      	ldr	r2, [pc, #432]	@ (800215c <HAL_DMA_Abort_IT+0x3a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d04a      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8002160 <HAL_DMA_Abort_IT+0x3ac>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d045      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_DMA_Abort_IT+0x3b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d040      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a68      	ldr	r2, [pc, #416]	@ (8002168 <HAL_DMA_Abort_IT+0x3b4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d03b      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a66      	ldr	r2, [pc, #408]	@ (800216c <HAL_DMA_Abort_IT+0x3b8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d036      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a65      	ldr	r2, [pc, #404]	@ (8002170 <HAL_DMA_Abort_IT+0x3bc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d031      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a63      	ldr	r2, [pc, #396]	@ (8002174 <HAL_DMA_Abort_IT+0x3c0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02c      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a62      	ldr	r2, [pc, #392]	@ (8002178 <HAL_DMA_Abort_IT+0x3c4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d027      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a60      	ldr	r2, [pc, #384]	@ (800217c <HAL_DMA_Abort_IT+0x3c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d022      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5f      	ldr	r2, [pc, #380]	@ (8002180 <HAL_DMA_Abort_IT+0x3cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d01d      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5d      	ldr	r2, [pc, #372]	@ (8002184 <HAL_DMA_Abort_IT+0x3d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d018      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5c      	ldr	r2, [pc, #368]	@ (8002188 <HAL_DMA_Abort_IT+0x3d4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5a      	ldr	r2, [pc, #360]	@ (800218c <HAL_DMA_Abort_IT+0x3d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a59      	ldr	r2, [pc, #356]	@ (8002190 <HAL_DMA_Abort_IT+0x3dc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_DMA_Abort_IT+0x3e0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_DMA_Abort_IT+0x290>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_DMA_Abort_IT+0x3e4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <HAL_DMA_Abort_IT+0x2a2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <HAL_DMA_Abort_IT+0x2b2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a3c      	ldr	r2, [pc, #240]	@ (800215c <HAL_DMA_Abort_IT+0x3a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d072      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3a      	ldr	r2, [pc, #232]	@ (8002160 <HAL_DMA_Abort_IT+0x3ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d06d      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a39      	ldr	r2, [pc, #228]	@ (8002164 <HAL_DMA_Abort_IT+0x3b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d068      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <HAL_DMA_Abort_IT+0x3b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d063      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a36      	ldr	r2, [pc, #216]	@ (800216c <HAL_DMA_Abort_IT+0x3b8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d05e      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a34      	ldr	r2, [pc, #208]	@ (8002170 <HAL_DMA_Abort_IT+0x3bc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d059      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a33      	ldr	r2, [pc, #204]	@ (8002174 <HAL_DMA_Abort_IT+0x3c0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d054      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a31      	ldr	r2, [pc, #196]	@ (8002178 <HAL_DMA_Abort_IT+0x3c4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04f      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a30      	ldr	r2, [pc, #192]	@ (800217c <HAL_DMA_Abort_IT+0x3c8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d04a      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002180 <HAL_DMA_Abort_IT+0x3cc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d045      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002184 <HAL_DMA_Abort_IT+0x3d0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d040      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002188 <HAL_DMA_Abort_IT+0x3d4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d03b      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <HAL_DMA_Abort_IT+0x3d8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d036      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a28      	ldr	r2, [pc, #160]	@ (8002190 <HAL_DMA_Abort_IT+0x3dc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d031      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_DMA_Abort_IT+0x3e0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d02c      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <HAL_DMA_Abort_IT+0x3e4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d027      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_DMA_Abort_IT+0x3e8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <HAL_DMA_Abort_IT+0x3ec>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01d      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <HAL_DMA_Abort_IT+0x3f0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d018      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1f      	ldr	r2, [pc, #124]	@ (80021a8 <HAL_DMA_Abort_IT+0x3f4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_DMA_Abort_IT+0x3f8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00e      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_DMA_Abort_IT+0x3fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <HAL_DMA_Abort_IT+0x400>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_DMA_Abort_IT+0x3a2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_DMA_Abort_IT+0x404>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d132      	bne.n	80021bc <HAL_DMA_Abort_IT+0x408>
 8002156:	2301      	movs	r3, #1
 8002158:	e031      	b.n	80021be <HAL_DMA_Abort_IT+0x40a>
 800215a:	bf00      	nop
 800215c:	40020010 	.word	0x40020010
 8002160:	40020028 	.word	0x40020028
 8002164:	40020040 	.word	0x40020040
 8002168:	40020058 	.word	0x40020058
 800216c:	40020070 	.word	0x40020070
 8002170:	40020088 	.word	0x40020088
 8002174:	400200a0 	.word	0x400200a0
 8002178:	400200b8 	.word	0x400200b8
 800217c:	40020410 	.word	0x40020410
 8002180:	40020428 	.word	0x40020428
 8002184:	40020440 	.word	0x40020440
 8002188:	40020458 	.word	0x40020458
 800218c:	40020470 	.word	0x40020470
 8002190:	40020488 	.word	0x40020488
 8002194:	400204a0 	.word	0x400204a0
 8002198:	400204b8 	.word	0x400204b8
 800219c:	58025408 	.word	0x58025408
 80021a0:	5802541c 	.word	0x5802541c
 80021a4:	58025430 	.word	0x58025430
 80021a8:	58025444 	.word	0x58025444
 80021ac:	58025458 	.word	0x58025458
 80021b0:	5802546c 	.word	0x5802546c
 80021b4:	58025480 	.word	0x58025480
 80021b8:	58025494 	.word	0x58025494
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002208:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002212:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	460b      	mov	r3, r1
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e00a      	b.n	8002272 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800225c:	7afb      	ldrb	r3, [r7, #11]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]
      break;
 8002268:	e002      	b.n	8002270 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
      break;
 800226e:	bf00      	nop
  }

  return status;
 8002270:	7dfb      	ldrb	r3, [r7, #23]
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e003      	b.n	800229a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2201      	movs	r2, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	011a      	lsls	r2, r3, #4
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_EXTI_IRQHandler+0x5c>)
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4798      	blx	r3
    }
  }
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	58000088 	.word	0x58000088

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002316:	4b86      	ldr	r3, [pc, #536]	@ (8002530 <HAL_GPIO_Init+0x228>)
 8002318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800231a:	e18c      	b.n	8002636 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 817e 	beq.w	8002630 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d005      	beq.n	800234c <HAL_GPIO_Init+0x44>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d130      	bne.n	80023ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002382:	2201      	movs	r2, #1
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0201 	and.w	r2, r3, #1
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d017      	beq.n	80023ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d123      	bne.n	800243e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	69b9      	ldr	r1, [r7, #24]
 800243a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80d8 	beq.w	8002630 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b2c      	ldr	r3, [pc, #176]	@ (8002534 <HAL_GPIO_Init+0x22c>)
 8002482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002486:	4a2b      	ldr	r2, [pc, #172]	@ (8002534 <HAL_GPIO_Init+0x22c>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_GPIO_Init+0x22c>)
 8002492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249e:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <HAL_GPIO_Init+0x230>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x234>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04a      	beq.n	8002560 <HAL_GPIO_Init+0x258>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <HAL_GPIO_Init+0x238>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x222>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002544 <HAL_GPIO_Init+0x23c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x21e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002548 <HAL_GPIO_Init+0x240>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x21a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a19      	ldr	r2, [pc, #100]	@ (800254c <HAL_GPIO_Init+0x244>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x216>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <HAL_GPIO_Init+0x248>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x212>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <HAL_GPIO_Init+0x24c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x20e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a16      	ldr	r2, [pc, #88]	@ (8002558 <HAL_GPIO_Init+0x250>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x20a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a15      	ldr	r2, [pc, #84]	@ (800255c <HAL_GPIO_Init+0x254>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x206>
 800250a:	2309      	movs	r3, #9
 800250c:	e029      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 800250e:	230a      	movs	r3, #10
 8002510:	e027      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 8002512:	2307      	movs	r3, #7
 8002514:	e025      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 8002516:	2306      	movs	r3, #6
 8002518:	e023      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 800251a:	2305      	movs	r3, #5
 800251c:	e021      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 800251e:	2304      	movs	r3, #4
 8002520:	e01f      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 8002522:	2303      	movs	r3, #3
 8002524:	e01d      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 8002526:	2302      	movs	r3, #2
 8002528:	e01b      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 800252a:	2301      	movs	r3, #1
 800252c:	e019      	b.n	8002562 <HAL_GPIO_Init+0x25a>
 800252e:	bf00      	nop
 8002530:	58000080 	.word	0x58000080
 8002534:	58024400 	.word	0x58024400
 8002538:	58000400 	.word	0x58000400
 800253c:	58020000 	.word	0x58020000
 8002540:	58020400 	.word	0x58020400
 8002544:	58020800 	.word	0x58020800
 8002548:	58020c00 	.word	0x58020c00
 800254c:	58021000 	.word	0x58021000
 8002550:	58021400 	.word	0x58021400
 8002554:	58021800 	.word	0x58021800
 8002558:	58021c00 	.word	0x58021c00
 800255c:	58022400 	.word	0x58022400
 8002560:	2300      	movs	r3, #0
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f002 0203 	and.w	r2, r2, #3
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4093      	lsls	r3, r2
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002572:	4938      	ldr	r1, [pc, #224]	@ (8002654 <HAL_GPIO_Init+0x34c>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3301      	adds	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	f47f ae6b 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	3724      	adds	r7, #36	@ 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	58000400 	.word	0x58000400

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00a      	beq.n	80026b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01f      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e01d      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	490f      	ldr	r1, [pc, #60]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026c6:	f7fe fec3 	bl	8001450 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026cc:	e009      	b.n	80026e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ce:	f7fe febf 	bl	8001450 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026dc:	d901      	bls.n	80026e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e007      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ee:	d1ee      	bne.n	80026ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	58024800 	.word	0x58024800

08002700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e3c8      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8087 	beq.w	800282e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002720:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800272a:	4b86      	ldr	r3, [pc, #536]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	2b10      	cmp	r3, #16
 8002734:	d007      	beq.n	8002746 <HAL_RCC_OscConfig+0x46>
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	2b18      	cmp	r3, #24
 800273a:	d110      	bne.n	800275e <HAL_RCC_OscConfig+0x5e>
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	4b7f      	ldr	r3, [pc, #508]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d06c      	beq.n	800282c <HAL_RCC_OscConfig+0x12c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d168      	bne.n	800282c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e3a2      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x76>
 8002768:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a75      	ldr	r2, [pc, #468]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0xd4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x98>
 800277e:	4b71      	ldr	r3, [pc, #452]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6e      	ldr	r3, [pc, #440]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6d      	ldr	r2, [pc, #436]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xd4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0xbc>
 80027a2:	4b68      	ldr	r3, [pc, #416]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a67      	ldr	r2, [pc, #412]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b65      	ldr	r3, [pc, #404]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a64      	ldr	r2, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xd4>
 80027bc:	4b61      	ldr	r3, [pc, #388]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a60      	ldr	r2, [pc, #384]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fe38 	bl	8001450 <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fe34 	bl	8001450 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e356      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f6:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe4>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fe24 	bl	8001450 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fe20 	bl	8001450 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e342      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x10c>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 808c 	beq.w	8002954 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283c:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002844:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_RCC_OscConfig+0x162>
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b18      	cmp	r3, #24
 8002856:	d137      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1c8>
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d132      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x17a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e314      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800287a:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0219 	bic.w	r2, r3, #25
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	492f      	ldr	r1, [pc, #188]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fde0 	bl	8001450 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe fddc 	bl	8001450 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e2fe      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a6:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	4920      	ldr	r1, [pc, #128]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c6:	e045      	b.n	8002954 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d026      	beq.n	800291e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 0219 	bic.w	r2, r3, #25
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4919      	ldr	r1, [pc, #100]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fdb5 	bl	8001450 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fdb1 	bl	8001450 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e2d3      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	490b      	ldr	r1, [pc, #44]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e01a      	b.n	8002954 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fd91 	bl	8001450 <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fd8d 	bl	8001450 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d903      	bls.n	8002948 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e2af      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
 8002944:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002948:	4b96      	ldr	r3, [pc, #600]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ee      	bne.n	8002932 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d06a      	beq.n	8002a36 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002960:	4b90      	ldr	r3, [pc, #576]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002968:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800296a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d007      	beq.n	8002986 <HAL_RCC_OscConfig+0x286>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b18      	cmp	r3, #24
 800297a:	d11b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2b4>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002986:	4b87      	ldr	r3, [pc, #540]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x29e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	2b80      	cmp	r3, #128	@ 0x80
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e282      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299e:	4b81      	ldr	r3, [pc, #516]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	497d      	ldr	r1, [pc, #500]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029bc:	4b79      	ldr	r3, [pc, #484]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a78      	ldr	r2, [pc, #480]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fd42 	bl	8001450 <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029d0:	f7fe fd3e 	bl	8001450 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e260      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029e2:	4b70      	ldr	r3, [pc, #448]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	4969      	ldr	r1, [pc, #420]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60cb      	str	r3, [r1, #12]
 8002a02:	e018      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a04:	4b67      	ldr	r3, [pc, #412]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a66      	ldr	r2, [pc, #408]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fd1e 	bl	8001450 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a18:	f7fe fd1a 	bl	8001450 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e23c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d036      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4e:	4a55      	ldr	r2, [pc, #340]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fcfb 	bl	8001450 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fcf7 	bl	8001450 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e219      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x35e>
 8002a7c:	e018      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	4a48      	ldr	r2, [pc, #288]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fce1 	bl	8001450 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe fcdd 	bl	8001450 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1ff      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d036      	beq.n	8002b2a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d019      	beq.n	8002af8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ac4:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a36      	ldr	r2, [pc, #216]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002aca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fcbe 	bl	8001450 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ad8:	f7fe fcba 	bl	8001450 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1dc      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x3d8>
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b04:	f7fe fca4 	bl	8001450 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0c:	f7fe fca0 	bl	8001450 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1c2      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8086 	beq.w	8002c44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a8>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fc84 	bl	8001450 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe fc80 	bl	8001450 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	@ 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1a2      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x480>
 8002b72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <HAL_RCC_OscConfig+0x4ac>
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a02      	ldr	r2, [pc, #8]	@ (8002ba4 <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba0:	e021      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e6>
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58024800 	.word	0x58024800
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x4ce>
 8002bb4:	4b83      	ldr	r3, [pc, #524]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	4a82      	ldr	r2, [pc, #520]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc0:	4b80      	ldr	r3, [pc, #512]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a7f      	ldr	r2, [pc, #508]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e6>
 8002bce:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bda:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	4a79      	ldr	r2, [pc, #484]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe fc2f 	bl	8001450 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fc2b 	bl	8001450 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e14b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4f6>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fc19 	bl	8001450 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fc15 	bl	8001450 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e135      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c38:	4b62      	ldr	r3, [pc, #392]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 812a 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c56:	2b18      	cmp	r3, #24
 8002c58:	f000 80ba 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f040 8095 	bne.w	8002d90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b57      	ldr	r3, [pc, #348]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a56      	ldr	r2, [pc, #344]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fbed 	bl	8001450 <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe fbe9 	bl	8001450 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e10b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c98:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c8>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	430a      	orrs	r2, r1
 8002cac:	4945      	ldr	r1, [pc, #276]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	025b      	lsls	r3, r3, #9
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ce2:	4938      	ldr	r1, [pc, #224]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ce8:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	4a35      	ldr	r2, [pc, #212]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cf4:	4b33      	ldr	r3, [pc, #204]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0x6cc>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d00:	00d2      	lsls	r2, r2, #3
 8002d02:	4930      	ldr	r1, [pc, #192]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d08:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	f023 020c 	bic.w	r2, r3, #12
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	492b      	ldr	r1, [pc, #172]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	f023 0202 	bic.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4927      	ldr	r1, [pc, #156]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d38:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d44:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d50:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb72 	bl	8001450 <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fb6e 	bl	8001450 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e090      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x670>
 8002d8e:	e088      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fb58 	bl	8001450 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe fb54 	bl	8001450 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e076      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_RCC_OscConfig+0x6c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a4>
 8002dc2:	e06e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7a2>
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	fffffc0c 	.word	0xfffffc0c
 8002dcc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dd0:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dd6:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d031      	beq.n	8002e48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0203 	and.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d12a      	bne.n	8002e48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d122      	bne.n	8002e48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11a      	bne.n	8002e48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0a5b      	lsrs	r3, r3, #9
 8002e16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d111      	bne.n	8002e48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d108      	bne.n	8002e48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e02b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d01f      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e66:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e6e:	f7fe faef 	bl	8001450 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e74:	bf00      	nop
 8002e76:	f7fe faeb 	bl	8001450 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d0f9      	beq.n	8002e76 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_RCC_OscConfig+0x7b0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	4906      	ldr	r1, [pc, #24]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e96:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_RCC_OscConfig+0x7ac>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3730      	adds	r7, #48	@ 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	ffff0007 	.word	0xffff0007

08002eb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e19c      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b87      	ldr	r3, [pc, #540]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4985      	ldr	r1, [pc, #532]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b83      	ldr	r3, [pc, #524]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e184      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	4b7b      	ldr	r3, [pc, #492]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d908      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f14:	4b78      	ldr	r3, [pc, #480]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4975      	ldr	r1, [pc, #468]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	4b70      	ldr	r3, [pc, #448]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d908      	bls.n	8002f54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f42:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	496a      	ldr	r1, [pc, #424]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d908      	bls.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f70:	4b61      	ldr	r3, [pc, #388]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	495e      	ldr	r1, [pc, #376]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	4b59      	ldr	r3, [pc, #356]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d908      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f9e:	4b56      	ldr	r3, [pc, #344]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4953      	ldr	r1, [pc, #332]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f023 020f 	bic.w	r2, r3, #15
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4947      	ldr	r1, [pc, #284]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d055      	beq.n	8003096 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4940      	ldr	r1, [pc, #256]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d107      	bne.n	8003014 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003004:	4b3c      	ldr	r3, [pc, #240]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d121      	bne.n	8003054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0f6      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0ea      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003034:	4b30      	ldr	r3, [pc, #192]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0de      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003044:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d6      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f023 0207 	bic.w	r2, r3, #7
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4925      	ldr	r1, [pc, #148]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003062:	4313      	orrs	r3, r2
 8003064:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fe f9f3 	bl	8001450 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306c:	e00a      	b.n	8003084 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f7fe f9ef 	bl	8001450 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0be      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	429a      	cmp	r2, r3
 8003094:	d1eb      	bne.n	800306e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d208      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b2:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f023 020f 	bic.w	r2, r3, #15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d214      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 020f 	bic.w	r2, r3, #15
 80030da:	4906      	ldr	r1, [pc, #24]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <HAL_RCC_ClockConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e086      	b.n	8003202 <HAL_RCC_ClockConfig+0x34e>
 80030f4:	52002000 	.word	0x52002000
 80030f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	4b3f      	ldr	r3, [pc, #252]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003114:	429a      	cmp	r2, r3
 8003116:	d208      	bcs.n	800312a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003118:	4b3c      	ldr	r3, [pc, #240]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4939      	ldr	r1, [pc, #228]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003126:	4313      	orrs	r3, r2
 8003128:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003142:	429a      	cmp	r2, r3
 8003144:	d208      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	492e      	ldr	r1, [pc, #184]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003154:	4313      	orrs	r3, r2
 8003156:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	4b28      	ldr	r3, [pc, #160]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003170:	429a      	cmp	r2, r3
 8003172:	d208      	bcs.n	8003186 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003174:	4b25      	ldr	r3, [pc, #148]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4922      	ldr	r1, [pc, #136]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003182:	4313      	orrs	r3, r2
 8003184:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800319e:	429a      	cmp	r2, r3
 80031a0:	d208      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031a2:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4917      	ldr	r1, [pc, #92]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031b4:	f000 f834 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b14      	ldr	r3, [pc, #80]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	4912      	ldr	r1, [pc, #72]	@ (8003210 <HAL_RCC_ClockConfig+0x35c>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCC_ClockConfig+0x358>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <HAL_RCC_ClockConfig+0x35c>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <HAL_RCC_ClockConfig+0x360>)
 80031ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <HAL_RCC_ClockConfig+0x364>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x368>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe f8e0 	bl	80013bc <HAL_InitTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	58024400 	.word	0x58024400
 8003210:	08009f5c 	.word	0x08009f5c
 8003214:	24000004 	.word	0x24000004
 8003218:	24000000 	.word	0x24000000
 800321c:	24000020 	.word	0x24000020

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003226:	4bb3      	ldr	r3, [pc, #716]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800322e:	2b18      	cmp	r3, #24
 8003230:	f200 8155 	bhi.w	80034de <HAL_RCC_GetSysClockFreq+0x2be>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	080032a1 	.word	0x080032a1
 8003240:	080034df 	.word	0x080034df
 8003244:	080034df 	.word	0x080034df
 8003248:	080034df 	.word	0x080034df
 800324c:	080034df 	.word	0x080034df
 8003250:	080034df 	.word	0x080034df
 8003254:	080034df 	.word	0x080034df
 8003258:	080034df 	.word	0x080034df
 800325c:	080032c7 	.word	0x080032c7
 8003260:	080034df 	.word	0x080034df
 8003264:	080034df 	.word	0x080034df
 8003268:	080034df 	.word	0x080034df
 800326c:	080034df 	.word	0x080034df
 8003270:	080034df 	.word	0x080034df
 8003274:	080034df 	.word	0x080034df
 8003278:	080034df 	.word	0x080034df
 800327c:	080032cd 	.word	0x080032cd
 8003280:	080034df 	.word	0x080034df
 8003284:	080034df 	.word	0x080034df
 8003288:	080034df 	.word	0x080034df
 800328c:	080034df 	.word	0x080034df
 8003290:	080034df 	.word	0x080034df
 8003294:	080034df 	.word	0x080034df
 8003298:	080034df 	.word	0x080034df
 800329c:	080032d3 	.word	0x080032d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a0:	4b94      	ldr	r3, [pc, #592]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032ac:	4b91      	ldr	r3, [pc, #580]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	08db      	lsrs	r3, r3, #3
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	4a90      	ldr	r2, [pc, #576]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032be:	e111      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032c0:	4b8d      	ldr	r3, [pc, #564]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c2:	61bb      	str	r3, [r7, #24]
      break;
 80032c4:	e10e      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032c6:	4b8d      	ldr	r3, [pc, #564]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032c8:	61bb      	str	r3, [r7, #24]
      break;
 80032ca:	e10b      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032ce:	61bb      	str	r3, [r7, #24]
      break;
 80032d0:	e108      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032d2:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032dc:	4b85      	ldr	r3, [pc, #532]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032e8:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032f2:	4b80      	ldr	r3, [pc, #512]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	08db      	lsrs	r3, r3, #3
 80032f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80e1 	beq.w	80034d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f000 8083 	beq.w	8003424 <HAL_RCC_GetSysClockFreq+0x204>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b02      	cmp	r3, #2
 8003322:	f200 80a1 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x248>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x114>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d056      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003332:	e099      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003334:	4b6f      	ldr	r3, [pc, #444]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d02d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003340:	4b6c      	ldr	r3, [pc, #432]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	4a6b      	ldr	r2, [pc, #428]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b62      	ldr	r3, [pc, #392]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a02 	vldr	s12, [r7, #8]
 800337e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800339a:	e087      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b51      	ldr	r3, [pc, #324]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033de:	e065      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b40      	ldr	r3, [pc, #256]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a02 	vldr	s12, [r7, #8]
 8003406:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003422:	e043      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003510 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b2f      	ldr	r3, [pc, #188]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a02 	vldr	s12, [r7, #8]
 800344a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003466:	e021      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	0a5b      	lsrs	r3, r3, #9
 80034b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b6:	3301      	adds	r3, #1
 80034b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d0:	ee17 3a90 	vmov	r3, s15
 80034d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034d6:	e005      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
      break;
 80034dc:	e002      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034e0:	61bb      	str	r3, [r7, #24]
      break;
 80034e2:	bf00      	nop
  }

  return sysclockfreq;
 80034e4:	69bb      	ldr	r3, [r7, #24]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	@ 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
 80034f8:	03d09000 	.word	0x03d09000
 80034fc:	003d0900 	.word	0x003d0900
 8003500:	007a1200 	.word	0x007a1200
 8003504:	46000000 	.word	0x46000000
 8003508:	4c742400 	.word	0x4c742400
 800350c:	4a742400 	.word	0x4a742400
 8003510:	4af42400 	.word	0x4af42400

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800351a:	f7ff fe81 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <HAL_RCC_GetHCLKFreq+0x50>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490f      	ldr	r1, [pc, #60]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x54>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003538:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_RCC_GetHCLKFreq+0x50>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x54>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a07      	ldr	r2, [pc, #28]	@ (800356c <HAL_RCC_GetHCLKFreq+0x58>)
 8003550:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003552:	4a07      	ldr	r2, [pc, #28]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <HAL_RCC_GetHCLKFreq+0x58>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	58024400 	.word	0x58024400
 8003568:	08009f5c 	.word	0x08009f5c
 800356c:	24000004 	.word	0x24000004
 8003570:	24000000 	.word	0x24000000

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003578:	f7ff ffcc 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400
 800359c:	08009f5c 	.word	0x08009f5c

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035a4:	f7ff ffb6 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4904      	ldr	r1, [pc, #16]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58024400 	.word	0x58024400
 80035c8:	08009f5c 	.word	0x08009f5c

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b0c6      	sub	sp, #280	@ 0x118
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035f0:	2500      	movs	r5, #0
 80035f2:	ea54 0305 	orrs.w	r3, r4, r5
 80035f6:	d049      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003602:	d02f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800360a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800360e:	d01a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003620:	e01c      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4bab      	ldr	r3, [pc, #684]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	4aaa      	ldr	r2, [pc, #680]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800362e:	e01a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003634:	3308      	adds	r3, #8
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fc25 	bl	8004e88 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003644:	e00f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364a:	3328      	adds	r3, #40	@ 0x28
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fccc 	bl	8004fec <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800365a:	e004      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800366e:	4b98      	ldr	r3, [pc, #608]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003672:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367c:	4a94      	ldr	r2, [pc, #592]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367e:	430b      	orrs	r3, r1
 8003680:	6513      	str	r3, [r2, #80]	@ 0x50
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003688:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003698:	f04f 0900 	mov.w	r9, #0
 800369c:	ea58 0309 	orrs.w	r3, r8, r9
 80036a0:	d047      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d82a      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c9 	.word	0x080036c9
 80036b8:	080036d7 	.word	0x080036d7
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	0800370b 	.word	0x0800370b
 80036c4:	0800370b 	.word	0x0800370b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b81      	ldr	r3, [pc, #516]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4a80      	ldr	r2, [pc, #512]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d4:	e01a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	3308      	adds	r3, #8
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fbd2 	bl	8004e88 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ea:	e00f      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f0:	3328      	adds	r3, #40	@ 0x28
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fc79 	bl	8004fec <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003700:	e004      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b6e      	ldr	r3, [pc, #440]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	f023 0107 	bic.w	r1, r3, #7
 800371c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	4a6b      	ldr	r2, [pc, #428]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003724:	430b      	orrs	r3, r1
 8003726:	6513      	str	r3, [r2, #80]	@ 0x50
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800372e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	ea5a 030b 	orrs.w	r3, sl, fp
 8003746:	d05b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003750:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003754:	d03b      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003756:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800375a:	d834      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800375c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003760:	d037      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003766:	d82e      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003768:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800376c:	d033      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800376e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003772:	d828      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003778:	d01a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377e:	d822      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800378a:	e01c      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	4a4f      	ldr	r2, [pc, #316]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003798:	e01e      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379e:	3308      	adds	r3, #8
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fb70 	bl	8004e88 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037ae:	e013      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b4:	3328      	adds	r3, #40	@ 0x28
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fc17 	bl	8004fec <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037cc:	e004      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037e0:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037f0:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800380c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003816:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800381a:	460b      	mov	r3, r1
 800381c:	4313      	orrs	r3, r2
 800381e:	d05d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003824:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003828:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800382c:	d03b      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800382e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003832:	d834      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003838:	d037      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800383a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800383e:	d82e      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003840:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003844:	d033      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003846:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384a:	d828      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003850:	d01a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003856:	d822      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003860:	d007      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003862:	e01c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b1a      	ldr	r3, [pc, #104]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e01e      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fb04 	bl	8004e88 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003886:	e013      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	3328      	adds	r3, #40	@ 0x28
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fbab 	bl	8004fec <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038c8:	4a01      	ldr	r2, [pc, #4]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ce:	e005      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80038d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d03a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	2b30      	cmp	r3, #48	@ 0x30
 8003904:	d01f      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003906:	2b30      	cmp	r3, #48	@ 0x30
 8003908:	d819      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d00c      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d815      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003916:	2b10      	cmp	r3, #16
 8003918:	d111      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4baa      	ldr	r3, [pc, #680]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	4aa9      	ldr	r2, [pc, #676]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392c:	3308      	adds	r3, #8
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 faa9 	bl	8004e88 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800394a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003954:	4b9b      	ldr	r3, [pc, #620]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003958:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	4a98      	ldr	r2, [pc, #608]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003964:	430b      	orrs	r3, r1
 8003966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800396e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800397e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003988:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d051      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800399c:	d035      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a2:	d82e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039a8:	d031      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80039aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ae:	d828      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b4:	d01a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ba:	d822      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c4:	d007      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80039c6:	e01c      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d4:	e01c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039da:	3308      	adds	r3, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa52 	bl	8004e88 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f0:	3328      	adds	r3, #40	@ 0x28
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 faf9 	bl	8004fec <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a18:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	4a67      	ldr	r2, [pc, #412]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d053      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a60:	d033      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003a62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a66:	d82c      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a6c:	d02f      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a72:	d826      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a78:	d02b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003a7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a7e:	d820      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a84:	d012      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8a:	d81a      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f9f2 	bl	8004e88 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab0:	3328      	adds	r3, #40	@ 0x28
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fa99 	bl	8004fec <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003aca:	bf00      	nop
 8003acc:	e004      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ae0:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	4a35      	ldr	r2, [pc, #212]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b14:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d058      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b2a:	d033      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b30:	d82c      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b36:	d02f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3c:	d826      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b42:	d02b      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003b44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b48:	d820      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4e:	d012      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b54:	d81a      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5e:	d115      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b64:	3308      	adds	r3, #8
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 f98d 	bl	8004e88 <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b74:	e015      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7a:	3328      	adds	r3, #40	@ 0x28
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fa34 	bl	8004fec <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b92:	e006      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b94:	bf00      	nop
 8003b96:	e004      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bba:	4a02      	ldr	r2, [pc, #8]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003bc2:	bf00      	nop
 8003bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d037      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d816      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0a:	d111      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4bc4      	ldr	r3, [pc, #784]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4ac3      	ldr	r2, [pc, #780]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f930 	bl	8004e88 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c42:	4bb7      	ldr	r3, [pc, #732]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c50:	4ab3      	ldr	r2, [pc, #716]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d039      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d81c      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ccd 	.word	0x08003ccd
 8003c94:	08003ca1 	.word	0x08003ca1
 8003c98:	08003caf 	.word	0x08003caf
 8003c9c:	08003ccd 	.word	0x08003ccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca0:	4b9f      	ldr	r3, [pc, #636]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	4a9e      	ldr	r2, [pc, #632]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cac:	e00f      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f8e6 	bl	8004e88 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc2:	e004      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cd6:	4b92      	ldr	r3, [pc, #584]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cda:	f023 0103 	bic.w	r1, r3, #3
 8003cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f000 8099 	beq.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d16:	4b83      	ldr	r3, [pc, #524]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a82      	ldr	r2, [pc, #520]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d22:	f7fd fb95 	bl	8001450 <HAL_GetTick>
 8003d26:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd fb90 	bl	8001450 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d903      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d42:	e005      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d44:	4b77      	ldr	r3, [pc, #476]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ed      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d173      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d58:	4b71      	ldr	r3, [pc, #452]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d64:	4053      	eors	r3, r2
 8003d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b69      	ldr	r3, [pc, #420]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b66      	ldr	r3, [pc, #408]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a65      	ldr	r2, [pc, #404]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d92:	4a63      	ldr	r2, [pc, #396]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da6:	d118      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd fb52 	bl	8001450 <HAL_GetTick>
 8003dac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db0:	e00d      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fb4d 	bl	8001450 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d903      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dce:	4b54      	ldr	r3, [pc, #336]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0eb      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d129      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df2:	d10e      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003df4:	4b4a      	ldr	r3, [pc, #296]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e04:	091a      	lsrs	r2, r3, #4
 8003e06:	4b48      	ldr	r3, [pc, #288]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	4a45      	ldr	r2, [pc, #276]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6113      	str	r3, [r2, #16]
 8003e10:	e005      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e12:	4b43      	ldr	r3, [pc, #268]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	4a42      	ldr	r2, [pc, #264]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e1c:	6113      	str	r3, [r2, #16]
 8003e1e:	4b40      	ldr	r3, [pc, #256]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f002 0301 	and.w	r3, r2, #1
 8003e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f000 808f 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e70:	2b28      	cmp	r3, #40	@ 0x28
 8003e72:	d871      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003f61 	.word	0x08003f61
 8003e80:	08003f59 	.word	0x08003f59
 8003e84:	08003f59 	.word	0x08003f59
 8003e88:	08003f59 	.word	0x08003f59
 8003e8c:	08003f59 	.word	0x08003f59
 8003e90:	08003f59 	.word	0x08003f59
 8003e94:	08003f59 	.word	0x08003f59
 8003e98:	08003f59 	.word	0x08003f59
 8003e9c:	08003f2d 	.word	0x08003f2d
 8003ea0:	08003f59 	.word	0x08003f59
 8003ea4:	08003f59 	.word	0x08003f59
 8003ea8:	08003f59 	.word	0x08003f59
 8003eac:	08003f59 	.word	0x08003f59
 8003eb0:	08003f59 	.word	0x08003f59
 8003eb4:	08003f59 	.word	0x08003f59
 8003eb8:	08003f59 	.word	0x08003f59
 8003ebc:	08003f43 	.word	0x08003f43
 8003ec0:	08003f59 	.word	0x08003f59
 8003ec4:	08003f59 	.word	0x08003f59
 8003ec8:	08003f59 	.word	0x08003f59
 8003ecc:	08003f59 	.word	0x08003f59
 8003ed0:	08003f59 	.word	0x08003f59
 8003ed4:	08003f59 	.word	0x08003f59
 8003ed8:	08003f59 	.word	0x08003f59
 8003edc:	08003f61 	.word	0x08003f61
 8003ee0:	08003f59 	.word	0x08003f59
 8003ee4:	08003f59 	.word	0x08003f59
 8003ee8:	08003f59 	.word	0x08003f59
 8003eec:	08003f59 	.word	0x08003f59
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003f59 	.word	0x08003f59
 8003ef8:	08003f59 	.word	0x08003f59
 8003efc:	08003f61 	.word	0x08003f61
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f61 	.word	0x08003f61
 8003f20:	58024400 	.word	0x58024400
 8003f24:	58024800 	.word	0x58024800
 8003f28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f30:	3308      	adds	r3, #8
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 ffa7 	bl	8004e88 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f40:	e00f      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f84e 	bl	8004fec <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f6a:	4bbf      	ldr	r3, [pc, #764]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f78:	4abb      	ldr	r2, [pc, #748]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f7e:	e003      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f002 0302 	and.w	r3, r2, #2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	d041      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d824      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fe7 	.word	0x08003fe7
 8003fc4:	08004005 	.word	0x08004005
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004005 	.word	0x08004005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 ff55 	bl	8004e88 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fea:	3328      	adds	r3, #40	@ 0x28
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fffc 	bl	8004fec <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800400e:	4b96      	ldr	r3, [pc, #600]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	f023 0107 	bic.w	r1, r3, #7
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401c:	4a92      	ldr	r2, [pc, #584]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800401e:	430b      	orrs	r3, r1
 8004020:	6553      	str	r3, [r2, #84]	@ 0x54
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f002 0304 	and.w	r3, r2, #4
 8004038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004042:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004046:	460b      	mov	r3, r1
 8004048:	4313      	orrs	r3, r2
 800404a:	d044      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	2b05      	cmp	r3, #5
 8004056:	d825      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004058:	a201      	add	r2, pc, #4	@ (adr r2, 8004060 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	080040ad 	.word	0x080040ad
 8004064:	08004079 	.word	0x08004079
 8004068:	0800408f 	.word	0x0800408f
 800406c:	080040ad 	.word	0x080040ad
 8004070:	080040ad 	.word	0x080040ad
 8004074:	080040ad 	.word	0x080040ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	3308      	adds	r3, #8
 800407e:	2101      	movs	r1, #1
 8004080:	4618      	mov	r0, r3
 8004082:	f000 ff01 	bl	8004e88 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800408c:	e00f      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004092:	3328      	adds	r3, #40	@ 0x28
 8004094:	2101      	movs	r1, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ffa8 	bl	8004fec <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f023 0107 	bic.w	r1, r3, #7
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	4a68      	ldr	r2, [pc, #416]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f002 0320 	and.w	r3, r2, #32
 80040e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d055      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004102:	d033      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004108:	d82c      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410e:	d02f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d826      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800411a:	d02b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800411c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004120:	d820      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004126:	d012      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800412c:	d81a      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d022      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004136:	d115      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	3308      	adds	r3, #8
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fea1 	bl	8004e88 <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800414c:	e015      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	3328      	adds	r3, #40	@ 0x28
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ff48 	bl	8004fec <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004162:	e00a      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800416a:	e006      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800416c:	bf00      	nop
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004170:	bf00      	nop
 8004172:	e002      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004182:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004192:	4a35      	ldr	r2, [pc, #212]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004194:	430b      	orrs	r3, r1
 8004196:	6553      	str	r3, [r2, #84]	@ 0x54
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800419e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d058      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041ce:	d033      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80041d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041d4:	d82c      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	d02f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e0:	d826      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041e6:	d02b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80041e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ec:	d820      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f2:	d012      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f8:	d81a      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d022      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d115      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	3308      	adds	r3, #8
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe3b 	bl	8004e88 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004218:	e015      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421e:	3328      	adds	r3, #40	@ 0x28
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fee2 	bl	8004fec <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800422e:	e00a      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004236:	e006      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004238:	bf00      	nop
 800423a:	e004      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800425e:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6593      	str	r3, [r2, #88]	@ 0x58
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004266:	bf00      	nop
 8004268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800428a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d055      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800429c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042a0:	d033      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80042a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042a6:	d82c      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ac:	d02f      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b2:	d826      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042b8:	d02b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80042ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042be:	d820      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c4:	d012      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80042c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ca:	d81a      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80042d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d4:	d115      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042da:	3308      	adds	r3, #8
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fdd2 	bl	8004e88 <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ea:	e015      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f0:	3328      	adds	r3, #40	@ 0x28
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe79 	bl	8004fec <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004300:	e00a      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800430a:	bf00      	nop
 800430c:	e004      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004320:	4ba0      	ldr	r3, [pc, #640]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004330:	4a9c      	ldr	r2, [pc, #624]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004332:	430b      	orrs	r3, r1
 8004334:	6593      	str	r3, [r2, #88]	@ 0x58
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800433c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0308 	and.w	r3, r2, #8
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004356:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d01e      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800436e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004372:	3328      	adds	r3, #40	@ 0x28
 8004374:	2102      	movs	r1, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fe38 	bl	8004fec <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004388:	4b86      	ldr	r3, [pc, #536]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004398:	4a82      	ldr	r2, [pc, #520]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f002 0310 	and.w	r3, r2, #16
 80043aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d01e      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d10c      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	3328      	adds	r3, #40	@ 0x28
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fe09 	bl	8004fec <RCCEx_PLL3_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e6:	4b6f      	ldr	r3, [pc, #444]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f6:	4a6b      	ldr	r2, [pc, #428]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440a:	2300      	movs	r3, #0
 800440c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800440e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d03e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004424:	d022      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442a:	d81b      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004434:	d00b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004436:	e015      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443c:	3308      	adds	r3, #8
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd21 	bl	8004e88 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800444c:	e00f      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004452:	3328      	adds	r3, #40	@ 0x28
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fdc8 	bl	8004fec <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004462:	e004      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800446c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004476:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800447e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004486:	4a47      	ldr	r2, [pc, #284]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6593      	str	r3, [r2, #88]	@ 0x58
 800448c:	e003      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004492:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80044a4:	2300      	movs	r3, #0
 80044a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80044a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d03b      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044be:	d01f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80044c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c4:	d818      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ca:	d003      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80044cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044d0:	d007      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80044d2:	e011      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d4:	4b33      	ldr	r3, [pc, #204]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	4a32      	ldr	r2, [pc, #200]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044e0:	e00f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e6:	3328      	adds	r3, #40	@ 0x28
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fd7e 	bl	8004fec <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450a:	4b26      	ldr	r3, [pc, #152]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004526:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004536:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004538:	2300      	movs	r3, #0
 800453a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800453c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d034      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004554:	d007      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004556:	e011      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004558:	4b12      	ldr	r3, [pc, #72]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a11      	ldr	r2, [pc, #68]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800455e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004564:	e00e      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	3308      	adds	r3, #8
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fc8a 	bl	8004e88 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004590:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	4a02      	ldr	r2, [pc, #8]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800459c:	430b      	orrs	r3, r1
 800459e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045be:	2300      	movs	r3, #0
 80045c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80045c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00c      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d0:	3328      	adds	r3, #40	@ 0x28
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd09 	bl	8004fec <RCCEx_PLL3_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045f4:	2300      	movs	r3, #0
 80045f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045fc:	460b      	mov	r3, r1
 80045fe:	4313      	orrs	r3, r2
 8004600:	d036      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460c:	d018      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800460e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004612:	d811      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004618:	d014      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800461a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461e:	d80b      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d011      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004628:	d106      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462a:	4bb7      	ldr	r3, [pc, #732]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	4ab6      	ldr	r2, [pc, #728]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004634:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004636:	e008      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004640:	bf00      	nop
 8004642:	e002      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004644:	bf00      	nop
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004652:	4bad      	ldr	r3, [pc, #692]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004660:	4aa9      	ldr	r2, [pc, #676]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004662:	430b      	orrs	r3, r1
 8004664:	6553      	str	r3, [r2, #84]	@ 0x54
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800466c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800467c:	653b      	str	r3, [r7, #80]	@ 0x50
 800467e:	2300      	movs	r3, #0
 8004680:	657b      	str	r3, [r7, #84]	@ 0x54
 8004682:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800468c:	4b9e      	ldr	r3, [pc, #632]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800468e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004690:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	4a9b      	ldr	r2, [pc, #620]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800469c:	430b      	orrs	r3, r1
 800469e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ae:	2300      	movs	r3, #0
 80046b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046bc:	4b92      	ldr	r3, [pc, #584]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ca:	4a8f      	ldr	r2, [pc, #572]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046de:	2300      	movs	r3, #0
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ec:	4b86      	ldr	r3, [pc, #536]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4a85      	ldr	r2, [pc, #532]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046f6:	6113      	str	r3, [r2, #16]
 80046f8:	4b83      	ldr	r3, [pc, #524]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046fa:	6919      	ldr	r1, [r3, #16]
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004704:	4a80      	ldr	r2, [pc, #512]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800470a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004718:	2300      	movs	r3, #0
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004726:	4b78      	ldr	r3, [pc, #480]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	4a74      	ldr	r2, [pc, #464]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004736:	430b      	orrs	r3, r1
 8004738:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004746:	633b      	str	r3, [r7, #48]	@ 0x30
 8004748:	2300      	movs	r3, #0
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
 800474c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004756:	4b6c      	ldr	r3, [pc, #432]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800475e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004766:	4a68      	ldr	r2, [pc, #416]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	2100      	movs	r1, #0
 8004776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d011      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	3308      	adds	r3, #8
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fb79 	bl	8004e88 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800479c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	2100      	movs	r1, #0
 80047b6:	6239      	str	r1, [r7, #32]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d011      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	3308      	adds	r3, #8
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb59 	bl	8004e88 <RCCEx_PLL2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	2100      	movs	r1, #0
 80047f6:	61b9      	str	r1, [r7, #24]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004802:	460b      	mov	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	d011      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480c:	3308      	adds	r3, #8
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fb39 	bl	8004e88 <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800481c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	2100      	movs	r1, #0
 8004836:	6139      	str	r1, [r7, #16]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d011      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484c:	3328      	adds	r3, #40	@ 0x28
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fbcb 	bl	8004fec <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	2100      	movs	r1, #0
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004882:	460b      	mov	r3, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	d011      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	3328      	adds	r3, #40	@ 0x28
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fbab 	bl	8004fec <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800489c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	2100      	movs	r1, #0
 80048b6:	6039      	str	r1, [r7, #0]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d011      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048cc:	3328      	adds	r3, #40	@ 0x28
 80048ce:	2102      	movs	r1, #2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb8b 	bl	8004fec <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80048ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004900:	46bd      	mov	sp, r7
 8004902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400

0800490c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004910:	f7fe fe00 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4904      	ldr	r1, [pc, #16]	@ (8004934 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	58024400 	.word	0x58024400
 8004934:	08009f5c 	.word	0x08009f5c

08004938 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004940:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800494a:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	0b1b      	lsrs	r3, r3, #12
 8004950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004954:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004956:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004962:	4b99      	ldr	r3, [pc, #612]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8111 	beq.w	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b02      	cmp	r3, #2
 800498a:	f000 8083 	beq.w	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b02      	cmp	r3, #2
 8004992:	f200 80a1 	bhi.w	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d056      	beq.n	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049a2:	e099      	b.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a4:	4b88      	ldr	r3, [pc, #544]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02d      	beq.n	8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b0:	4b85      	ldr	r3, [pc, #532]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	08db      	lsrs	r3, r3, #3
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	4a84      	ldr	r2, [pc, #528]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
 80049c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a0a:	e087      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e065      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b59      	ldr	r3, [pc, #356]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e043      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b48      	ldr	r3, [pc, #288]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e021      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b42:	ee17 2a90 	vmov	r2, s15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b70:	ee17 2a90 	vmov	r2, s15
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b78:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9e:	ee17 2a90 	vmov	r2, s15
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	03d09000 	.word	0x03d09000
 8004bd0:	46000000 	.word	0x46000000
 8004bd4:	4c742400 	.word	0x4c742400
 8004bd8:	4a742400 	.word	0x4a742400
 8004bdc:	4af42400 	.word	0x4af42400

08004be0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be8:	4ba1      	ldr	r3, [pc, #644]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	0d1b      	lsrs	r3, r3, #20
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c0a:	4b99      	ldr	r3, [pc, #612]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8111 	beq.w	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f000 8083 	beq.w	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f200 80a1 	bhi.w	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d056      	beq.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c58:	4b85      	ldr	r3, [pc, #532]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a84      	ldr	r2, [pc, #528]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b7b      	ldr	r3, [pc, #492]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cb2:	e087      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf6:	e065      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	e043      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b48      	ldr	r3, [pc, #288]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e021      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dea:	ee17 2a90 	vmov	r2, s15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	46000000 	.word	0x46000000
 8004e7c:	4c742400 	.word	0x4c742400
 8004e80:	4a742400 	.word	0x4a742400
 8004e84:	4af42400 	.word	0x4af42400

08004e88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e96:	4b53      	ldr	r3, [pc, #332]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d101      	bne.n	8004ea6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e099      	b.n	8004fda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb2:	f7fc facd 	bl	8001450 <HAL_GetTick>
 8004eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eba:	f7fc fac9 	bl	8001450 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e086      	b.n	8004fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ecc:	4b45      	ldr	r3, [pc, #276]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ed8:	4b42      	ldr	r3, [pc, #264]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	031b      	lsls	r3, r3, #12
 8004ee6:	493f      	ldr	r1, [pc, #252]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	025b      	lsls	r3, r3, #9
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f1c:	4931      	ldr	r1, [pc, #196]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	492d      	ldr	r1, [pc, #180]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f34:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	f023 0220 	bic.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4928      	ldr	r1, [pc, #160]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f46:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	4a26      	ldr	r2, [pc, #152]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f023 0310 	bic.w	r3, r3, #16
 8004f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <RCCEx_PLL2_Config+0x160>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	69d2      	ldr	r2, [r2, #28]
 8004f5e:	00d2      	lsls	r2, r2, #3
 8004f60:	4920      	ldr	r1, [pc, #128]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f66:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f043 0310 	orr.w	r3, r3, #16
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f84:	e00f      	b.n	8004fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f8c:	4b15      	ldr	r3, [pc, #84]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f98:	e005      	b.n	8004fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f9a:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	4a11      	ldr	r2, [pc, #68]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fa4d 	bl	8001450 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fba:	f7fc fa49 	bl	8001450 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	ffff0007 	.word	0xffff0007

08004fec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffa:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d101      	bne.n	800500a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e099      	b.n	800513e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800500a:	4b4f      	ldr	r3, [pc, #316]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005016:	f7fc fa1b 	bl	8001450 <HAL_GetTick>
 800501a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800501c:	e008      	b.n	8005030 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800501e:	f7fc fa17 	bl	8001450 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e086      	b.n	800513e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005030:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800503c:	4b42      	ldr	r3, [pc, #264]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	493f      	ldr	r1, [pc, #252]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	3b01      	subs	r3, #1
 8005056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	b29b      	uxth	r3, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	3b01      	subs	r3, #1
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005080:	4931      	ldr	r1, [pc, #196]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005086:	4b30      	ldr	r3, [pc, #192]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	492d      	ldr	r1, [pc, #180]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005098:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	4928      	ldr	r1, [pc, #160]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050aa:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	4a26      	ldr	r2, [pc, #152]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050b6:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ba:	4b24      	ldr	r3, [pc, #144]	@ (800514c <RCCEx_PLL3_Config+0x160>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	69d2      	ldr	r2, [r2, #28]
 80050c2:	00d2      	lsls	r2, r2, #3
 80050c4:	4920      	ldr	r1, [pc, #128]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e8:	e00f      	b.n	800510a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050fc:	e005      	b.n	800510a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	4a11      	ldr	r2, [pc, #68]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005104:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005108:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800510a:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005116:	f7fc f99b 	bl	8001450 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800511c:	e008      	b.n	8005130 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800511e:	f7fc f997 	bl	8001450 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e006      	b.n	800513e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	ffff0007 	.word	0xffff0007

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e042      	b.n	80051e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb fd29 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2224      	movs	r2, #36	@ 0x24
 800517e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 fb64 	bl	8006868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fcf5 	bl	8005b90 <UART_SetConfig>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01b      	b.n	80051e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fbe3 	bl	80069ac <UART_CheckIdleState>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	@ 0x28
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	2b20      	cmp	r3, #32
 8005208:	d17b      	bne.n	8005302 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_UART_Transmit+0x26>
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e074      	b.n	8005304 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2221      	movs	r2, #33	@ 0x21
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522a:	f7fc f911 	bl	8001450 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005248:	d108      	bne.n	800525c <HAL_UART_Transmit+0x6c>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e003      	b.n	8005264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005264:	e030      	b.n	80052c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2180      	movs	r1, #128	@ 0x80
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f001 fc45 	bl	8006b00 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e03d      	b.n	8005304 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3302      	adds	r3, #2
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	e007      	b.n	80052b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	781a      	ldrb	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1c8      	bne.n	8005266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2200      	movs	r2, #0
 80052dc:	2140      	movs	r1, #64	@ 0x40
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f001 fc0e 	bl	8006b00 <UART_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e006      	b.n	8005304 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	@ 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005320:	2b20      	cmp	r3, #32
 8005322:	d137      	bne.n	8005394 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Receive_IT+0x24>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e030      	b.n	8005396 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <HAL_UART_Receive_IT+0x94>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01f      	beq.n	8005384 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	613b      	str	r3, [r7, #16]
   return(result);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	61bb      	str	r3, [r7, #24]
   return(result);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	461a      	mov	r2, r3
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 fc26 	bl	8006bdc <UART_Start_Receive_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	e000      	b.n	8005396 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3728      	adds	r7, #40	@ 0x28
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	58000c00 	.word	0x58000c00

080053a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b0ba      	sub	sp, #232	@ 0xe8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80053ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80053d2:	4013      	ands	r3, r2
 80053d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11b      	bne.n	8005418 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d015      	beq.n	8005418 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8393 	beq.w	8005b34 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
      }
      return;
 8005416:	e38d      	b.n	8005b34 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8123 	beq.w	8005668 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005422:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005426:	4b8d      	ldr	r3, [pc, #564]	@ (800565c <HAL_UART_IRQHandler+0x2b8>)
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800542e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005432:	4b8b      	ldr	r3, [pc, #556]	@ (8005660 <HAL_UART_IRQHandler+0x2bc>)
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8116 	beq.w	8005668 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d011      	beq.n	800546c <HAL_UART_IRQHandler+0xc8>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2201      	movs	r2, #1
 800545a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d011      	beq.n	800549c <HAL_UART_IRQHandler+0xf8>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d011      	beq.n	80054cc <HAL_UART_IRQHandler+0x128>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2204      	movs	r2, #4
 80054ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	f043 0202 	orr.w	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d017      	beq.n	8005508 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80054e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80054e8:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <HAL_UART_IRQHandler+0x2b8>)
 80054ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <HAL_UART_IRQHandler+0x196>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00c      	beq.n	800553a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 82f9 	beq.w	8005b38 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800555e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b40      	cmp	r3, #64	@ 0x40
 8005590:	d005      	beq.n	800559e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005596:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d054      	beq.n	8005648 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fc3e 	bl	8006e20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d146      	bne.n	8005640 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1d9      	bne.n	80055b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560e:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_UART_IRQHandler+0x2c0>)
 8005610:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc fbcb 	bl	8001db4 <HAL_DMA_Abort_IT>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d019      	beq.n	8005658 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005632:	4610      	mov	r0, r2
 8005634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005636:	e00f      	b.n	8005658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa93 	bl	8005b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563e:	e00b      	b.n	8005658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa8f 	bl	8005b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005646:	e007      	b.n	8005658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa8b 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005656:	e26f      	b.n	8005b38 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	bf00      	nop
    return;
 800565a:	e26d      	b.n	8005b38 <HAL_UART_IRQHandler+0x794>
 800565c:	10000001 	.word	0x10000001
 8005660:	04000120 	.word	0x04000120
 8005664:	08006eed 	.word	0x08006eed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	2b01      	cmp	r3, #1
 800566e:	f040 8203 	bne.w	8005a78 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 81fc 	beq.w	8005a78 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 81f5 	beq.w	8005a78 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2210      	movs	r2, #16
 8005694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	f040 816d 	bne.w	8005980 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4aa4      	ldr	r2, [pc, #656]	@ (8005940 <HAL_UART_IRQHandler+0x59c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d068      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4aa1      	ldr	r2, [pc, #644]	@ (8005944 <HAL_UART_IRQHandler+0x5a0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d061      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a9f      	ldr	r2, [pc, #636]	@ (8005948 <HAL_UART_IRQHandler+0x5a4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d05a      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a9c      	ldr	r2, [pc, #624]	@ (800594c <HAL_UART_IRQHandler+0x5a8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d053      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a9a      	ldr	r2, [pc, #616]	@ (8005950 <HAL_UART_IRQHandler+0x5ac>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04c      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a97      	ldr	r2, [pc, #604]	@ (8005954 <HAL_UART_IRQHandler+0x5b0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d045      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a95      	ldr	r2, [pc, #596]	@ (8005958 <HAL_UART_IRQHandler+0x5b4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d03e      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a92      	ldr	r2, [pc, #584]	@ (800595c <HAL_UART_IRQHandler+0x5b8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d037      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a90      	ldr	r2, [pc, #576]	@ (8005960 <HAL_UART_IRQHandler+0x5bc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d030      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a8d      	ldr	r2, [pc, #564]	@ (8005964 <HAL_UART_IRQHandler+0x5c0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d029      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a8b      	ldr	r2, [pc, #556]	@ (8005968 <HAL_UART_IRQHandler+0x5c4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a88      	ldr	r2, [pc, #544]	@ (800596c <HAL_UART_IRQHandler+0x5c8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a86      	ldr	r2, [pc, #536]	@ (8005970 <HAL_UART_IRQHandler+0x5cc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d014      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a83      	ldr	r2, [pc, #524]	@ (8005974 <HAL_UART_IRQHandler+0x5d0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a81      	ldr	r2, [pc, #516]	@ (8005978 <HAL_UART_IRQHandler+0x5d4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d006      	beq.n	8005786 <HAL_UART_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a7e      	ldr	r2, [pc, #504]	@ (800597c <HAL_UART_IRQHandler+0x5d8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d106      	bne.n	8005794 <HAL_UART_IRQHandler+0x3f0>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	b29b      	uxth	r3, r3
 8005792:	e005      	b.n	80057a0 <HAL_UART_IRQHandler+0x3fc>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80ad 	beq.w	8005908 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057b8:	429a      	cmp	r2, r3
 80057ba:	f080 80a5 	bcs.w	8005908 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d4:	f000 8087 	beq.w	80058e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005806:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800580e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1da      	bne.n	80057d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800584a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800584e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e1      	bne.n	8005822 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800586e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b4:	f023 0310 	bic.w	r3, r3, #16
 80058b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e4      	bne.n	80058a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fb ff49 	bl	8001778 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f939 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005906:	e119      	b.n	8005b3c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005912:	429a      	cmp	r2, r3
 8005914:	f040 8112 	bne.w	8005b3c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005924:	f040 810a 	bne.w	8005b3c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f91e 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
      return;
 800593c:	e0fe      	b.n	8005b3c <HAL_UART_IRQHandler+0x798>
 800593e:	bf00      	nop
 8005940:	40020010 	.word	0x40020010
 8005944:	40020028 	.word	0x40020028
 8005948:	40020040 	.word	0x40020040
 800594c:	40020058 	.word	0x40020058
 8005950:	40020070 	.word	0x40020070
 8005954:	40020088 	.word	0x40020088
 8005958:	400200a0 	.word	0x400200a0
 800595c:	400200b8 	.word	0x400200b8
 8005960:	40020410 	.word	0x40020410
 8005964:	40020428 	.word	0x40020428
 8005968:	40020440 	.word	0x40020440
 800596c:	40020458 	.word	0x40020458
 8005970:	40020470 	.word	0x40020470
 8005974:	40020488 	.word	0x40020488
 8005978:	400204a0 	.word	0x400204a0
 800597c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800598c:	b29b      	uxth	r3, r3
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80cf 	beq.w	8005b40 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80059a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80ca 	beq.w	8005b40 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e4      	bne.n	80059ac <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	623b      	str	r3, [r7, #32]
   return(result);
 80059f2:	6a3a      	ldr	r2, [r7, #32]
 80059f4:	4b55      	ldr	r3, [pc, #340]	@ (8005b4c <HAL_UART_IRQHandler+0x7a8>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e3      	bne.n	80059e2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e4      	bne.n	8005a2e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f881 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a76:	e063      	b.n	8005b40 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x6fe>
 8005a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 ff84 	bl	80079a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aa0:	e051      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d014      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d03a      	beq.n	8005b44 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
    }
    return;
 8005ad6:	e035      	b.n	8005b44 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <HAL_UART_IRQHandler+0x754>
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 fa0d 	bl	8006f10 <UART_EndTransmit_IT>
    return;
 8005af6:	e026      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_UART_IRQHandler+0x774>
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 ff5d 	bl	80079d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b16:	e016      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da0c      	bge.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 ff45 	bl	80079bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b32:	e008      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005b34:	bf00      	nop
 8005b36:	e006      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005b38:	bf00      	nop
 8005b3a:	e004      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005b3c:	bf00      	nop
 8005b3e:	e002      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005b44:	bf00      	nop
  }
}
 8005b46:	37e8      	adds	r7, #232	@ 0xe8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	effffffe 	.word	0xeffffffe

08005b50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b94:	b092      	sub	sp, #72	@ 0x48
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4bbe      	ldr	r3, [pc, #760]	@ (8005eb8 <UART_SetConfig+0x328>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4ab3      	ldr	r2, [pc, #716]	@ (8005ebc <UART_SetConfig+0x32c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	4baf      	ldr	r3, [pc, #700]	@ (8005ec0 <UART_SetConfig+0x330>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	f023 010f 	bic.w	r1, r3, #15
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4aa6      	ldr	r2, [pc, #664]	@ (8005ec4 <UART_SetConfig+0x334>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d177      	bne.n	8005d20 <UART_SetConfig+0x190>
 8005c30:	4ba5      	ldr	r3, [pc, #660]	@ (8005ec8 <UART_SetConfig+0x338>)
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c38:	2b28      	cmp	r3, #40	@ 0x28
 8005c3a:	d86d      	bhi.n	8005d18 <UART_SetConfig+0x188>
 8005c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <UART_SetConfig+0xb4>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005ce9 	.word	0x08005ce9
 8005c48:	08005d19 	.word	0x08005d19
 8005c4c:	08005d19 	.word	0x08005d19
 8005c50:	08005d19 	.word	0x08005d19
 8005c54:	08005d19 	.word	0x08005d19
 8005c58:	08005d19 	.word	0x08005d19
 8005c5c:	08005d19 	.word	0x08005d19
 8005c60:	08005d19 	.word	0x08005d19
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005d19 	.word	0x08005d19
 8005c6c:	08005d19 	.word	0x08005d19
 8005c70:	08005d19 	.word	0x08005d19
 8005c74:	08005d19 	.word	0x08005d19
 8005c78:	08005d19 	.word	0x08005d19
 8005c7c:	08005d19 	.word	0x08005d19
 8005c80:	08005d19 	.word	0x08005d19
 8005c84:	08005cf9 	.word	0x08005cf9
 8005c88:	08005d19 	.word	0x08005d19
 8005c8c:	08005d19 	.word	0x08005d19
 8005c90:	08005d19 	.word	0x08005d19
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005d19 	.word	0x08005d19
 8005c9c:	08005d19 	.word	0x08005d19
 8005ca0:	08005d19 	.word	0x08005d19
 8005ca4:	08005d01 	.word	0x08005d01
 8005ca8:	08005d19 	.word	0x08005d19
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005d19 	.word	0x08005d19
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005d19 	.word	0x08005d19
 8005cbc:	08005d19 	.word	0x08005d19
 8005cc0:	08005d19 	.word	0x08005d19
 8005cc4:	08005d09 	.word	0x08005d09
 8005cc8:	08005d19 	.word	0x08005d19
 8005ccc:	08005d19 	.word	0x08005d19
 8005cd0:	08005d19 	.word	0x08005d19
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	08005d19 	.word	0x08005d19
 8005cdc:	08005d19 	.word	0x08005d19
 8005ce0:	08005d19 	.word	0x08005d19
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e326      	b.n	800633e <UART_SetConfig+0x7ae>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e322      	b.n	800633e <UART_SetConfig+0x7ae>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e31e      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e31a      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d08:	2320      	movs	r3, #32
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e316      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d10:	2340      	movs	r3, #64	@ 0x40
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e312      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e30e      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a69      	ldr	r2, [pc, #420]	@ (8005ecc <UART_SetConfig+0x33c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d130      	bne.n	8005d8c <UART_SetConfig+0x1fc>
 8005d2a:	4b67      	ldr	r3, [pc, #412]	@ (8005ec8 <UART_SetConfig+0x338>)
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d826      	bhi.n	8005d84 <UART_SetConfig+0x1f4>
 8005d36:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <UART_SetConfig+0x1ac>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	08005d65 	.word	0x08005d65
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e2f0      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e2ec      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d64:	2308      	movs	r3, #8
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e2e8      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e2e4      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d74:	2320      	movs	r3, #32
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e2e0      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d7c:	2340      	movs	r3, #64	@ 0x40
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e2dc      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e2d8      	b.n	800633e <UART_SetConfig+0x7ae>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a4f      	ldr	r2, [pc, #316]	@ (8005ed0 <UART_SetConfig+0x340>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d130      	bne.n	8005df8 <UART_SetConfig+0x268>
 8005d96:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec8 <UART_SetConfig+0x338>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d826      	bhi.n	8005df0 <UART_SetConfig+0x260>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <UART_SetConfig+0x218>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dc9 	.word	0x08005dc9
 8005db0:	08005dd1 	.word	0x08005dd1
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005de1 	.word	0x08005de1
 8005dbc:	08005de9 	.word	0x08005de9
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e2ba      	b.n	800633e <UART_SetConfig+0x7ae>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e2b6      	b.n	800633e <UART_SetConfig+0x7ae>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd6:	e2b2      	b.n	800633e <UART_SetConfig+0x7ae>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e2ae      	b.n	800633e <UART_SetConfig+0x7ae>
 8005de0:	2320      	movs	r3, #32
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e2aa      	b.n	800633e <UART_SetConfig+0x7ae>
 8005de8:	2340      	movs	r3, #64	@ 0x40
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e2a6      	b.n	800633e <UART_SetConfig+0x7ae>
 8005df0:	2380      	movs	r3, #128	@ 0x80
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e2a2      	b.n	800633e <UART_SetConfig+0x7ae>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a35      	ldr	r2, [pc, #212]	@ (8005ed4 <UART_SetConfig+0x344>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d130      	bne.n	8005e64 <UART_SetConfig+0x2d4>
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <UART_SetConfig+0x338>)
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d826      	bhi.n	8005e5c <UART_SetConfig+0x2cc>
 8005e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <UART_SetConfig+0x284>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e2d 	.word	0x08005e2d
 8005e18:	08005e35 	.word	0x08005e35
 8005e1c:	08005e3d 	.word	0x08005e3d
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e284      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e34:	2304      	movs	r3, #4
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e280      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e27c      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e44:	2310      	movs	r3, #16
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e278      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e274      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e54:	2340      	movs	r3, #64	@ 0x40
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e270      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e26c      	b.n	800633e <UART_SetConfig+0x7ae>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <UART_SetConfig+0x348>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d142      	bne.n	8005ef4 <UART_SetConfig+0x364>
 8005e6e:	4b16      	ldr	r3, [pc, #88]	@ (8005ec8 <UART_SetConfig+0x338>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d838      	bhi.n	8005eec <UART_SetConfig+0x35c>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <UART_SetConfig+0x2f0>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005ea1 	.word	0x08005ea1
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005edd 	.word	0x08005edd
 8005e94:	08005ee5 	.word	0x08005ee5
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e24e      	b.n	800633e <UART_SetConfig+0x7ae>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e24a      	b.n	800633e <UART_SetConfig+0x7ae>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e246      	b.n	800633e <UART_SetConfig+0x7ae>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e242      	b.n	800633e <UART_SetConfig+0x7ae>
 8005eb8:	cfff69f3 	.word	0xcfff69f3
 8005ebc:	58000c00 	.word	0x58000c00
 8005ec0:	11fff4ff 	.word	0x11fff4ff
 8005ec4:	40011000 	.word	0x40011000
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	40004400 	.word	0x40004400
 8005ed0:	40004800 	.word	0x40004800
 8005ed4:	40004c00 	.word	0x40004c00
 8005ed8:	40005000 	.word	0x40005000
 8005edc:	2320      	movs	r3, #32
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e22c      	b.n	800633e <UART_SetConfig+0x7ae>
 8005ee4:	2340      	movs	r3, #64	@ 0x40
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e228      	b.n	800633e <UART_SetConfig+0x7ae>
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e224      	b.n	800633e <UART_SetConfig+0x7ae>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4ab1      	ldr	r2, [pc, #708]	@ (80061c0 <UART_SetConfig+0x630>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d176      	bne.n	8005fec <UART_SetConfig+0x45c>
 8005efe:	4bb1      	ldr	r3, [pc, #708]	@ (80061c4 <UART_SetConfig+0x634>)
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f06:	2b28      	cmp	r3, #40	@ 0x28
 8005f08:	d86c      	bhi.n	8005fe4 <UART_SetConfig+0x454>
 8005f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <UART_SetConfig+0x380>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08005fe5 	.word	0x08005fe5
 8005f18:	08005fe5 	.word	0x08005fe5
 8005f1c:	08005fe5 	.word	0x08005fe5
 8005f20:	08005fe5 	.word	0x08005fe5
 8005f24:	08005fe5 	.word	0x08005fe5
 8005f28:	08005fe5 	.word	0x08005fe5
 8005f2c:	08005fe5 	.word	0x08005fe5
 8005f30:	08005fbd 	.word	0x08005fbd
 8005f34:	08005fe5 	.word	0x08005fe5
 8005f38:	08005fe5 	.word	0x08005fe5
 8005f3c:	08005fe5 	.word	0x08005fe5
 8005f40:	08005fe5 	.word	0x08005fe5
 8005f44:	08005fe5 	.word	0x08005fe5
 8005f48:	08005fe5 	.word	0x08005fe5
 8005f4c:	08005fe5 	.word	0x08005fe5
 8005f50:	08005fc5 	.word	0x08005fc5
 8005f54:	08005fe5 	.word	0x08005fe5
 8005f58:	08005fe5 	.word	0x08005fe5
 8005f5c:	08005fe5 	.word	0x08005fe5
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	08005fe5 	.word	0x08005fe5
 8005f68:	08005fe5 	.word	0x08005fe5
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005fe5 	.word	0x08005fe5
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fe5 	.word	0x08005fe5
 8005f9c:	08005fe5 	.word	0x08005fe5
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fe5 	.word	0x08005fe5
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fba:	e1c0      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc2:	e1bc      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fca:	e1b8      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e1b4      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e1b0      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fdc:	2340      	movs	r3, #64	@ 0x40
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e1ac      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e1a8      	b.n	800633e <UART_SetConfig+0x7ae>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a75      	ldr	r2, [pc, #468]	@ (80061c8 <UART_SetConfig+0x638>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d130      	bne.n	8006058 <UART_SetConfig+0x4c8>
 8005ff6:	4b73      	ldr	r3, [pc, #460]	@ (80061c4 <UART_SetConfig+0x634>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d826      	bhi.n	8006050 <UART_SetConfig+0x4c0>
 8006002:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x478>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006021 	.word	0x08006021
 800600c:	08006029 	.word	0x08006029
 8006010:	08006031 	.word	0x08006031
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e18a      	b.n	800633e <UART_SetConfig+0x7ae>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e186      	b.n	800633e <UART_SetConfig+0x7ae>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e182      	b.n	800633e <UART_SetConfig+0x7ae>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e17e      	b.n	800633e <UART_SetConfig+0x7ae>
 8006040:	2320      	movs	r3, #32
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e17a      	b.n	800633e <UART_SetConfig+0x7ae>
 8006048:	2340      	movs	r3, #64	@ 0x40
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e176      	b.n	800633e <UART_SetConfig+0x7ae>
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e172      	b.n	800633e <UART_SetConfig+0x7ae>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5b      	ldr	r2, [pc, #364]	@ (80061cc <UART_SetConfig+0x63c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d130      	bne.n	80060c4 <UART_SetConfig+0x534>
 8006062:	4b58      	ldr	r3, [pc, #352]	@ (80061c4 <UART_SetConfig+0x634>)
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b05      	cmp	r3, #5
 800606c:	d826      	bhi.n	80060bc <UART_SetConfig+0x52c>
 800606e:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <UART_SetConfig+0x4e4>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006095 	.word	0x08006095
 800607c:	0800609d 	.word	0x0800609d
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b5 	.word	0x080060b5
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006092:	e154      	b.n	800633e <UART_SetConfig+0x7ae>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609a:	e150      	b.n	800633e <UART_SetConfig+0x7ae>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a2:	e14c      	b.n	800633e <UART_SetConfig+0x7ae>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060aa:	e148      	b.n	800633e <UART_SetConfig+0x7ae>
 80060ac:	2320      	movs	r3, #32
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e144      	b.n	800633e <UART_SetConfig+0x7ae>
 80060b4:	2340      	movs	r3, #64	@ 0x40
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e140      	b.n	800633e <UART_SetConfig+0x7ae>
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e13c      	b.n	800633e <UART_SetConfig+0x7ae>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a41      	ldr	r2, [pc, #260]	@ (80061d0 <UART_SetConfig+0x640>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f040 8082 	bne.w	80061d4 <UART_SetConfig+0x644>
 80060d0:	4b3c      	ldr	r3, [pc, #240]	@ (80061c4 <UART_SetConfig+0x634>)
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d8:	2b28      	cmp	r3, #40	@ 0x28
 80060da:	d86d      	bhi.n	80061b8 <UART_SetConfig+0x628>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x554>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006189 	.word	0x08006189
 80060e8:	080061b9 	.word	0x080061b9
 80060ec:	080061b9 	.word	0x080061b9
 80060f0:	080061b9 	.word	0x080061b9
 80060f4:	080061b9 	.word	0x080061b9
 80060f8:	080061b9 	.word	0x080061b9
 80060fc:	080061b9 	.word	0x080061b9
 8006100:	080061b9 	.word	0x080061b9
 8006104:	08006191 	.word	0x08006191
 8006108:	080061b9 	.word	0x080061b9
 800610c:	080061b9 	.word	0x080061b9
 8006110:	080061b9 	.word	0x080061b9
 8006114:	080061b9 	.word	0x080061b9
 8006118:	080061b9 	.word	0x080061b9
 800611c:	080061b9 	.word	0x080061b9
 8006120:	080061b9 	.word	0x080061b9
 8006124:	08006199 	.word	0x08006199
 8006128:	080061b9 	.word	0x080061b9
 800612c:	080061b9 	.word	0x080061b9
 8006130:	080061b9 	.word	0x080061b9
 8006134:	080061b9 	.word	0x080061b9
 8006138:	080061b9 	.word	0x080061b9
 800613c:	080061b9 	.word	0x080061b9
 8006140:	080061b9 	.word	0x080061b9
 8006144:	080061a1 	.word	0x080061a1
 8006148:	080061b9 	.word	0x080061b9
 800614c:	080061b9 	.word	0x080061b9
 8006150:	080061b9 	.word	0x080061b9
 8006154:	080061b9 	.word	0x080061b9
 8006158:	080061b9 	.word	0x080061b9
 800615c:	080061b9 	.word	0x080061b9
 8006160:	080061b9 	.word	0x080061b9
 8006164:	080061a9 	.word	0x080061a9
 8006168:	080061b9 	.word	0x080061b9
 800616c:	080061b9 	.word	0x080061b9
 8006170:	080061b9 	.word	0x080061b9
 8006174:	080061b9 	.word	0x080061b9
 8006178:	080061b9 	.word	0x080061b9
 800617c:	080061b9 	.word	0x080061b9
 8006180:	080061b9 	.word	0x080061b9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e0d6      	b.n	800633e <UART_SetConfig+0x7ae>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e0d2      	b.n	800633e <UART_SetConfig+0x7ae>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e0ce      	b.n	800633e <UART_SetConfig+0x7ae>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e0ca      	b.n	800633e <UART_SetConfig+0x7ae>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e0c6      	b.n	800633e <UART_SetConfig+0x7ae>
 80061b0:	2340      	movs	r3, #64	@ 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b6:	e0c2      	b.n	800633e <UART_SetConfig+0x7ae>
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061be:	e0be      	b.n	800633e <UART_SetConfig+0x7ae>
 80061c0:	40011400 	.word	0x40011400
 80061c4:	58024400 	.word	0x58024400
 80061c8:	40007800 	.word	0x40007800
 80061cc:	40007c00 	.word	0x40007c00
 80061d0:	40011800 	.word	0x40011800
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4aad      	ldr	r2, [pc, #692]	@ (8006490 <UART_SetConfig+0x900>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d176      	bne.n	80062cc <UART_SetConfig+0x73c>
 80061de:	4bad      	ldr	r3, [pc, #692]	@ (8006494 <UART_SetConfig+0x904>)
 80061e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061e6:	2b28      	cmp	r3, #40	@ 0x28
 80061e8:	d86c      	bhi.n	80062c4 <UART_SetConfig+0x734>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <UART_SetConfig+0x660>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006295 	.word	0x08006295
 80061f4:	080062c5 	.word	0x080062c5
 80061f8:	080062c5 	.word	0x080062c5
 80061fc:	080062c5 	.word	0x080062c5
 8006200:	080062c5 	.word	0x080062c5
 8006204:	080062c5 	.word	0x080062c5
 8006208:	080062c5 	.word	0x080062c5
 800620c:	080062c5 	.word	0x080062c5
 8006210:	0800629d 	.word	0x0800629d
 8006214:	080062c5 	.word	0x080062c5
 8006218:	080062c5 	.word	0x080062c5
 800621c:	080062c5 	.word	0x080062c5
 8006220:	080062c5 	.word	0x080062c5
 8006224:	080062c5 	.word	0x080062c5
 8006228:	080062c5 	.word	0x080062c5
 800622c:	080062c5 	.word	0x080062c5
 8006230:	080062a5 	.word	0x080062a5
 8006234:	080062c5 	.word	0x080062c5
 8006238:	080062c5 	.word	0x080062c5
 800623c:	080062c5 	.word	0x080062c5
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062c5 	.word	0x080062c5
 8006248:	080062c5 	.word	0x080062c5
 800624c:	080062c5 	.word	0x080062c5
 8006250:	080062ad 	.word	0x080062ad
 8006254:	080062c5 	.word	0x080062c5
 8006258:	080062c5 	.word	0x080062c5
 800625c:	080062c5 	.word	0x080062c5
 8006260:	080062c5 	.word	0x080062c5
 8006264:	080062c5 	.word	0x080062c5
 8006268:	080062c5 	.word	0x080062c5
 800626c:	080062c5 	.word	0x080062c5
 8006270:	080062b5 	.word	0x080062b5
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062c5 	.word	0x080062c5
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	2301      	movs	r3, #1
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e050      	b.n	800633e <UART_SetConfig+0x7ae>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e04c      	b.n	800633e <UART_SetConfig+0x7ae>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e048      	b.n	800633e <UART_SetConfig+0x7ae>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e044      	b.n	800633e <UART_SetConfig+0x7ae>
 80062b4:	2320      	movs	r3, #32
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e040      	b.n	800633e <UART_SetConfig+0x7ae>
 80062bc:	2340      	movs	r3, #64	@ 0x40
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e03c      	b.n	800633e <UART_SetConfig+0x7ae>
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e038      	b.n	800633e <UART_SetConfig+0x7ae>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a71      	ldr	r2, [pc, #452]	@ (8006498 <UART_SetConfig+0x908>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d130      	bne.n	8006338 <UART_SetConfig+0x7a8>
 80062d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <UART_SetConfig+0x904>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d826      	bhi.n	8006330 <UART_SetConfig+0x7a0>
 80062e2:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <UART_SetConfig+0x758>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006309 	.word	0x08006309
 80062f0:	08006311 	.word	0x08006311
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	2302      	movs	r3, #2
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e01a      	b.n	800633e <UART_SetConfig+0x7ae>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e016      	b.n	800633e <UART_SetConfig+0x7ae>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e012      	b.n	800633e <UART_SetConfig+0x7ae>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e00e      	b.n	800633e <UART_SetConfig+0x7ae>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e00a      	b.n	800633e <UART_SetConfig+0x7ae>
 8006328:	2340      	movs	r3, #64	@ 0x40
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e006      	b.n	800633e <UART_SetConfig+0x7ae>
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e002      	b.n	800633e <UART_SetConfig+0x7ae>
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a55      	ldr	r2, [pc, #340]	@ (8006498 <UART_SetConfig+0x908>)
 8006344:	4293      	cmp	r3, r2
 8006346:	f040 80f8 	bne.w	800653a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800634a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800634e:	2b20      	cmp	r3, #32
 8006350:	dc46      	bgt.n	80063e0 <UART_SetConfig+0x850>
 8006352:	2b02      	cmp	r3, #2
 8006354:	db75      	blt.n	8006442 <UART_SetConfig+0x8b2>
 8006356:	3b02      	subs	r3, #2
 8006358:	2b1e      	cmp	r3, #30
 800635a:	d872      	bhi.n	8006442 <UART_SetConfig+0x8b2>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <UART_SetConfig+0x7d4>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	080063e7 	.word	0x080063e7
 8006368:	08006443 	.word	0x08006443
 800636c:	080063ef 	.word	0x080063ef
 8006370:	08006443 	.word	0x08006443
 8006374:	08006443 	.word	0x08006443
 8006378:	08006443 	.word	0x08006443
 800637c:	080063ff 	.word	0x080063ff
 8006380:	08006443 	.word	0x08006443
 8006384:	08006443 	.word	0x08006443
 8006388:	08006443 	.word	0x08006443
 800638c:	08006443 	.word	0x08006443
 8006390:	08006443 	.word	0x08006443
 8006394:	08006443 	.word	0x08006443
 8006398:	08006443 	.word	0x08006443
 800639c:	0800640f 	.word	0x0800640f
 80063a0:	08006443 	.word	0x08006443
 80063a4:	08006443 	.word	0x08006443
 80063a8:	08006443 	.word	0x08006443
 80063ac:	08006443 	.word	0x08006443
 80063b0:	08006443 	.word	0x08006443
 80063b4:	08006443 	.word	0x08006443
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006443 	.word	0x08006443
 80063c0:	08006443 	.word	0x08006443
 80063c4:	08006443 	.word	0x08006443
 80063c8:	08006443 	.word	0x08006443
 80063cc:	08006443 	.word	0x08006443
 80063d0:	08006443 	.word	0x08006443
 80063d4:	08006443 	.word	0x08006443
 80063d8:	08006443 	.word	0x08006443
 80063dc:	08006435 	.word	0x08006435
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d02a      	beq.n	800643a <UART_SetConfig+0x8aa>
 80063e4:	e02d      	b.n	8006442 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063e6:	f7fe fa91 	bl	800490c <HAL_RCCEx_GetD3PCLK1Freq>
 80063ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063ec:	e02f      	b.n	800644e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe faa0 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fc:	e027      	b.n	800644e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fe:	f107 0318 	add.w	r3, r7, #24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fbec 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640c:	e01f      	b.n	800644e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640e:	4b21      	ldr	r3, [pc, #132]	@ (8006494 <UART_SetConfig+0x904>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800641a:	4b1e      	ldr	r3, [pc, #120]	@ (8006494 <UART_SetConfig+0x904>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <UART_SetConfig+0x90c>)
 8006426:	fa22 f303 	lsr.w	r3, r2, r3
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800642c:	e00f      	b.n	800644e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800642e:	4b1b      	ldr	r3, [pc, #108]	@ (800649c <UART_SetConfig+0x90c>)
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006432:	e00c      	b.n	800644e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006434:	4b1a      	ldr	r3, [pc, #104]	@ (80064a0 <UART_SetConfig+0x910>)
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006440:	e005      	b.n	800644e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800644c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800644e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 81ee 	beq.w	8006832 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	4a12      	ldr	r2, [pc, #72]	@ (80064a4 <UART_SetConfig+0x914>)
 800645c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006460:	461a      	mov	r2, r3
 8006462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006464:	fbb3 f3f2 	udiv	r3, r3, r2
 8006468:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006476:	429a      	cmp	r2, r3
 8006478:	d305      	bcc.n	8006486 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006482:	429a      	cmp	r2, r3
 8006484:	d910      	bls.n	80064a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800648c:	e1d1      	b.n	8006832 <UART_SetConfig+0xca2>
 800648e:	bf00      	nop
 8006490:	40011c00 	.word	0x40011c00
 8006494:	58024400 	.word	0x58024400
 8006498:	58000c00 	.word	0x58000c00
 800649c:	03d09000 	.word	0x03d09000
 80064a0:	003d0900 	.word	0x003d0900
 80064a4:	08009f78 	.word	0x08009f78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064aa:	2200      	movs	r2, #0
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	60fa      	str	r2, [r7, #12]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	4ac0      	ldr	r2, [pc, #768]	@ (80067b8 <UART_SetConfig+0xc28>)
 80064b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2200      	movs	r2, #0
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064ca:	f7f9 ff79 	bl	80003c0 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	020b      	lsls	r3, r1, #8
 80064e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064e4:	0202      	lsls	r2, r0, #8
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	6849      	ldr	r1, [r1, #4]
 80064ea:	0849      	lsrs	r1, r1, #1
 80064ec:	2000      	movs	r0, #0
 80064ee:	460c      	mov	r4, r1
 80064f0:	4605      	mov	r5, r0
 80064f2:	eb12 0804 	adds.w	r8, r2, r4
 80064f6:	eb43 0905 	adc.w	r9, r3, r5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	469a      	mov	sl, r3
 8006502:	4693      	mov	fp, r2
 8006504:	4652      	mov	r2, sl
 8006506:	465b      	mov	r3, fp
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7f9 ff58 	bl	80003c0 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4613      	mov	r3, r2
 8006516:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800651e:	d308      	bcc.n	8006532 <UART_SetConfig+0x9a2>
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006526:	d204      	bcs.n	8006532 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e17f      	b.n	8006832 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006538:	e17b      	b.n	8006832 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006542:	f040 80bd 	bne.w	80066c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006546:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800654a:	2b20      	cmp	r3, #32
 800654c:	dc48      	bgt.n	80065e0 <UART_SetConfig+0xa50>
 800654e:	2b00      	cmp	r3, #0
 8006550:	db7b      	blt.n	800664a <UART_SetConfig+0xaba>
 8006552:	2b20      	cmp	r3, #32
 8006554:	d879      	bhi.n	800664a <UART_SetConfig+0xaba>
 8006556:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <UART_SetConfig+0x9cc>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	080065e7 	.word	0x080065e7
 8006560:	080065ef 	.word	0x080065ef
 8006564:	0800664b 	.word	0x0800664b
 8006568:	0800664b 	.word	0x0800664b
 800656c:	080065f7 	.word	0x080065f7
 8006570:	0800664b 	.word	0x0800664b
 8006574:	0800664b 	.word	0x0800664b
 8006578:	0800664b 	.word	0x0800664b
 800657c:	08006607 	.word	0x08006607
 8006580:	0800664b 	.word	0x0800664b
 8006584:	0800664b 	.word	0x0800664b
 8006588:	0800664b 	.word	0x0800664b
 800658c:	0800664b 	.word	0x0800664b
 8006590:	0800664b 	.word	0x0800664b
 8006594:	0800664b 	.word	0x0800664b
 8006598:	0800664b 	.word	0x0800664b
 800659c:	08006617 	.word	0x08006617
 80065a0:	0800664b 	.word	0x0800664b
 80065a4:	0800664b 	.word	0x0800664b
 80065a8:	0800664b 	.word	0x0800664b
 80065ac:	0800664b 	.word	0x0800664b
 80065b0:	0800664b 	.word	0x0800664b
 80065b4:	0800664b 	.word	0x0800664b
 80065b8:	0800664b 	.word	0x0800664b
 80065bc:	0800664b 	.word	0x0800664b
 80065c0:	0800664b 	.word	0x0800664b
 80065c4:	0800664b 	.word	0x0800664b
 80065c8:	0800664b 	.word	0x0800664b
 80065cc:	0800664b 	.word	0x0800664b
 80065d0:	0800664b 	.word	0x0800664b
 80065d4:	0800664b 	.word	0x0800664b
 80065d8:	0800664b 	.word	0x0800664b
 80065dc:	0800663d 	.word	0x0800663d
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d02e      	beq.n	8006642 <UART_SetConfig+0xab2>
 80065e4:	e031      	b.n	800664a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fc ffc5 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 80065ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065ec:	e033      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ee:	f7fc ffd7 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 80065f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065f4:	e02f      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f99c 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006604:	e027      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006606:	f107 0318 	add.w	r3, r7, #24
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fae8 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	e01f      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006616:	4b69      	ldr	r3, [pc, #420]	@ (80067bc <UART_SetConfig+0xc2c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006622:	4b66      	ldr	r3, [pc, #408]	@ (80067bc <UART_SetConfig+0xc2c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	08db      	lsrs	r3, r3, #3
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	4a64      	ldr	r2, [pc, #400]	@ (80067c0 <UART_SetConfig+0xc30>)
 800662e:	fa22 f303 	lsr.w	r3, r2, r3
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006634:	e00f      	b.n	8006656 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006636:	4b62      	ldr	r3, [pc, #392]	@ (80067c0 <UART_SetConfig+0xc30>)
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663a:	e00c      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800663c:	4b61      	ldr	r3, [pc, #388]	@ (80067c4 <UART_SetConfig+0xc34>)
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006640:	e009      	b.n	8006656 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006648:	e005      	b.n	8006656 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80ea 	beq.w	8006832 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006662:	4a55      	ldr	r2, [pc, #340]	@ (80067b8 <UART_SetConfig+0xc28>)
 8006664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006668:	461a      	mov	r2, r3
 800666a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006670:	005a      	lsls	r2, r3, #1
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	2b0f      	cmp	r3, #15
 8006688:	d916      	bls.n	80066b8 <UART_SetConfig+0xb28>
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006690:	d212      	bcs.n	80066b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	b29b      	uxth	r3, r3
 8006696:	f023 030f 	bic.w	r3, r3, #15
 800669a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066aa:	4313      	orrs	r3, r2
 80066ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	e0bc      	b.n	8006832 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066be:	e0b8      	b.n	8006832 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	dc4b      	bgt.n	8006760 <UART_SetConfig+0xbd0>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f2c0 8087 	blt.w	80067dc <UART_SetConfig+0xc4c>
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	f200 8084 	bhi.w	80067dc <UART_SetConfig+0xc4c>
 80066d4:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <UART_SetConfig+0xb4c>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006767 	.word	0x08006767
 80066e0:	0800676f 	.word	0x0800676f
 80066e4:	080067dd 	.word	0x080067dd
 80066e8:	080067dd 	.word	0x080067dd
 80066ec:	08006777 	.word	0x08006777
 80066f0:	080067dd 	.word	0x080067dd
 80066f4:	080067dd 	.word	0x080067dd
 80066f8:	080067dd 	.word	0x080067dd
 80066fc:	08006787 	.word	0x08006787
 8006700:	080067dd 	.word	0x080067dd
 8006704:	080067dd 	.word	0x080067dd
 8006708:	080067dd 	.word	0x080067dd
 800670c:	080067dd 	.word	0x080067dd
 8006710:	080067dd 	.word	0x080067dd
 8006714:	080067dd 	.word	0x080067dd
 8006718:	080067dd 	.word	0x080067dd
 800671c:	08006797 	.word	0x08006797
 8006720:	080067dd 	.word	0x080067dd
 8006724:	080067dd 	.word	0x080067dd
 8006728:	080067dd 	.word	0x080067dd
 800672c:	080067dd 	.word	0x080067dd
 8006730:	080067dd 	.word	0x080067dd
 8006734:	080067dd 	.word	0x080067dd
 8006738:	080067dd 	.word	0x080067dd
 800673c:	080067dd 	.word	0x080067dd
 8006740:	080067dd 	.word	0x080067dd
 8006744:	080067dd 	.word	0x080067dd
 8006748:	080067dd 	.word	0x080067dd
 800674c:	080067dd 	.word	0x080067dd
 8006750:	080067dd 	.word	0x080067dd
 8006754:	080067dd 	.word	0x080067dd
 8006758:	080067dd 	.word	0x080067dd
 800675c:	080067cf 	.word	0x080067cf
 8006760:	2b40      	cmp	r3, #64	@ 0x40
 8006762:	d037      	beq.n	80067d4 <UART_SetConfig+0xc44>
 8006764:	e03a      	b.n	80067dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006766:	f7fc ff05 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 800676a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800676c:	e03c      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676e:	f7fc ff17 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8006772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006774:	e038      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f8dc 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006784:	e030      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fa28 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006794:	e028      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006796:	4b09      	ldr	r3, [pc, #36]	@ (80067bc <UART_SetConfig+0xc2c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d012      	beq.n	80067c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067a2:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <UART_SetConfig+0xc2c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <UART_SetConfig+0xc30>)
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b4:	e018      	b.n	80067e8 <UART_SetConfig+0xc58>
 80067b6:	bf00      	nop
 80067b8:	08009f78 	.word	0x08009f78
 80067bc:	58024400 	.word	0x58024400
 80067c0:	03d09000 	.word	0x03d09000
 80067c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b24      	ldr	r3, [pc, #144]	@ (800685c <UART_SetConfig+0xccc>)
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067cc:	e00c      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067ce:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <UART_SetConfig+0xcd0>)
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d2:	e009      	b.n	80067e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067da:	e005      	b.n	80067e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067e6:	bf00      	nop
    }

    if (pclk != 0U)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d021      	beq.n	8006832 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <UART_SetConfig+0xcd4>)
 80067f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	441a      	add	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d909      	bls.n	800682c <UART_SetConfig+0xc9c>
 8006818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	d205      	bcs.n	800682c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	b29a      	uxth	r2, r3
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	e002      	b.n	8006832 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2201      	movs	r2, #1
 8006836:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2201      	movs	r2, #1
 800683e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800684e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006852:	4618      	mov	r0, r3
 8006854:	3748      	adds	r7, #72	@ 0x48
 8006856:	46bd      	mov	sp, r7
 8006858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685c:	03d09000 	.word	0x03d09000
 8006860:	003d0900 	.word	0x003d0900
 8006864:	08009f78 	.word	0x08009f78

08006868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01a      	beq.n	800697e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006966:	d10a      	bne.n	800697e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b098      	sub	sp, #96	@ 0x60
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069bc:	f7fa fd48 	bl	8001450 <HAL_GetTick>
 80069c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d12f      	bne.n	8006a30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d8:	2200      	movs	r2, #0
 80069da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f88e 	bl	8006b00 <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d022      	beq.n	8006a30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e063      	b.n	8006af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d149      	bne.n	8006ad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a46:	2200      	movs	r2, #0
 8006a48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f857 	bl	8006b00 <UART_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d03c      	beq.n	8006ad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	623b      	str	r3, [r7, #32]
   return(result);
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e6      	bne.n	8006a58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aaa:	61fa      	str	r2, [r7, #28]
 8006aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e012      	b.n	8006af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3758      	adds	r7, #88	@ 0x58
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b10:	e04f      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d04b      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1a:	f7fa fc99 	bl	8001450 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d302      	bcc.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e04e      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d037      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b80      	cmp	r3, #128	@ 0x80
 8006b46:	d034      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b40      	cmp	r3, #64	@ 0x40
 8006b4c:	d031      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d110      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2208      	movs	r2, #8
 8006b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f95b 	bl	8006e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e029      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b8c:	d111      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f941 	bl	8006e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e00f      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d0a0      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b0a3      	sub	sp, #140	@ 0x8c
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	88fa      	ldrh	r2, [r7, #6]
 8006bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0e:	d10e      	bne.n	8006c2e <UART_Start_Receive_IT+0x52>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <UART_Start_Receive_IT+0x48>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c22:	e02d      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	22ff      	movs	r2, #255	@ 0xff
 8006c28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c2c:	e028      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <UART_Start_Receive_IT+0x76>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <UART_Start_Receive_IT+0x6c>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22ff      	movs	r2, #255	@ 0xff
 8006c42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c46:	e01b      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	227f      	movs	r2, #127	@ 0x7f
 8006c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c50:	e016      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c5a:	d10d      	bne.n	8006c78 <UART_Start_Receive_IT+0x9c>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <UART_Start_Receive_IT+0x92>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	227f      	movs	r2, #127	@ 0x7f
 8006c68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c6c:	e008      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	223f      	movs	r2, #63	@ 0x3f
 8006c72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c76:	e003      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2222      	movs	r2, #34	@ 0x22
 8006c8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006cb4:	673a      	str	r2, [r7, #112]	@ 0x70
 8006cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006cba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e3      	bne.n	8006c90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd0:	d14f      	bne.n	8006d72 <UART_Start_Receive_IT+0x196>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d349      	bcc.n	8006d72 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce6:	d107      	bne.n	8006cf8 <UART_Start_Receive_IT+0x11c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a47      	ldr	r2, [pc, #284]	@ (8006e10 <UART_Start_Receive_IT+0x234>)
 8006cf4:	675a      	str	r2, [r3, #116]	@ 0x74
 8006cf6:	e002      	b.n	8006cfe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a46      	ldr	r2, [pc, #280]	@ (8006e14 <UART_Start_Receive_IT+0x238>)
 8006cfc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01a      	beq.n	8006d3c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d2a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e4      	bne.n	8006d06 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006d5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_Start_Receive_IT+0x160>
 8006d70:	e046      	b.n	8006e00 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d7a:	d107      	bne.n	8006d8c <UART_Start_Receive_IT+0x1b0>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4a24      	ldr	r2, [pc, #144]	@ (8006e18 <UART_Start_Receive_IT+0x23c>)
 8006d88:	675a      	str	r2, [r3, #116]	@ 0x74
 8006d8a:	e002      	b.n	8006d92 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a23      	ldr	r2, [pc, #140]	@ (8006e1c <UART_Start_Receive_IT+0x240>)
 8006d90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d019      	beq.n	8006dce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006dae:	677b      	str	r3, [r7, #116]	@ 0x74
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e6      	bne.n	8006d9a <UART_Start_Receive_IT+0x1be>
 8006dcc:	e018      	b.n	8006e00 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	613b      	str	r3, [r7, #16]
   return(result);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f043 0320 	orr.w	r3, r3, #32
 8006de2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	69f9      	ldr	r1, [r7, #28]
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	378c      	adds	r7, #140	@ 0x8c
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	0800763d 	.word	0x0800763d
 8006e14:	080072d9 	.word	0x080072d9
 8006e18:	08007121 	.word	0x08007121
 8006e1c:	08006f69 	.word	0x08006f69

08006e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b095      	sub	sp, #84	@ 0x54
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee8 <UART_EndRxTransfer+0xc8>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d118      	bne.n	8006ec8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0310 	bic.w	r3, r3, #16
 8006eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e6      	bne.n	8006e96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006edc:	bf00      	nop
 8006ede:	3754      	adds	r7, #84	@ 0x54
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	effffffe 	.word	0xeffffffe

08006eec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7fe fe2e 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6979      	ldr	r1, [r7, #20]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	613b      	str	r3, [r7, #16]
   return(result);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e6      	bne.n	8006f18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fe fdf9 	bl	8005b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5e:	bf00      	nop
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b09c      	sub	sp, #112	@ 0x70
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f80:	2b22      	cmp	r3, #34	@ 0x22
 8006f82:	f040 80be 	bne.w	8007102 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f94:	b2d9      	uxtb	r1, r3
 8006f96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	400a      	ands	r2, r1
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 80a1 	bne.w	8007112 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ff4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	667b      	str	r3, [r7, #100]	@ 0x64
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007022:	647a      	str	r2, [r7, #68]	@ 0x44
 8007024:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a33      	ldr	r2, [pc, #204]	@ (800711c <UART_RxISR_8BIT+0x1b4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01f      	beq.n	8007094 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d018      	beq.n	8007094 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	623b      	str	r3, [r7, #32]
   return(result);
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007076:	663b      	str	r3, [r7, #96]	@ 0x60
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007080:	633b      	str	r3, [r7, #48]	@ 0x30
 8007082:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d12e      	bne.n	80070fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0310 	bic.w	r3, r3, #16
 80070b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d103      	bne.n	80070ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2210      	movs	r2, #16
 80070e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fe fd40 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070f8:	e00b      	b.n	8007112 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7f9 fce2 	bl	8000ac4 <HAL_UART_RxCpltCallback>
}
 8007100:	e007      	b.n	8007112 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0208 	orr.w	r2, r2, #8
 8007110:	619a      	str	r2, [r3, #24]
}
 8007112:	bf00      	nop
 8007114:	3770      	adds	r7, #112	@ 0x70
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	58000c00 	.word	0x58000c00

08007120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b09c      	sub	sp, #112	@ 0x70
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800712e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007138:	2b22      	cmp	r3, #34	@ 0x22
 800713a:	f040 80be 	bne.w	80072ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007144:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800714e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007156:	4013      	ands	r3, r2
 8007158:	b29a      	uxth	r2, r3
 800715a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800715c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007162:	1c9a      	adds	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 80a1 	bne.w	80072ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800719c:	667b      	str	r3, [r7, #100]	@ 0x64
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80071a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80071b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e6      	bne.n	8007188 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071da:	643a      	str	r2, [r7, #64]	@ 0x40
 80071dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e5      	bne.n	80071ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a33      	ldr	r2, [pc, #204]	@ (80072d4 <UART_RxISR_16BIT+0x1b4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01f      	beq.n	800724c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d018      	beq.n	800724c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	61fb      	str	r3, [r7, #28]
   return(result);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800722e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800723a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800723e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e6      	bne.n	800721a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d12e      	bne.n	80072b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	60bb      	str	r3, [r7, #8]
   return(result);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f023 0310 	bic.w	r3, r3, #16
 800726e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b10      	cmp	r3, #16
 8007298:	d103      	bne.n	80072a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2210      	movs	r2, #16
 80072a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fe fc64 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072b0:	e00b      	b.n	80072ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7f9 fc06 	bl	8000ac4 <HAL_UART_RxCpltCallback>
}
 80072b8:	e007      	b.n	80072ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699a      	ldr	r2, [r3, #24]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0208 	orr.w	r2, r2, #8
 80072c8:	619a      	str	r2, [r3, #24]
}
 80072ca:	bf00      	nop
 80072cc:	3770      	adds	r7, #112	@ 0x70
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	58000c00 	.word	0x58000c00

080072d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b0ac      	sub	sp, #176	@ 0xb0
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80072e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800730e:	2b22      	cmp	r3, #34	@ 0x22
 8007310:	f040 8181 	bne.w	8007616 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800731a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800731e:	e124      	b.n	800756a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007326:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800732a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800732e:	b2d9      	uxtb	r1, r3
 8007330:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007334:	b2da      	uxtb	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733a:	400a      	ands	r2, r1
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	2b00      	cmp	r3, #0
 8007370:	d053      	beq.n	800741a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d011      	beq.n	80073a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800737e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2201      	movs	r2, #1
 8007390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007398:	f043 0201 	orr.w	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d011      	beq.n	80073d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80073ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2202      	movs	r2, #2
 80073c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c8:	f043 0204 	orr.w	r2, r3, #4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d011      	beq.n	8007402 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80073de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2204      	movs	r2, #4
 80073f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	f043 0202 	orr.w	r2, r3, #2
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe fba9 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 80a1 	bne.w	800756a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800743c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800744a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800744c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007450:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e4      	bne.n	8007428 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3308      	adds	r3, #8
 8007464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800746e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007470:	4b6f      	ldr	r3, [pc, #444]	@ (8007630 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007472:	4013      	ands	r3, r2
 8007474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3308      	adds	r3, #8
 800747e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007482:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007484:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007488:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e3      	bne.n	800745e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a61      	ldr	r2, [pc, #388]	@ (8007634 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d021      	beq.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01a      	beq.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80074e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e4      	bne.n	80074c2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d130      	bne.n	8007562 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007528:	643b      	str	r3, [r7, #64]	@ 0x40
 800752a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800752e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e4      	bne.n	8007506 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f003 0310 	and.w	r3, r3, #16
 8007546:	2b10      	cmp	r3, #16
 8007548:	d103      	bne.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2210      	movs	r2, #16
 8007550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fe fb0c 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007560:	e00e      	b.n	8007580 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7f9 faae 	bl	8000ac4 <HAL_UART_RxCpltCallback>
        break;
 8007568:	e00a      	b.n	8007580 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800756a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8007572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	f47f aed0 	bne.w	8007320 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007586:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800758a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800758e:	2b00      	cmp	r3, #0
 8007590:	d049      	beq.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007598:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800759c:	429a      	cmp	r2, r3
 800759e:	d242      	bcs.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3308      	adds	r3, #8
 80075a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80075c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e3      	bne.n	80075a0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a17      	ldr	r2, [pc, #92]	@ (8007638 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80075dc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f043 0320 	orr.w	r3, r3, #32
 80075f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6979      	ldr	r1, [r7, #20]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	613b      	str	r3, [r7, #16]
   return(result);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e4      	bne.n	80075de <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007614:	e007      	b.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0208 	orr.w	r2, r2, #8
 8007624:	619a      	str	r2, [r3, #24]
}
 8007626:	bf00      	nop
 8007628:	37b0      	adds	r7, #176	@ 0xb0
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	effffffe 	.word	0xeffffffe
 8007634:	58000c00 	.word	0x58000c00
 8007638:	08006f69 	.word	0x08006f69

0800763c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0ae      	sub	sp, #184	@ 0xb8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800764a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007672:	2b22      	cmp	r3, #34	@ 0x22
 8007674:	f040 8185 	bne.w	8007982 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800767e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007682:	e128      	b.n	80078d6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007696:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800769a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800769e:	4013      	ands	r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ac:	1c9a      	adds	r2, r3, #2
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d053      	beq.n	8007782 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d011      	beq.n	800770a <UART_RxISR_16BIT_FIFOEN+0xce>
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800770a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d011      	beq.n	800773a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2202      	movs	r2, #2
 8007728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800773a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d011      	beq.n	800776a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2204      	movs	r2, #4
 8007758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007760:	f043 0202 	orr.w	r2, r3, #2
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007770:	2b00      	cmp	r3, #0
 8007772:	d006      	beq.n	8007782 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fe f9f5 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 80a3 	bne.w	80078d6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800779e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e2      	bne.n	8007790 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077dc:	4b6f      	ldr	r3, [pc, #444]	@ (800799c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80077de:	4013      	ands	r3, r2
 80077e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80077ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e3      	bne.n	80077ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a61      	ldr	r2, [pc, #388]	@ (80079a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d021      	beq.n	8007864 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01a      	beq.n	8007864 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800783c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800783e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007852:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800785e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e4      	bne.n	800782e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d130      	bne.n	80078ce <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007894:	647b      	str	r3, [r7, #68]	@ 0x44
 8007896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800789a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e4      	bne.n	8007872 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b10      	cmp	r3, #16
 80078b4:	d103      	bne.n	80078be <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2210      	movs	r2, #16
 80078bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe f956 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80078cc:	e00e      	b.n	80078ec <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7f9 f8f8 	bl	8000ac4 <HAL_UART_RxCpltCallback>
        break;
 80078d4:	e00a      	b.n	80078ec <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d006      	beq.n	80078ec <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80078de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f47f aecc 	bne.w	8007684 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d049      	beq.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x356>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007904:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007908:	429a      	cmp	r2, r3
 800790a:	d242      	bcs.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	623b      	str	r3, [r7, #32]
   return(result);
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007930:	633a      	str	r2, [r7, #48]	@ 0x30
 8007932:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e3      	bne.n	800790c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a17      	ldr	r2, [pc, #92]	@ (80079a4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007948:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	60fb      	str	r3, [r7, #12]
   return(result);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f043 0320 	orr.w	r3, r3, #32
 800795e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007980:	e007      	b.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699a      	ldr	r2, [r3, #24]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0208 	orr.w	r2, r2, #8
 8007990:	619a      	str	r2, [r3, #24]
}
 8007992:	bf00      	nop
 8007994:	37b8      	adds	r7, #184	@ 0xb8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	effffffe 	.word	0xeffffffe
 80079a0:	58000c00 	.word	0x58000c00
 80079a4:	08007121 	.word	0x08007121

080079a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UARTEx_DisableFifoMode+0x16>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e027      	b.n	8007a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2224      	movs	r2, #36	@ 0x24
 8007a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e02d      	b.n	8007aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2224      	movs	r2, #36	@ 0x24
 8007a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f850 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e02d      	b.n	8007b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2224      	movs	r2, #36	@ 0x24
 8007af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f812 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b70:	e031      	b.n	8007bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b72:	2310      	movs	r3, #16
 8007b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b76:	2310      	movs	r3, #16
 8007b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	0e5b      	lsrs	r3, r3, #25
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	0f5b      	lsrs	r3, r3, #29
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	7b3a      	ldrb	r2, [r7, #12]
 8007b9e:	4911      	ldr	r1, [pc, #68]	@ (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba6:	7b3a      	ldrb	r2, [r7, #12]
 8007ba8:	490f      	ldr	r1, [pc, #60]	@ (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	7b7a      	ldrb	r2, [r7, #13]
 8007bbc:	4909      	ldr	r1, [pc, #36]	@ (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007bbe:	5c8a      	ldrb	r2, [r1, r2]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc4:	7b7a      	ldrb	r2, [r7, #13]
 8007bc6:	4908      	ldr	r1, [pc, #32]	@ (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	08009f90 	.word	0x08009f90
 8007be8:	08009f98 	.word	0x08009f98

08007bec <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e03c      	b.n	8007c78 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7f9 f84a 	bl	8000cac <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fa37 	bl	80080a4 <USART_SetConfig>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e01b      	b.n	8007c78 <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c4e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c5e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 ff89 	bl	8008b88 <USART_CheckIdleState>
 8007c76:	4603      	mov	r3, r0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	f642 030f 	movw	r3, #10255	@ 0x280f
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d118      	bne.n	8007ce2 <HAL_USART_IRQHandler+0x62>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d013      	beq.n	8007ce2 <HAL_USART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_USART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_USART_IRQHandler+0x62>
    {
      if (husart->RxISR != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8156 	beq.w	8007f84 <HAL_USART_IRQHandler+0x304>
      {
        husart->RxISR(husart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
      }
      return;
 8007ce0:	e150      	b.n	8007f84 <HAL_USART_IRQHandler+0x304>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8109 	beq.w	8007efc <HAL_USART_IRQHandler+0x27c>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4b96      	ldr	r3, [pc, #600]	@ (8007f48 <HAL_USART_IRQHandler+0x2c8>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <HAL_USART_IRQHandler+0x80>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80fe 	beq.w	8007efc <HAL_USART_IRQHandler+0x27c>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00e      	beq.n	8007d28 <HAL_USART_IRQHandler+0xa8>
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d009      	beq.n	8007d28 <HAL_USART_IRQHandler+0xa8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d20:	f043 0201 	orr.w	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <HAL_USART_IRQHandler+0xd0>
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <HAL_USART_IRQHandler+0xd0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2202      	movs	r2, #2
 8007d42:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d48:	f043 0204 	orr.w	r2, r3, #4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00e      	beq.n	8007d78 <HAL_USART_IRQHandler+0xf8>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_USART_IRQHandler+0xf8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d70:	f043 0202 	orr.w	r2, r3, #2
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d013      	beq.n	8007daa <HAL_USART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <HAL_USART_IRQHandler+0x116>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8007f48 <HAL_USART_IRQHandler+0x2c8>)
 8007d90:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_USART_IRQHandler+0x12a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da2:	f043 0208 	orr.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00f      	beq.n	8007dd4 <HAL_USART_IRQHandler+0x154>
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_USART_IRQHandler+0x154>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dc6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01b      	beq.n	8007e16 <HAL_USART_IRQHandler+0x196>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <HAL_USART_IRQHandler+0x196>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b22      	cmp	r3, #34	@ 0x22
 8007df2:	d105      	bne.n	8007e00 <HAL_USART_IRQHandler+0x180>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007dfc:	621a      	str	r2, [r3, #32]
        return;
 8007dfe:	e0c6      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007e08:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0e:	f043 0220 	orr.w	r2, r3, #32
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80b4 	beq.w	8007f88 <HAL_USART_IRQHandler+0x308>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <HAL_USART_IRQHandler+0x1ce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <HAL_USART_IRQHandler+0x1be>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <HAL_USART_IRQHandler+0x1ce>
      {
        if (husart->RxISR != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_USART_IRQHandler+0x1ce>
        {
          husart->RxISR(husart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e62:	2b40      	cmp	r3, #64	@ 0x40
 8007e64:	d002      	beq.n	8007e6c <HAL_USART_IRQHandler+0x1ec>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d03e      	beq.n	8007eea <HAL_USART_IRQHandler+0x26a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8af 	bl	8007fd0 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7c:	2b40      	cmp	r3, #64	@ 0x40
 8007e7e:	d130      	bne.n	8007ee2 <HAL_USART_IRQHandler+0x262>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e8e:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_USART_IRQHandler+0x22a>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7f9 ff85 	bl	8001db4 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d013      	beq.n	8007eda <HAL_USART_IRQHandler+0x25a>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb6:	4a25      	ldr	r2, [pc, #148]	@ (8007f4c <HAL_USART_IRQHandler+0x2cc>)
 8007eb8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7f9 ff78 	bl	8001db4 <HAL_DMA_Abort_IT>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d016      	beq.n	8007ef8 <HAL_USART_IRQHandler+0x278>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007ed8:	e00e      	b.n	8007ef8 <HAL_USART_IRQHandler+0x278>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f86e 	bl	8007fbc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007ee0:	e00a      	b.n	8007ef8 <HAL_USART_IRQHandler+0x278>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f86a 	bl	8007fbc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007ee8:	e006      	b.n	8007ef8 <HAL_USART_IRQHandler+0x278>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f866 	bl	8007fbc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
 8007ef6:	e047      	b.n	8007f88 <HAL_USART_IRQHandler+0x308>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007ef8:	bf00      	nop
    return;
 8007efa:	e045      	b.n	8007f88 <HAL_USART_IRQHandler+0x308>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d012      	beq.n	8007f2c <HAL_USART_IRQHandler+0x2ac>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <HAL_USART_IRQHandler+0x29a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <HAL_USART_IRQHandler+0x2ac>
  {
    if (husart->TxISR != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d034      	beq.n	8007f8c <HAL_USART_IRQHandler+0x30c>
    {
      husart->TxISR(husart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
    }
    return;
 8007f2a:	e02f      	b.n	8007f8c <HAL_USART_IRQHandler+0x30c>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <HAL_USART_IRQHandler+0x2d0>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_USART_IRQHandler+0x2d0>
  {
    USART_EndTransmit_IT(husart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fe64 	bl	8008c0e <USART_EndTransmit_IT>
    return;
 8007f46:	e022      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
 8007f48:	10000001 	.word	0x10000001
 8007f4c:	08008011 	.word	0x08008011
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <HAL_USART_IRQHandler+0x2ec>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_USART_IRQHandler+0x2ec>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fe9d 	bl	8008ca4 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8007f6a:	e010      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <HAL_USART_IRQHandler+0x30e>
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da08      	bge.n	8007f8e <HAL_USART_IRQHandler+0x30e>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fe87 	bl	8008c90 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8007f82:	e004      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
      return;
 8007f84:	bf00      	nop
 8007f86:	e002      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
    return;
 8007f88:	bf00      	nop
 8007f8a:	e000      	b.n	8007f8e <HAL_USART_IRQHandler+0x30e>
    return;
 8007f8c:	bf00      	nop
  }
}
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
 8007fe6:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6899      	ldr	r1, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <USART_EndTransfer+0x3c>)
 8007ff4:	400b      	ands	r3, r1
 8007ff6:	6093      	str	r3, [r2, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	ef7ffffe 	.word	0xef7ffffe

08008010 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff ffc6 	bl	8007fbc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008048:	e018      	b.n	800807c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d014      	beq.n	800807c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008052:	f7f9 f9fd 	bl	8001450 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <USART_WaitOnFlagUntilTimeout+0x30>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e00f      	b.n	800809c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4013      	ands	r3, r2
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	429a      	cmp	r2, r3
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	429a      	cmp	r2, r3
 8008098:	d0d7      	beq.n	800804a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	@ 0x38
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80080b2:	2300      	movs	r3, #0
 80080b4:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4bc9      	ldr	r3, [pc, #804]	@ (80083f8 <USART_SetConfig+0x354>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080dc:	430b      	orrs	r3, r1
 80080de:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80080e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ec:	4313      	orrs	r3, r2
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080fc:	4313      	orrs	r3, r2
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008106:	4313      	orrs	r3, r2
 8008108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4bba      	ldr	r3, [pc, #744]	@ (80083fc <USART_SetConfig+0x358>)
 8008112:	4013      	ands	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800811a:	430b      	orrs	r3, r1
 800811c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	f023 010f 	bic.w	r1, r3, #15
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4ab1      	ldr	r2, [pc, #708]	@ (8008400 <USART_SetConfig+0x35c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d176      	bne.n	800822c <USART_SetConfig+0x188>
 800813e:	4bb1      	ldr	r3, [pc, #708]	@ (8008404 <USART_SetConfig+0x360>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008146:	2b28      	cmp	r3, #40	@ 0x28
 8008148:	d86c      	bhi.n	8008224 <USART_SetConfig+0x180>
 800814a:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <USART_SetConfig+0xac>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	080081f5 	.word	0x080081f5
 8008154:	08008225 	.word	0x08008225
 8008158:	08008225 	.word	0x08008225
 800815c:	08008225 	.word	0x08008225
 8008160:	08008225 	.word	0x08008225
 8008164:	08008225 	.word	0x08008225
 8008168:	08008225 	.word	0x08008225
 800816c:	08008225 	.word	0x08008225
 8008170:	080081fd 	.word	0x080081fd
 8008174:	08008225 	.word	0x08008225
 8008178:	08008225 	.word	0x08008225
 800817c:	08008225 	.word	0x08008225
 8008180:	08008225 	.word	0x08008225
 8008184:	08008225 	.word	0x08008225
 8008188:	08008225 	.word	0x08008225
 800818c:	08008225 	.word	0x08008225
 8008190:	08008205 	.word	0x08008205
 8008194:	08008225 	.word	0x08008225
 8008198:	08008225 	.word	0x08008225
 800819c:	08008225 	.word	0x08008225
 80081a0:	08008225 	.word	0x08008225
 80081a4:	08008225 	.word	0x08008225
 80081a8:	08008225 	.word	0x08008225
 80081ac:	08008225 	.word	0x08008225
 80081b0:	0800820d 	.word	0x0800820d
 80081b4:	08008225 	.word	0x08008225
 80081b8:	08008225 	.word	0x08008225
 80081bc:	08008225 	.word	0x08008225
 80081c0:	08008225 	.word	0x08008225
 80081c4:	08008225 	.word	0x08008225
 80081c8:	08008225 	.word	0x08008225
 80081cc:	08008225 	.word	0x08008225
 80081d0:	08008215 	.word	0x08008215
 80081d4:	08008225 	.word	0x08008225
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	08008225 	.word	0x08008225
 80081e4:	08008225 	.word	0x08008225
 80081e8:	08008225 	.word	0x08008225
 80081ec:	08008225 	.word	0x08008225
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80081fa:	e18e      	b.n	800851a <USART_SetConfig+0x476>
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008202:	e18a      	b.n	800851a <USART_SetConfig+0x476>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800820a:	e186      	b.n	800851a <USART_SetConfig+0x476>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008212:	e182      	b.n	800851a <USART_SetConfig+0x476>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800821a:	e17e      	b.n	800851a <USART_SetConfig+0x476>
 800821c:	2320      	movs	r3, #32
 800821e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008222:	e17a      	b.n	800851a <USART_SetConfig+0x476>
 8008224:	2340      	movs	r3, #64	@ 0x40
 8008226:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800822a:	e176      	b.n	800851a <USART_SetConfig+0x476>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a75      	ldr	r2, [pc, #468]	@ (8008408 <USART_SetConfig+0x364>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d130      	bne.n	8008298 <USART_SetConfig+0x1f4>
 8008236:	4b73      	ldr	r3, [pc, #460]	@ (8008404 <USART_SetConfig+0x360>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	2b05      	cmp	r3, #5
 8008240:	d826      	bhi.n	8008290 <USART_SetConfig+0x1ec>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <USART_SetConfig+0x1a4>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008261 	.word	0x08008261
 800824c:	08008269 	.word	0x08008269
 8008250:	08008271 	.word	0x08008271
 8008254:	08008279 	.word	0x08008279
 8008258:	08008281 	.word	0x08008281
 800825c:	08008289 	.word	0x08008289
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008266:	e158      	b.n	800851a <USART_SetConfig+0x476>
 8008268:	2302      	movs	r3, #2
 800826a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800826e:	e154      	b.n	800851a <USART_SetConfig+0x476>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008276:	e150      	b.n	800851a <USART_SetConfig+0x476>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800827e:	e14c      	b.n	800851a <USART_SetConfig+0x476>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008286:	e148      	b.n	800851a <USART_SetConfig+0x476>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800828e:	e144      	b.n	800851a <USART_SetConfig+0x476>
 8008290:	2340      	movs	r3, #64	@ 0x40
 8008292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008296:	e140      	b.n	800851a <USART_SetConfig+0x476>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a5b      	ldr	r2, [pc, #364]	@ (800840c <USART_SetConfig+0x368>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <USART_SetConfig+0x260>
 80082a2:	4b58      	ldr	r3, [pc, #352]	@ (8008404 <USART_SetConfig+0x360>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <USART_SetConfig+0x258>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <USART_SetConfig+0x210>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082d2:	e122      	b.n	800851a <USART_SetConfig+0x476>
 80082d4:	2302      	movs	r3, #2
 80082d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082da:	e11e      	b.n	800851a <USART_SetConfig+0x476>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082e2:	e11a      	b.n	800851a <USART_SetConfig+0x476>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082ea:	e116      	b.n	800851a <USART_SetConfig+0x476>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082f2:	e112      	b.n	800851a <USART_SetConfig+0x476>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80082fa:	e10e      	b.n	800851a <USART_SetConfig+0x476>
 80082fc:	2340      	movs	r3, #64	@ 0x40
 80082fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008302:	e10a      	b.n	800851a <USART_SetConfig+0x476>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a41      	ldr	r2, [pc, #260]	@ (8008410 <USART_SetConfig+0x36c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	f040 8086 	bne.w	800841c <USART_SetConfig+0x378>
 8008310:	4b3c      	ldr	r3, [pc, #240]	@ (8008404 <USART_SetConfig+0x360>)
 8008312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008318:	2b28      	cmp	r3, #40	@ 0x28
 800831a:	d87b      	bhi.n	8008414 <USART_SetConfig+0x370>
 800831c:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <USART_SetConfig+0x280>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	080083c9 	.word	0x080083c9
 8008328:	08008415 	.word	0x08008415
 800832c:	08008415 	.word	0x08008415
 8008330:	08008415 	.word	0x08008415
 8008334:	08008415 	.word	0x08008415
 8008338:	08008415 	.word	0x08008415
 800833c:	08008415 	.word	0x08008415
 8008340:	08008415 	.word	0x08008415
 8008344:	080083d1 	.word	0x080083d1
 8008348:	08008415 	.word	0x08008415
 800834c:	08008415 	.word	0x08008415
 8008350:	08008415 	.word	0x08008415
 8008354:	08008415 	.word	0x08008415
 8008358:	08008415 	.word	0x08008415
 800835c:	08008415 	.word	0x08008415
 8008360:	08008415 	.word	0x08008415
 8008364:	080083d9 	.word	0x080083d9
 8008368:	08008415 	.word	0x08008415
 800836c:	08008415 	.word	0x08008415
 8008370:	08008415 	.word	0x08008415
 8008374:	08008415 	.word	0x08008415
 8008378:	08008415 	.word	0x08008415
 800837c:	08008415 	.word	0x08008415
 8008380:	08008415 	.word	0x08008415
 8008384:	080083e1 	.word	0x080083e1
 8008388:	08008415 	.word	0x08008415
 800838c:	08008415 	.word	0x08008415
 8008390:	08008415 	.word	0x08008415
 8008394:	08008415 	.word	0x08008415
 8008398:	08008415 	.word	0x08008415
 800839c:	08008415 	.word	0x08008415
 80083a0:	08008415 	.word	0x08008415
 80083a4:	080083e9 	.word	0x080083e9
 80083a8:	08008415 	.word	0x08008415
 80083ac:	08008415 	.word	0x08008415
 80083b0:	08008415 	.word	0x08008415
 80083b4:	08008415 	.word	0x08008415
 80083b8:	08008415 	.word	0x08008415
 80083bc:	08008415 	.word	0x08008415
 80083c0:	08008415 	.word	0x08008415
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083ce:	e0a4      	b.n	800851a <USART_SetConfig+0x476>
 80083d0:	2302      	movs	r3, #2
 80083d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083d6:	e0a0      	b.n	800851a <USART_SetConfig+0x476>
 80083d8:	2304      	movs	r3, #4
 80083da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083de:	e09c      	b.n	800851a <USART_SetConfig+0x476>
 80083e0:	2308      	movs	r3, #8
 80083e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083e6:	e098      	b.n	800851a <USART_SetConfig+0x476>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083ee:	e094      	b.n	800851a <USART_SetConfig+0x476>
 80083f0:	2320      	movs	r3, #32
 80083f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80083f6:	e090      	b.n	800851a <USART_SetConfig+0x476>
 80083f8:	cfff69f3 	.word	0xcfff69f3
 80083fc:	ffffc0f6 	.word	0xffffc0f6
 8008400:	40011000 	.word	0x40011000
 8008404:	58024400 	.word	0x58024400
 8008408:	40004400 	.word	0x40004400
 800840c:	40004800 	.word	0x40004800
 8008410:	40011400 	.word	0x40011400
 8008414:	2340      	movs	r3, #64	@ 0x40
 8008416:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800841a:	e07e      	b.n	800851a <USART_SetConfig+0x476>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4ab1      	ldr	r2, [pc, #708]	@ (80086e8 <USART_SetConfig+0x644>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d176      	bne.n	8008514 <USART_SetConfig+0x470>
 8008426:	4bb1      	ldr	r3, [pc, #708]	@ (80086ec <USART_SetConfig+0x648>)
 8008428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800842e:	2b28      	cmp	r3, #40	@ 0x28
 8008430:	d86c      	bhi.n	800850c <USART_SetConfig+0x468>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <USART_SetConfig+0x394>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084dd 	.word	0x080084dd
 800843c:	0800850d 	.word	0x0800850d
 8008440:	0800850d 	.word	0x0800850d
 8008444:	0800850d 	.word	0x0800850d
 8008448:	0800850d 	.word	0x0800850d
 800844c:	0800850d 	.word	0x0800850d
 8008450:	0800850d 	.word	0x0800850d
 8008454:	0800850d 	.word	0x0800850d
 8008458:	080084e5 	.word	0x080084e5
 800845c:	0800850d 	.word	0x0800850d
 8008460:	0800850d 	.word	0x0800850d
 8008464:	0800850d 	.word	0x0800850d
 8008468:	0800850d 	.word	0x0800850d
 800846c:	0800850d 	.word	0x0800850d
 8008470:	0800850d 	.word	0x0800850d
 8008474:	0800850d 	.word	0x0800850d
 8008478:	080084ed 	.word	0x080084ed
 800847c:	0800850d 	.word	0x0800850d
 8008480:	0800850d 	.word	0x0800850d
 8008484:	0800850d 	.word	0x0800850d
 8008488:	0800850d 	.word	0x0800850d
 800848c:	0800850d 	.word	0x0800850d
 8008490:	0800850d 	.word	0x0800850d
 8008494:	0800850d 	.word	0x0800850d
 8008498:	080084f5 	.word	0x080084f5
 800849c:	0800850d 	.word	0x0800850d
 80084a0:	0800850d 	.word	0x0800850d
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	0800850d 	.word	0x0800850d
 80084ac:	0800850d 	.word	0x0800850d
 80084b0:	0800850d 	.word	0x0800850d
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	080084fd 	.word	0x080084fd
 80084bc:	0800850d 	.word	0x0800850d
 80084c0:	0800850d 	.word	0x0800850d
 80084c4:	0800850d 	.word	0x0800850d
 80084c8:	0800850d 	.word	0x0800850d
 80084cc:	0800850d 	.word	0x0800850d
 80084d0:	0800850d 	.word	0x0800850d
 80084d4:	0800850d 	.word	0x0800850d
 80084d8:	08008505 	.word	0x08008505
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084e2:	e01a      	b.n	800851a <USART_SetConfig+0x476>
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084ea:	e016      	b.n	800851a <USART_SetConfig+0x476>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084f2:	e012      	b.n	800851a <USART_SetConfig+0x476>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084fa:	e00e      	b.n	800851a <USART_SetConfig+0x476>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008502:	e00a      	b.n	800851a <USART_SetConfig+0x476>
 8008504:	2320      	movs	r3, #32
 8008506:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800850a:	e006      	b.n	800851a <USART_SetConfig+0x476>
 800850c:	2340      	movs	r3, #64	@ 0x40
 800850e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008512:	e002      	b.n	800851a <USART_SetConfig+0x476>
 8008514:	2340      	movs	r3, #64	@ 0x40
 8008516:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800851a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800851e:	2b20      	cmp	r3, #32
 8008520:	f200 82ff 	bhi.w	8008b22 <USART_SetConfig+0xa7e>
 8008524:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <USART_SetConfig+0x488>)
 8008526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852a:	bf00      	nop
 800852c:	080085b1 	.word	0x080085b1
 8008530:	0800865b 	.word	0x0800865b
 8008534:	0800870f 	.word	0x0800870f
 8008538:	08008b23 	.word	0x08008b23
 800853c:	080087bd 	.word	0x080087bd
 8008540:	08008b23 	.word	0x08008b23
 8008544:	08008b23 	.word	0x08008b23
 8008548:	08008b23 	.word	0x08008b23
 800854c:	0800886b 	.word	0x0800886b
 8008550:	08008b23 	.word	0x08008b23
 8008554:	08008b23 	.word	0x08008b23
 8008558:	08008b23 	.word	0x08008b23
 800855c:	08008b23 	.word	0x08008b23
 8008560:	08008b23 	.word	0x08008b23
 8008564:	08008b23 	.word	0x08008b23
 8008568:	08008b23 	.word	0x08008b23
 800856c:	080089cb 	.word	0x080089cb
 8008570:	08008b23 	.word	0x08008b23
 8008574:	08008b23 	.word	0x08008b23
 8008578:	08008b23 	.word	0x08008b23
 800857c:	08008b23 	.word	0x08008b23
 8008580:	08008b23 	.word	0x08008b23
 8008584:	08008b23 	.word	0x08008b23
 8008588:	08008b23 	.word	0x08008b23
 800858c:	08008b23 	.word	0x08008b23
 8008590:	08008b23 	.word	0x08008b23
 8008594:	08008b23 	.word	0x08008b23
 8008598:	08008b23 	.word	0x08008b23
 800859c:	08008b23 	.word	0x08008b23
 80085a0:	08008b23 	.word	0x08008b23
 80085a4:	08008b23 	.word	0x08008b23
 80085a8:	08008b23 	.word	0x08008b23
 80085ac:	08008a7d 	.word	0x08008a7d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fa ffe0 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 80085b4:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d03e      	beq.n	800863c <USART_SetConfig+0x598>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d038      	beq.n	8008638 <USART_SetConfig+0x594>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d032      	beq.n	8008634 <USART_SetConfig+0x590>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d02c      	beq.n	8008630 <USART_SetConfig+0x58c>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d026      	beq.n	800862c <USART_SetConfig+0x588>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d020      	beq.n	8008628 <USART_SetConfig+0x584>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	2b06      	cmp	r3, #6
 80085ec:	d01a      	beq.n	8008624 <USART_SetConfig+0x580>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f2:	2b07      	cmp	r3, #7
 80085f4:	d014      	beq.n	8008620 <USART_SetConfig+0x57c>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d00e      	beq.n	800861c <USART_SetConfig+0x578>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008602:	2b09      	cmp	r3, #9
 8008604:	d008      	beq.n	8008618 <USART_SetConfig+0x574>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860a:	2b0a      	cmp	r3, #10
 800860c:	d101      	bne.n	8008612 <USART_SetConfig+0x56e>
 800860e:	2380      	movs	r3, #128	@ 0x80
 8008610:	e015      	b.n	800863e <USART_SetConfig+0x59a>
 8008612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008616:	e012      	b.n	800863e <USART_SetConfig+0x59a>
 8008618:	2340      	movs	r3, #64	@ 0x40
 800861a:	e010      	b.n	800863e <USART_SetConfig+0x59a>
 800861c:	2320      	movs	r3, #32
 800861e:	e00e      	b.n	800863e <USART_SetConfig+0x59a>
 8008620:	2310      	movs	r3, #16
 8008622:	e00c      	b.n	800863e <USART_SetConfig+0x59a>
 8008624:	230c      	movs	r3, #12
 8008626:	e00a      	b.n	800863e <USART_SetConfig+0x59a>
 8008628:	230a      	movs	r3, #10
 800862a:	e008      	b.n	800863e <USART_SetConfig+0x59a>
 800862c:	2308      	movs	r3, #8
 800862e:	e006      	b.n	800863e <USART_SetConfig+0x59a>
 8008630:	2306      	movs	r3, #6
 8008632:	e004      	b.n	800863e <USART_SetConfig+0x59a>
 8008634:	2304      	movs	r3, #4
 8008636:	e002      	b.n	800863e <USART_SetConfig+0x59a>
 8008638:	2302      	movs	r3, #2
 800863a:	e000      	b.n	800863e <USART_SetConfig+0x59a>
 800863c:	2301      	movs	r3, #1
 800863e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008640:	fbb2 f3f3 	udiv	r3, r2, r3
 8008644:	005a      	lsls	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	085b      	lsrs	r3, r3, #1
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	fbb2 f3f3 	udiv	r3, r2, r3
 8008656:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008658:	e267      	b.n	8008b2a <USART_SetConfig+0xa86>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800865a:	f7fa ffa1 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 800865e:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	d043      	beq.n	80086f0 <USART_SetConfig+0x64c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866c:	2b01      	cmp	r3, #1
 800866e:	d038      	beq.n	80086e2 <USART_SetConfig+0x63e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	2b02      	cmp	r3, #2
 8008676:	d032      	beq.n	80086de <USART_SetConfig+0x63a>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867c:	2b03      	cmp	r3, #3
 800867e:	d02c      	beq.n	80086da <USART_SetConfig+0x636>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	2b04      	cmp	r3, #4
 8008686:	d026      	beq.n	80086d6 <USART_SetConfig+0x632>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	2b05      	cmp	r3, #5
 800868e:	d020      	beq.n	80086d2 <USART_SetConfig+0x62e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	2b06      	cmp	r3, #6
 8008696:	d01a      	beq.n	80086ce <USART_SetConfig+0x62a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869c:	2b07      	cmp	r3, #7
 800869e:	d014      	beq.n	80086ca <USART_SetConfig+0x626>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d00e      	beq.n	80086c6 <USART_SetConfig+0x622>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d008      	beq.n	80086c2 <USART_SetConfig+0x61e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	2b0a      	cmp	r3, #10
 80086b6:	d101      	bne.n	80086bc <USART_SetConfig+0x618>
 80086b8:	2380      	movs	r3, #128	@ 0x80
 80086ba:	e01a      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086c0:	e017      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086c2:	2340      	movs	r3, #64	@ 0x40
 80086c4:	e015      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086c6:	2320      	movs	r3, #32
 80086c8:	e013      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086ca:	2310      	movs	r3, #16
 80086cc:	e011      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086ce:	230c      	movs	r3, #12
 80086d0:	e00f      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086d2:	230a      	movs	r3, #10
 80086d4:	e00d      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086d6:	2308      	movs	r3, #8
 80086d8:	e00b      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086da:	2306      	movs	r3, #6
 80086dc:	e009      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086de:	2304      	movs	r3, #4
 80086e0:	e007      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086e2:	2302      	movs	r3, #2
 80086e4:	e005      	b.n	80086f2 <USART_SetConfig+0x64e>
 80086e6:	bf00      	nop
 80086e8:	40011c00 	.word	0x40011c00
 80086ec:	58024400 	.word	0x58024400
 80086f0:	2301      	movs	r3, #1
 80086f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	005a      	lsls	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	441a      	add	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	fbb2 f3f3 	udiv	r3, r2, r3
 800870a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800870c:	e20d      	b.n	8008b2a <USART_SetConfig+0xa86>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0318 	add.w	r3, r7, #24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc f910 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d03e      	beq.n	80087a0 <USART_SetConfig+0x6fc>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	2b01      	cmp	r3, #1
 8008728:	d038      	beq.n	800879c <USART_SetConfig+0x6f8>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	2b02      	cmp	r3, #2
 8008730:	d032      	beq.n	8008798 <USART_SetConfig+0x6f4>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	2b03      	cmp	r3, #3
 8008738:	d02c      	beq.n	8008794 <USART_SetConfig+0x6f0>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b04      	cmp	r3, #4
 8008740:	d026      	beq.n	8008790 <USART_SetConfig+0x6ec>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	2b05      	cmp	r3, #5
 8008748:	d020      	beq.n	800878c <USART_SetConfig+0x6e8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	2b06      	cmp	r3, #6
 8008750:	d01a      	beq.n	8008788 <USART_SetConfig+0x6e4>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	2b07      	cmp	r3, #7
 8008758:	d014      	beq.n	8008784 <USART_SetConfig+0x6e0>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875e:	2b08      	cmp	r3, #8
 8008760:	d00e      	beq.n	8008780 <USART_SetConfig+0x6dc>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008766:	2b09      	cmp	r3, #9
 8008768:	d008      	beq.n	800877c <USART_SetConfig+0x6d8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876e:	2b0a      	cmp	r3, #10
 8008770:	d101      	bne.n	8008776 <USART_SetConfig+0x6d2>
 8008772:	2380      	movs	r3, #128	@ 0x80
 8008774:	e015      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800877a:	e012      	b.n	80087a2 <USART_SetConfig+0x6fe>
 800877c:	2340      	movs	r3, #64	@ 0x40
 800877e:	e010      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008780:	2320      	movs	r3, #32
 8008782:	e00e      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008784:	2310      	movs	r3, #16
 8008786:	e00c      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008788:	230c      	movs	r3, #12
 800878a:	e00a      	b.n	80087a2 <USART_SetConfig+0x6fe>
 800878c:	230a      	movs	r3, #10
 800878e:	e008      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008790:	2308      	movs	r3, #8
 8008792:	e006      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008794:	2306      	movs	r3, #6
 8008796:	e004      	b.n	80087a2 <USART_SetConfig+0x6fe>
 8008798:	2304      	movs	r3, #4
 800879a:	e002      	b.n	80087a2 <USART_SetConfig+0x6fe>
 800879c:	2302      	movs	r3, #2
 800879e:	e000      	b.n	80087a2 <USART_SetConfig+0x6fe>
 80087a0:	2301      	movs	r3, #1
 80087a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a6:	005a      	lsls	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	085b      	lsrs	r3, r3, #1
 80087ae:	441a      	add	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80087ba:	e1b6      	b.n	8008b2a <USART_SetConfig+0xa86>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fc fa0d 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d03e      	beq.n	800884e <USART_SetConfig+0x7aa>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d038      	beq.n	800884a <USART_SetConfig+0x7a6>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d032      	beq.n	8008846 <USART_SetConfig+0x7a2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d02c      	beq.n	8008842 <USART_SetConfig+0x79e>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d026      	beq.n	800883e <USART_SetConfig+0x79a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	2b05      	cmp	r3, #5
 80087f6:	d020      	beq.n	800883a <USART_SetConfig+0x796>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	2b06      	cmp	r3, #6
 80087fe:	d01a      	beq.n	8008836 <USART_SetConfig+0x792>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	2b07      	cmp	r3, #7
 8008806:	d014      	beq.n	8008832 <USART_SetConfig+0x78e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880c:	2b08      	cmp	r3, #8
 800880e:	d00e      	beq.n	800882e <USART_SetConfig+0x78a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	2b09      	cmp	r3, #9
 8008816:	d008      	beq.n	800882a <USART_SetConfig+0x786>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	2b0a      	cmp	r3, #10
 800881e:	d101      	bne.n	8008824 <USART_SetConfig+0x780>
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	e015      	b.n	8008850 <USART_SetConfig+0x7ac>
 8008824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008828:	e012      	b.n	8008850 <USART_SetConfig+0x7ac>
 800882a:	2340      	movs	r3, #64	@ 0x40
 800882c:	e010      	b.n	8008850 <USART_SetConfig+0x7ac>
 800882e:	2320      	movs	r3, #32
 8008830:	e00e      	b.n	8008850 <USART_SetConfig+0x7ac>
 8008832:	2310      	movs	r3, #16
 8008834:	e00c      	b.n	8008850 <USART_SetConfig+0x7ac>
 8008836:	230c      	movs	r3, #12
 8008838:	e00a      	b.n	8008850 <USART_SetConfig+0x7ac>
 800883a:	230a      	movs	r3, #10
 800883c:	e008      	b.n	8008850 <USART_SetConfig+0x7ac>
 800883e:	2308      	movs	r3, #8
 8008840:	e006      	b.n	8008850 <USART_SetConfig+0x7ac>
 8008842:	2306      	movs	r3, #6
 8008844:	e004      	b.n	8008850 <USART_SetConfig+0x7ac>
 8008846:	2304      	movs	r3, #4
 8008848:	e002      	b.n	8008850 <USART_SetConfig+0x7ac>
 800884a:	2302      	movs	r3, #2
 800884c:	e000      	b.n	8008850 <USART_SetConfig+0x7ac>
 800884e:	2301      	movs	r3, #1
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	005a      	lsls	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008868:	e15f      	b.n	8008b2a <USART_SetConfig+0xa86>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800886a:	4b81      	ldr	r3, [pc, #516]	@ (8008a70 <USART_SetConfig+0x9cc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d057      	beq.n	8008926 <USART_SetConfig+0x882>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8008876:	4b7e      	ldr	r3, [pc, #504]	@ (8008a70 <USART_SetConfig+0x9cc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	08db      	lsrs	r3, r3, #3
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	4a7c      	ldr	r2, [pc, #496]	@ (8008a74 <USART_SetConfig+0x9d0>)
 8008882:	40da      	lsrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d03e      	beq.n	800890a <USART_SetConfig+0x866>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	2b01      	cmp	r3, #1
 8008892:	d038      	beq.n	8008906 <USART_SetConfig+0x862>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008898:	2b02      	cmp	r3, #2
 800889a:	d032      	beq.n	8008902 <USART_SetConfig+0x85e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d02c      	beq.n	80088fe <USART_SetConfig+0x85a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d026      	beq.n	80088fa <USART_SetConfig+0x856>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d020      	beq.n	80088f6 <USART_SetConfig+0x852>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	d01a      	beq.n	80088f2 <USART_SetConfig+0x84e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	2b07      	cmp	r3, #7
 80088c2:	d014      	beq.n	80088ee <USART_SetConfig+0x84a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d00e      	beq.n	80088ea <USART_SetConfig+0x846>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	d008      	beq.n	80088e6 <USART_SetConfig+0x842>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d8:	2b0a      	cmp	r3, #10
 80088da:	d101      	bne.n	80088e0 <USART_SetConfig+0x83c>
 80088dc:	2380      	movs	r3, #128	@ 0x80
 80088de:	e015      	b.n	800890c <USART_SetConfig+0x868>
 80088e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088e4:	e012      	b.n	800890c <USART_SetConfig+0x868>
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	e010      	b.n	800890c <USART_SetConfig+0x868>
 80088ea:	2320      	movs	r3, #32
 80088ec:	e00e      	b.n	800890c <USART_SetConfig+0x868>
 80088ee:	2310      	movs	r3, #16
 80088f0:	e00c      	b.n	800890c <USART_SetConfig+0x868>
 80088f2:	230c      	movs	r3, #12
 80088f4:	e00a      	b.n	800890c <USART_SetConfig+0x868>
 80088f6:	230a      	movs	r3, #10
 80088f8:	e008      	b.n	800890c <USART_SetConfig+0x868>
 80088fa:	2308      	movs	r3, #8
 80088fc:	e006      	b.n	800890c <USART_SetConfig+0x868>
 80088fe:	2306      	movs	r3, #6
 8008900:	e004      	b.n	800890c <USART_SetConfig+0x868>
 8008902:	2304      	movs	r3, #4
 8008904:	e002      	b.n	800890c <USART_SetConfig+0x868>
 8008906:	2302      	movs	r3, #2
 8008908:	e000      	b.n	800890c <USART_SetConfig+0x868>
 800890a:	2301      	movs	r3, #1
 800890c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008910:	005a      	lsls	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	441a      	add	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8008924:	e101      	b.n	8008b2a <USART_SetConfig+0xa86>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892a:	2b00      	cmp	r3, #0
 800892c:	d03e      	beq.n	80089ac <USART_SetConfig+0x908>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	2b01      	cmp	r3, #1
 8008934:	d038      	beq.n	80089a8 <USART_SetConfig+0x904>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	2b02      	cmp	r3, #2
 800893c:	d032      	beq.n	80089a4 <USART_SetConfig+0x900>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008942:	2b03      	cmp	r3, #3
 8008944:	d02c      	beq.n	80089a0 <USART_SetConfig+0x8fc>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	2b04      	cmp	r3, #4
 800894c:	d026      	beq.n	800899c <USART_SetConfig+0x8f8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008952:	2b05      	cmp	r3, #5
 8008954:	d020      	beq.n	8008998 <USART_SetConfig+0x8f4>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895a:	2b06      	cmp	r3, #6
 800895c:	d01a      	beq.n	8008994 <USART_SetConfig+0x8f0>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	2b07      	cmp	r3, #7
 8008964:	d014      	beq.n	8008990 <USART_SetConfig+0x8ec>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896a:	2b08      	cmp	r3, #8
 800896c:	d00e      	beq.n	800898c <USART_SetConfig+0x8e8>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008972:	2b09      	cmp	r3, #9
 8008974:	d008      	beq.n	8008988 <USART_SetConfig+0x8e4>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	2b0a      	cmp	r3, #10
 800897c:	d101      	bne.n	8008982 <USART_SetConfig+0x8de>
 800897e:	2380      	movs	r3, #128	@ 0x80
 8008980:	e015      	b.n	80089ae <USART_SetConfig+0x90a>
 8008982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008986:	e012      	b.n	80089ae <USART_SetConfig+0x90a>
 8008988:	2340      	movs	r3, #64	@ 0x40
 800898a:	e010      	b.n	80089ae <USART_SetConfig+0x90a>
 800898c:	2320      	movs	r3, #32
 800898e:	e00e      	b.n	80089ae <USART_SetConfig+0x90a>
 8008990:	2310      	movs	r3, #16
 8008992:	e00c      	b.n	80089ae <USART_SetConfig+0x90a>
 8008994:	230c      	movs	r3, #12
 8008996:	e00a      	b.n	80089ae <USART_SetConfig+0x90a>
 8008998:	230a      	movs	r3, #10
 800899a:	e008      	b.n	80089ae <USART_SetConfig+0x90a>
 800899c:	2308      	movs	r3, #8
 800899e:	e006      	b.n	80089ae <USART_SetConfig+0x90a>
 80089a0:	2306      	movs	r3, #6
 80089a2:	e004      	b.n	80089ae <USART_SetConfig+0x90a>
 80089a4:	2304      	movs	r3, #4
 80089a6:	e002      	b.n	80089ae <USART_SetConfig+0x90a>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e000      	b.n	80089ae <USART_SetConfig+0x90a>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4a31      	ldr	r2, [pc, #196]	@ (8008a74 <USART_SetConfig+0x9d0>)
 80089b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b4:	005a      	lsls	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	441a      	add	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80089c8:	e0af      	b.n	8008b2a <USART_SetConfig+0xa86>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d03e      	beq.n	8008a50 <USART_SetConfig+0x9ac>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d038      	beq.n	8008a4c <USART_SetConfig+0x9a8>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d032      	beq.n	8008a48 <USART_SetConfig+0x9a4>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d02c      	beq.n	8008a44 <USART_SetConfig+0x9a0>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d026      	beq.n	8008a40 <USART_SetConfig+0x99c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	2b05      	cmp	r3, #5
 80089f8:	d020      	beq.n	8008a3c <USART_SetConfig+0x998>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d01a      	beq.n	8008a38 <USART_SetConfig+0x994>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	2b07      	cmp	r3, #7
 8008a08:	d014      	beq.n	8008a34 <USART_SetConfig+0x990>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d00e      	beq.n	8008a30 <USART_SetConfig+0x98c>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	2b09      	cmp	r3, #9
 8008a18:	d008      	beq.n	8008a2c <USART_SetConfig+0x988>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	2b0a      	cmp	r3, #10
 8008a20:	d101      	bne.n	8008a26 <USART_SetConfig+0x982>
 8008a22:	2380      	movs	r3, #128	@ 0x80
 8008a24:	e015      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a2a:	e012      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a2c:	2340      	movs	r3, #64	@ 0x40
 8008a2e:	e010      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a30:	2320      	movs	r3, #32
 8008a32:	e00e      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a34:	2310      	movs	r3, #16
 8008a36:	e00c      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	e00a      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a3c:	230a      	movs	r3, #10
 8008a3e:	e008      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a40:	2308      	movs	r3, #8
 8008a42:	e006      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a44:	2306      	movs	r3, #6
 8008a46:	e004      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	e002      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e000      	b.n	8008a52 <USART_SetConfig+0x9ae>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4a09      	ldr	r2, [pc, #36]	@ (8008a78 <USART_SetConfig+0x9d4>)
 8008a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a58:	005a      	lsls	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	441a      	add	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008a6c:	e05d      	b.n	8008b2a <USART_SetConfig+0xa86>
 8008a6e:	bf00      	nop
 8008a70:	58024400 	.word	0x58024400
 8008a74:	03d09000 	.word	0x03d09000
 8008a78:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d03e      	beq.n	8008b02 <USART_SetConfig+0xa5e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d038      	beq.n	8008afe <USART_SetConfig+0xa5a>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d032      	beq.n	8008afa <USART_SetConfig+0xa56>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d02c      	beq.n	8008af6 <USART_SetConfig+0xa52>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d026      	beq.n	8008af2 <USART_SetConfig+0xa4e>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa8:	2b05      	cmp	r3, #5
 8008aaa:	d020      	beq.n	8008aee <USART_SetConfig+0xa4a>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	d01a      	beq.n	8008aea <USART_SetConfig+0xa46>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	2b07      	cmp	r3, #7
 8008aba:	d014      	beq.n	8008ae6 <USART_SetConfig+0xa42>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d00e      	beq.n	8008ae2 <USART_SetConfig+0xa3e>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	d008      	beq.n	8008ade <USART_SetConfig+0xa3a>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	2b0a      	cmp	r3, #10
 8008ad2:	d101      	bne.n	8008ad8 <USART_SetConfig+0xa34>
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	e015      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008adc:	e012      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008ade:	2340      	movs	r3, #64	@ 0x40
 8008ae0:	e010      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	e00e      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008ae6:	2310      	movs	r3, #16
 8008ae8:	e00c      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008aea:	230c      	movs	r3, #12
 8008aec:	e00a      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008aee:	230a      	movs	r3, #10
 8008af0:	e008      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008af2:	2308      	movs	r3, #8
 8008af4:	e006      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008af6:	2306      	movs	r3, #6
 8008af8:	e004      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008afa:	2304      	movs	r3, #4
 8008afc:	e002      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e000      	b.n	8008b04 <USART_SetConfig+0xa60>
 8008b02:	2301      	movs	r3, #1
 8008b04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0c:	005a      	lsls	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	441a      	add	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008b20:	e003      	b.n	8008b2a <USART_SetConfig+0xa86>
    default:
      ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8008b28:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2b0f      	cmp	r3, #15
 8008b2e:	d916      	bls.n	8008b5e <USART_SetConfig+0xaba>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b36:	d212      	bcs.n	8008b5e <USART_SetConfig+0xaba>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f023 030f 	bic.w	r3, r3, #15
 8008b40:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	085b      	lsrs	r3, r3, #1
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b50:	4313      	orrs	r3, r2
 8008b52:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e002      	b.n	8008b64 <USART_SetConfig+0xac0>
  }
  else
  {
    ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8008b7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3738      	adds	r7, #56	@ 0x38
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b96:	f7f8 fc5b 	bl	8001450 <HAL_GetTick>
 8008b9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d10e      	bne.n	8008bc8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fa3d 	bl	8008038 <USART_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e01e      	b.n	8008c06 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d10e      	bne.n	8008bf4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fa27 	bl	8008038 <USART_WaitOnFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e008      	b.n	8008c06 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c24:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0201 	bic.w	r2, r2, #1
 8008c34:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b12      	cmp	r3, #18
 8008c46:	d113      	bne.n	8008c70 <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0208 	orr.w	r2, r2, #8
 8008c5e:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f993 	bl	8007f94 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c6e:	e00b      	b.n	8008c88 <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    HAL_USART_TxRxCpltCallback(husart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff f990 	bl	8007fa8 <HAL_USART_TxRxCpltCallback>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_USARTEx_DisableFifoMode+0x16>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e027      	b.n	8008d1e <HAL_USARTEx_DisableFifoMode+0x66>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cfc:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e02d      	b.n	8008d9e <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f850 	bl	8008e24 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e02d      	b.n	8008e1a <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f812 	bl	8008e24 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e40:	e02f      	b.n	8008ea2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e42:	2310      	movs	r3, #16
 8008e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e46:	2310      	movs	r3, #16
 8008e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8008e50:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8008e60:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	7b3a      	ldrb	r2, [r7, #12]
 8008e6e:	4910      	ldr	r1, [pc, #64]	@ (8008eb0 <USARTEx_SetNbDataToProcess+0x8c>)
 8008e70:	5c8a      	ldrb	r2, [r1, r2]
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8008e76:	7b3a      	ldrb	r2, [r7, #12]
 8008e78:	490e      	ldr	r1, [pc, #56]	@ (8008eb4 <USARTEx_SetNbDataToProcess+0x90>)
 8008e7a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	7b7a      	ldrb	r2, [r7, #13]
 8008e8a:	4909      	ldr	r1, [pc, #36]	@ (8008eb0 <USARTEx_SetNbDataToProcess+0x8c>)
 8008e8c:	5c8a      	ldrb	r2, [r1, r2]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8008e92:	7b7a      	ldrb	r2, [r7, #13]
 8008e94:	4907      	ldr	r1, [pc, #28]	@ (8008eb4 <USARTEx_SetNbDataToProcess+0x90>)
 8008e96:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	08009fa0 	.word	0x08009fa0
 8008eb4:	08009fa8 	.word	0x08009fa8

08008eb8 <std>:
 8008eb8:	2300      	movs	r3, #0
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8008ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ec6:	6083      	str	r3, [r0, #8]
 8008ec8:	8181      	strh	r1, [r0, #12]
 8008eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ecc:	81c2      	strh	r2, [r0, #14]
 8008ece:	6183      	str	r3, [r0, #24]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	305c      	adds	r0, #92	@ 0x5c
 8008ed6:	f000 fa07 	bl	80092e8 <memset>
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <std+0x58>)
 8008edc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ede:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <std+0x5c>)
 8008ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <std+0x60>)
 8008ee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <std+0x64>)
 8008ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <std+0x68>)
 8008eec:	6224      	str	r4, [r4, #32]
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d006      	beq.n	8008f00 <std+0x48>
 8008ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ef6:	4294      	cmp	r4, r2
 8008ef8:	d002      	beq.n	8008f00 <std+0x48>
 8008efa:	33d0      	adds	r3, #208	@ 0xd0
 8008efc:	429c      	cmp	r4, r3
 8008efe:	d105      	bne.n	8008f0c <std+0x54>
 8008f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	f000 ba66 	b.w	80093d8 <__retarget_lock_init_recursive>
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	08009139 	.word	0x08009139
 8008f14:	0800915b 	.word	0x0800915b
 8008f18:	08009193 	.word	0x08009193
 8008f1c:	080091b7 	.word	0x080091b7
 8008f20:	240001ac 	.word	0x240001ac

08008f24 <stdio_exit_handler>:
 8008f24:	4a02      	ldr	r2, [pc, #8]	@ (8008f30 <stdio_exit_handler+0xc>)
 8008f26:	4903      	ldr	r1, [pc, #12]	@ (8008f34 <stdio_exit_handler+0x10>)
 8008f28:	4803      	ldr	r0, [pc, #12]	@ (8008f38 <stdio_exit_handler+0x14>)
 8008f2a:	f000 b869 	b.w	8009000 <_fwalk_sglue>
 8008f2e:	bf00      	nop
 8008f30:	24000028 	.word	0x24000028
 8008f34:	08009ca5 	.word	0x08009ca5
 8008f38:	24000038 	.word	0x24000038

08008f3c <cleanup_stdio>:
 8008f3c:	6841      	ldr	r1, [r0, #4]
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <cleanup_stdio+0x34>)
 8008f40:	4299      	cmp	r1, r3
 8008f42:	b510      	push	{r4, lr}
 8008f44:	4604      	mov	r4, r0
 8008f46:	d001      	beq.n	8008f4c <cleanup_stdio+0x10>
 8008f48:	f000 feac 	bl	8009ca4 <_fflush_r>
 8008f4c:	68a1      	ldr	r1, [r4, #8]
 8008f4e:	4b09      	ldr	r3, [pc, #36]	@ (8008f74 <cleanup_stdio+0x38>)
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d002      	beq.n	8008f5a <cleanup_stdio+0x1e>
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fea5 	bl	8009ca4 <_fflush_r>
 8008f5a:	68e1      	ldr	r1, [r4, #12]
 8008f5c:	4b06      	ldr	r3, [pc, #24]	@ (8008f78 <cleanup_stdio+0x3c>)
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d004      	beq.n	8008f6c <cleanup_stdio+0x30>
 8008f62:	4620      	mov	r0, r4
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f68:	f000 be9c 	b.w	8009ca4 <_fflush_r>
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	bf00      	nop
 8008f70:	240001ac 	.word	0x240001ac
 8008f74:	24000214 	.word	0x24000214
 8008f78:	2400027c 	.word	0x2400027c

08008f7c <global_stdio_init.part.0>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <global_stdio_init.part.0+0x30>)
 8008f80:	4c0b      	ldr	r4, [pc, #44]	@ (8008fb0 <global_stdio_init.part.0+0x34>)
 8008f82:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb4 <global_stdio_init.part.0+0x38>)
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	4620      	mov	r0, r4
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2104      	movs	r1, #4
 8008f8c:	f7ff ff94 	bl	8008eb8 <std>
 8008f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f94:	2201      	movs	r2, #1
 8008f96:	2109      	movs	r1, #9
 8008f98:	f7ff ff8e 	bl	8008eb8 <std>
 8008f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa6:	2112      	movs	r1, #18
 8008fa8:	f7ff bf86 	b.w	8008eb8 <std>
 8008fac:	240002e4 	.word	0x240002e4
 8008fb0:	240001ac 	.word	0x240001ac
 8008fb4:	08008f25 	.word	0x08008f25

08008fb8 <__sfp_lock_acquire>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	@ (8008fc0 <__sfp_lock_acquire+0x8>)
 8008fba:	f000 ba0e 	b.w	80093da <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	240002ed 	.word	0x240002ed

08008fc4 <__sfp_lock_release>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	@ (8008fcc <__sfp_lock_release+0x8>)
 8008fc6:	f000 ba09 	b.w	80093dc <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	240002ed 	.word	0x240002ed

08008fd0 <__sinit>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f7ff fff0 	bl	8008fb8 <__sfp_lock_acquire>
 8008fd8:	6a23      	ldr	r3, [r4, #32]
 8008fda:	b11b      	cbz	r3, 8008fe4 <__sinit+0x14>
 8008fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe0:	f7ff bff0 	b.w	8008fc4 <__sfp_lock_release>
 8008fe4:	4b04      	ldr	r3, [pc, #16]	@ (8008ff8 <__sinit+0x28>)
 8008fe6:	6223      	str	r3, [r4, #32]
 8008fe8:	4b04      	ldr	r3, [pc, #16]	@ (8008ffc <__sinit+0x2c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1f5      	bne.n	8008fdc <__sinit+0xc>
 8008ff0:	f7ff ffc4 	bl	8008f7c <global_stdio_init.part.0>
 8008ff4:	e7f2      	b.n	8008fdc <__sinit+0xc>
 8008ff6:	bf00      	nop
 8008ff8:	08008f3d 	.word	0x08008f3d
 8008ffc:	240002e4 	.word	0x240002e4

08009000 <_fwalk_sglue>:
 8009000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009004:	4607      	mov	r7, r0
 8009006:	4688      	mov	r8, r1
 8009008:	4614      	mov	r4, r2
 800900a:	2600      	movs	r6, #0
 800900c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009010:	f1b9 0901 	subs.w	r9, r9, #1
 8009014:	d505      	bpl.n	8009022 <_fwalk_sglue+0x22>
 8009016:	6824      	ldr	r4, [r4, #0]
 8009018:	2c00      	cmp	r4, #0
 800901a:	d1f7      	bne.n	800900c <_fwalk_sglue+0xc>
 800901c:	4630      	mov	r0, r6
 800901e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d907      	bls.n	8009038 <_fwalk_sglue+0x38>
 8009028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800902c:	3301      	adds	r3, #1
 800902e:	d003      	beq.n	8009038 <_fwalk_sglue+0x38>
 8009030:	4629      	mov	r1, r5
 8009032:	4638      	mov	r0, r7
 8009034:	47c0      	blx	r8
 8009036:	4306      	orrs	r6, r0
 8009038:	3568      	adds	r5, #104	@ 0x68
 800903a:	e7e9      	b.n	8009010 <_fwalk_sglue+0x10>

0800903c <_puts_r>:
 800903c:	6a03      	ldr	r3, [r0, #32]
 800903e:	b570      	push	{r4, r5, r6, lr}
 8009040:	6884      	ldr	r4, [r0, #8]
 8009042:	4605      	mov	r5, r0
 8009044:	460e      	mov	r6, r1
 8009046:	b90b      	cbnz	r3, 800904c <_puts_r+0x10>
 8009048:	f7ff ffc2 	bl	8008fd0 <__sinit>
 800904c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800904e:	07db      	lsls	r3, r3, #31
 8009050:	d405      	bmi.n	800905e <_puts_r+0x22>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	0598      	lsls	r0, r3, #22
 8009056:	d402      	bmi.n	800905e <_puts_r+0x22>
 8009058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800905a:	f000 f9be 	bl	80093da <__retarget_lock_acquire_recursive>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	0719      	lsls	r1, r3, #28
 8009062:	d502      	bpl.n	800906a <_puts_r+0x2e>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d135      	bne.n	80090d6 <_puts_r+0x9a>
 800906a:	4621      	mov	r1, r4
 800906c:	4628      	mov	r0, r5
 800906e:	f000 f8e5 	bl	800923c <__swsetup_r>
 8009072:	b380      	cbz	r0, 80090d6 <_puts_r+0x9a>
 8009074:	f04f 35ff 	mov.w	r5, #4294967295
 8009078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d405      	bmi.n	800908a <_puts_r+0x4e>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	059b      	lsls	r3, r3, #22
 8009082:	d402      	bmi.n	800908a <_puts_r+0x4e>
 8009084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009086:	f000 f9a9 	bl	80093dc <__retarget_lock_release_recursive>
 800908a:	4628      	mov	r0, r5
 800908c:	bd70      	pop	{r4, r5, r6, pc}
 800908e:	2b00      	cmp	r3, #0
 8009090:	da04      	bge.n	800909c <_puts_r+0x60>
 8009092:	69a2      	ldr	r2, [r4, #24]
 8009094:	429a      	cmp	r2, r3
 8009096:	dc17      	bgt.n	80090c8 <_puts_r+0x8c>
 8009098:	290a      	cmp	r1, #10
 800909a:	d015      	beq.n	80090c8 <_puts_r+0x8c>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	7019      	strb	r1, [r3, #0]
 80090a4:	68a3      	ldr	r3, [r4, #8]
 80090a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090aa:	3b01      	subs	r3, #1
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d1ed      	bne.n	800908e <_puts_r+0x52>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da11      	bge.n	80090da <_puts_r+0x9e>
 80090b6:	4622      	mov	r2, r4
 80090b8:	210a      	movs	r1, #10
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f87f 	bl	80091be <__swbuf_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d0d7      	beq.n	8009074 <_puts_r+0x38>
 80090c4:	250a      	movs	r5, #10
 80090c6:	e7d7      	b.n	8009078 <_puts_r+0x3c>
 80090c8:	4622      	mov	r2, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f877 	bl	80091be <__swbuf_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d1e7      	bne.n	80090a4 <_puts_r+0x68>
 80090d4:	e7ce      	b.n	8009074 <_puts_r+0x38>
 80090d6:	3e01      	subs	r6, #1
 80090d8:	e7e4      	b.n	80090a4 <_puts_r+0x68>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	220a      	movs	r2, #10
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e7ee      	b.n	80090c4 <_puts_r+0x88>
	...

080090e8 <puts>:
 80090e8:	4b02      	ldr	r3, [pc, #8]	@ (80090f4 <puts+0xc>)
 80090ea:	4601      	mov	r1, r0
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	f7ff bfa5 	b.w	800903c <_puts_r>
 80090f2:	bf00      	nop
 80090f4:	24000034 	.word	0x24000034

080090f8 <siprintf>:
 80090f8:	b40e      	push	{r1, r2, r3}
 80090fa:	b500      	push	{lr}
 80090fc:	b09c      	sub	sp, #112	@ 0x70
 80090fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009100:	9002      	str	r0, [sp, #8]
 8009102:	9006      	str	r0, [sp, #24]
 8009104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009108:	4809      	ldr	r0, [pc, #36]	@ (8009130 <siprintf+0x38>)
 800910a:	9107      	str	r1, [sp, #28]
 800910c:	9104      	str	r1, [sp, #16]
 800910e:	4909      	ldr	r1, [pc, #36]	@ (8009134 <siprintf+0x3c>)
 8009110:	f853 2b04 	ldr.w	r2, [r3], #4
 8009114:	9105      	str	r1, [sp, #20]
 8009116:	6800      	ldr	r0, [r0, #0]
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	a902      	add	r1, sp, #8
 800911c:	f000 fab4 	bl	8009688 <_svfiprintf_r>
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	b01c      	add	sp, #112	@ 0x70
 8009128:	f85d eb04 	ldr.w	lr, [sp], #4
 800912c:	b003      	add	sp, #12
 800912e:	4770      	bx	lr
 8009130:	24000034 	.word	0x24000034
 8009134:	ffff0208 	.word	0xffff0208

08009138 <__sread>:
 8009138:	b510      	push	{r4, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	f000 f8fc 	bl	800933c <_read_r>
 8009144:	2800      	cmp	r0, #0
 8009146:	bfab      	itete	ge
 8009148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800914a:	89a3      	ldrhlt	r3, [r4, #12]
 800914c:	181b      	addge	r3, r3, r0
 800914e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009152:	bfac      	ite	ge
 8009154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009156:	81a3      	strhlt	r3, [r4, #12]
 8009158:	bd10      	pop	{r4, pc}

0800915a <__swrite>:
 800915a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	461f      	mov	r7, r3
 8009160:	898b      	ldrh	r3, [r1, #12]
 8009162:	05db      	lsls	r3, r3, #23
 8009164:	4605      	mov	r5, r0
 8009166:	460c      	mov	r4, r1
 8009168:	4616      	mov	r6, r2
 800916a:	d505      	bpl.n	8009178 <__swrite+0x1e>
 800916c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009170:	2302      	movs	r3, #2
 8009172:	2200      	movs	r2, #0
 8009174:	f000 f8d0 	bl	8009318 <_lseek_r>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800917e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	4632      	mov	r2, r6
 8009186:	463b      	mov	r3, r7
 8009188:	4628      	mov	r0, r5
 800918a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800918e:	f000 b8e7 	b.w	8009360 <_write_r>

08009192 <__sseek>:
 8009192:	b510      	push	{r4, lr}
 8009194:	460c      	mov	r4, r1
 8009196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919a:	f000 f8bd 	bl	8009318 <_lseek_r>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	bf15      	itete	ne
 80091a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091ae:	81a3      	strheq	r3, [r4, #12]
 80091b0:	bf18      	it	ne
 80091b2:	81a3      	strhne	r3, [r4, #12]
 80091b4:	bd10      	pop	{r4, pc}

080091b6 <__sclose>:
 80091b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ba:	f000 b89d 	b.w	80092f8 <_close_r>

080091be <__swbuf_r>:
 80091be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c0:	460e      	mov	r6, r1
 80091c2:	4614      	mov	r4, r2
 80091c4:	4605      	mov	r5, r0
 80091c6:	b118      	cbz	r0, 80091d0 <__swbuf_r+0x12>
 80091c8:	6a03      	ldr	r3, [r0, #32]
 80091ca:	b90b      	cbnz	r3, 80091d0 <__swbuf_r+0x12>
 80091cc:	f7ff ff00 	bl	8008fd0 <__sinit>
 80091d0:	69a3      	ldr	r3, [r4, #24]
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	071a      	lsls	r2, r3, #28
 80091d8:	d501      	bpl.n	80091de <__swbuf_r+0x20>
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	b943      	cbnz	r3, 80091f0 <__swbuf_r+0x32>
 80091de:	4621      	mov	r1, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f82b 	bl	800923c <__swsetup_r>
 80091e6:	b118      	cbz	r0, 80091f0 <__swbuf_r+0x32>
 80091e8:	f04f 37ff 	mov.w	r7, #4294967295
 80091ec:	4638      	mov	r0, r7
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	6922      	ldr	r2, [r4, #16]
 80091f4:	1a98      	subs	r0, r3, r2
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	b2f6      	uxtb	r6, r6
 80091fa:	4283      	cmp	r3, r0
 80091fc:	4637      	mov	r7, r6
 80091fe:	dc05      	bgt.n	800920c <__swbuf_r+0x4e>
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 fd4e 	bl	8009ca4 <_fflush_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	d1ed      	bne.n	80091e8 <__swbuf_r+0x2a>
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	3b01      	subs	r3, #1
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	701e      	strb	r6, [r3, #0]
 800921a:	6962      	ldr	r2, [r4, #20]
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	429a      	cmp	r2, r3
 8009220:	d004      	beq.n	800922c <__swbuf_r+0x6e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	07db      	lsls	r3, r3, #31
 8009226:	d5e1      	bpl.n	80091ec <__swbuf_r+0x2e>
 8009228:	2e0a      	cmp	r6, #10
 800922a:	d1df      	bne.n	80091ec <__swbuf_r+0x2e>
 800922c:	4621      	mov	r1, r4
 800922e:	4628      	mov	r0, r5
 8009230:	f000 fd38 	bl	8009ca4 <_fflush_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	d0d9      	beq.n	80091ec <__swbuf_r+0x2e>
 8009238:	e7d6      	b.n	80091e8 <__swbuf_r+0x2a>
	...

0800923c <__swsetup_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4b29      	ldr	r3, [pc, #164]	@ (80092e4 <__swsetup_r+0xa8>)
 8009240:	4605      	mov	r5, r0
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	460c      	mov	r4, r1
 8009246:	b118      	cbz	r0, 8009250 <__swsetup_r+0x14>
 8009248:	6a03      	ldr	r3, [r0, #32]
 800924a:	b90b      	cbnz	r3, 8009250 <__swsetup_r+0x14>
 800924c:	f7ff fec0 	bl	8008fd0 <__sinit>
 8009250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009254:	0719      	lsls	r1, r3, #28
 8009256:	d422      	bmi.n	800929e <__swsetup_r+0x62>
 8009258:	06da      	lsls	r2, r3, #27
 800925a:	d407      	bmi.n	800926c <__swsetup_r+0x30>
 800925c:	2209      	movs	r2, #9
 800925e:	602a      	str	r2, [r5, #0]
 8009260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	e033      	b.n	80092d4 <__swsetup_r+0x98>
 800926c:	0758      	lsls	r0, r3, #29
 800926e:	d512      	bpl.n	8009296 <__swsetup_r+0x5a>
 8009270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009272:	b141      	cbz	r1, 8009286 <__swsetup_r+0x4a>
 8009274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009278:	4299      	cmp	r1, r3
 800927a:	d002      	beq.n	8009282 <__swsetup_r+0x46>
 800927c:	4628      	mov	r0, r5
 800927e:	f000 f8af 	bl	80093e0 <_free_r>
 8009282:	2300      	movs	r3, #0
 8009284:	6363      	str	r3, [r4, #52]	@ 0x34
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	2300      	movs	r3, #0
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0308 	orr.w	r3, r3, #8
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	b94b      	cbnz	r3, 80092b6 <__swsetup_r+0x7a>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ac:	d003      	beq.n	80092b6 <__swsetup_r+0x7a>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f000 fd45 	bl	8009d40 <__smakebuf_r>
 80092b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ba:	f013 0201 	ands.w	r2, r3, #1
 80092be:	d00a      	beq.n	80092d6 <__swsetup_r+0x9a>
 80092c0:	2200      	movs	r2, #0
 80092c2:	60a2      	str	r2, [r4, #8]
 80092c4:	6962      	ldr	r2, [r4, #20]
 80092c6:	4252      	negs	r2, r2
 80092c8:	61a2      	str	r2, [r4, #24]
 80092ca:	6922      	ldr	r2, [r4, #16]
 80092cc:	b942      	cbnz	r2, 80092e0 <__swsetup_r+0xa4>
 80092ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092d2:	d1c5      	bne.n	8009260 <__swsetup_r+0x24>
 80092d4:	bd38      	pop	{r3, r4, r5, pc}
 80092d6:	0799      	lsls	r1, r3, #30
 80092d8:	bf58      	it	pl
 80092da:	6962      	ldrpl	r2, [r4, #20]
 80092dc:	60a2      	str	r2, [r4, #8]
 80092de:	e7f4      	b.n	80092ca <__swsetup_r+0x8e>
 80092e0:	2000      	movs	r0, #0
 80092e2:	e7f7      	b.n	80092d4 <__swsetup_r+0x98>
 80092e4:	24000034 	.word	0x24000034

080092e8 <memset>:
 80092e8:	4402      	add	r2, r0
 80092ea:	4603      	mov	r3, r0
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d100      	bne.n	80092f2 <memset+0xa>
 80092f0:	4770      	bx	lr
 80092f2:	f803 1b01 	strb.w	r1, [r3], #1
 80092f6:	e7f9      	b.n	80092ec <memset+0x4>

080092f8 <_close_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_close_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f7 fdd3 	bl	8000eae <_close>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_close_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_close_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	240002e8 	.word	0x240002e8

08009318 <_lseek_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	@ (8009338 <_lseek_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7f7 fde8 	bl	8000efc <_lseek>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_lseek_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_lseek_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	240002e8 	.word	0x240002e8

0800933c <_read_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	@ (800935c <_read_r+0x20>)
 8009340:	4604      	mov	r4, r0
 8009342:	4608      	mov	r0, r1
 8009344:	4611      	mov	r1, r2
 8009346:	2200      	movs	r2, #0
 8009348:	602a      	str	r2, [r5, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f7f7 fd92 	bl	8000e74 <_read>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_read_r+0x1e>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_read_r+0x1e>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	240002e8 	.word	0x240002e8

08009360 <_write_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	@ (8009380 <_write_r+0x20>)
 8009364:	4604      	mov	r4, r0
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	2200      	movs	r2, #0
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f7f7 f99e 	bl	80006b0 <_write>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_write_r+0x1e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_write_r+0x1e>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	240002e8 	.word	0x240002e8

08009384 <__errno>:
 8009384:	4b01      	ldr	r3, [pc, #4]	@ (800938c <__errno+0x8>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	24000034 	.word	0x24000034

08009390 <__libc_init_array>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4d0d      	ldr	r5, [pc, #52]	@ (80093c8 <__libc_init_array+0x38>)
 8009394:	4c0d      	ldr	r4, [pc, #52]	@ (80093cc <__libc_init_array+0x3c>)
 8009396:	1b64      	subs	r4, r4, r5
 8009398:	10a4      	asrs	r4, r4, #2
 800939a:	2600      	movs	r6, #0
 800939c:	42a6      	cmp	r6, r4
 800939e:	d109      	bne.n	80093b4 <__libc_init_array+0x24>
 80093a0:	4d0b      	ldr	r5, [pc, #44]	@ (80093d0 <__libc_init_array+0x40>)
 80093a2:	4c0c      	ldr	r4, [pc, #48]	@ (80093d4 <__libc_init_array+0x44>)
 80093a4:	f000 fd98 	bl	8009ed8 <_init>
 80093a8:	1b64      	subs	r4, r4, r5
 80093aa:	10a4      	asrs	r4, r4, #2
 80093ac:	2600      	movs	r6, #0
 80093ae:	42a6      	cmp	r6, r4
 80093b0:	d105      	bne.n	80093be <__libc_init_array+0x2e>
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b8:	4798      	blx	r3
 80093ba:	3601      	adds	r6, #1
 80093bc:	e7ee      	b.n	800939c <__libc_init_array+0xc>
 80093be:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c2:	4798      	blx	r3
 80093c4:	3601      	adds	r6, #1
 80093c6:	e7f2      	b.n	80093ae <__libc_init_array+0x1e>
 80093c8:	08009fec 	.word	0x08009fec
 80093cc:	08009fec 	.word	0x08009fec
 80093d0:	08009fec 	.word	0x08009fec
 80093d4:	08009ff0 	.word	0x08009ff0

080093d8 <__retarget_lock_init_recursive>:
 80093d8:	4770      	bx	lr

080093da <__retarget_lock_acquire_recursive>:
 80093da:	4770      	bx	lr

080093dc <__retarget_lock_release_recursive>:
 80093dc:	4770      	bx	lr
	...

080093e0 <_free_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d041      	beq.n	800946c <_free_r+0x8c>
 80093e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ec:	1f0c      	subs	r4, r1, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfb8      	it	lt
 80093f2:	18e4      	addlt	r4, r4, r3
 80093f4:	f000 f8e0 	bl	80095b8 <__malloc_lock>
 80093f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009470 <_free_r+0x90>)
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	b933      	cbnz	r3, 800940c <_free_r+0x2c>
 80093fe:	6063      	str	r3, [r4, #4]
 8009400:	6014      	str	r4, [r2, #0]
 8009402:	4628      	mov	r0, r5
 8009404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009408:	f000 b8dc 	b.w	80095c4 <__malloc_unlock>
 800940c:	42a3      	cmp	r3, r4
 800940e:	d908      	bls.n	8009422 <_free_r+0x42>
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	1821      	adds	r1, r4, r0
 8009414:	428b      	cmp	r3, r1
 8009416:	bf01      	itttt	eq
 8009418:	6819      	ldreq	r1, [r3, #0]
 800941a:	685b      	ldreq	r3, [r3, #4]
 800941c:	1809      	addeq	r1, r1, r0
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	e7ed      	b.n	80093fe <_free_r+0x1e>
 8009422:	461a      	mov	r2, r3
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	b10b      	cbz	r3, 800942c <_free_r+0x4c>
 8009428:	42a3      	cmp	r3, r4
 800942a:	d9fa      	bls.n	8009422 <_free_r+0x42>
 800942c:	6811      	ldr	r1, [r2, #0]
 800942e:	1850      	adds	r0, r2, r1
 8009430:	42a0      	cmp	r0, r4
 8009432:	d10b      	bne.n	800944c <_free_r+0x6c>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	4401      	add	r1, r0
 8009438:	1850      	adds	r0, r2, r1
 800943a:	4283      	cmp	r3, r0
 800943c:	6011      	str	r1, [r2, #0]
 800943e:	d1e0      	bne.n	8009402 <_free_r+0x22>
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	6053      	str	r3, [r2, #4]
 8009446:	4408      	add	r0, r1
 8009448:	6010      	str	r0, [r2, #0]
 800944a:	e7da      	b.n	8009402 <_free_r+0x22>
 800944c:	d902      	bls.n	8009454 <_free_r+0x74>
 800944e:	230c      	movs	r3, #12
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	e7d6      	b.n	8009402 <_free_r+0x22>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	1821      	adds	r1, r4, r0
 8009458:	428b      	cmp	r3, r1
 800945a:	bf04      	itt	eq
 800945c:	6819      	ldreq	r1, [r3, #0]
 800945e:	685b      	ldreq	r3, [r3, #4]
 8009460:	6063      	str	r3, [r4, #4]
 8009462:	bf04      	itt	eq
 8009464:	1809      	addeq	r1, r1, r0
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	6054      	str	r4, [r2, #4]
 800946a:	e7ca      	b.n	8009402 <_free_r+0x22>
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	240002f4 	.word	0x240002f4

08009474 <sbrk_aligned>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0f      	ldr	r6, [pc, #60]	@ (80094b4 <sbrk_aligned+0x40>)
 8009478:	460c      	mov	r4, r1
 800947a:	6831      	ldr	r1, [r6, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	b911      	cbnz	r1, 8009486 <sbrk_aligned+0x12>
 8009480:	f000 fcd6 	bl	8009e30 <_sbrk_r>
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 fcd1 	bl	8009e30 <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d103      	bne.n	800949a <sbrk_aligned+0x26>
 8009492:	f04f 34ff 	mov.w	r4, #4294967295
 8009496:	4620      	mov	r0, r4
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d0f8      	beq.n	8009496 <sbrk_aligned+0x22>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 fcc2 	bl	8009e30 <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d1f2      	bne.n	8009496 <sbrk_aligned+0x22>
 80094b0:	e7ef      	b.n	8009492 <sbrk_aligned+0x1e>
 80094b2:	bf00      	nop
 80094b4:	240002f0 	.word	0x240002f0

080094b8 <_malloc_r>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	1ccd      	adds	r5, r1, #3
 80094be:	f025 0503 	bic.w	r5, r5, #3
 80094c2:	3508      	adds	r5, #8
 80094c4:	2d0c      	cmp	r5, #12
 80094c6:	bf38      	it	cc
 80094c8:	250c      	movcc	r5, #12
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	db01      	blt.n	80094d4 <_malloc_r+0x1c>
 80094d0:	42a9      	cmp	r1, r5
 80094d2:	d904      	bls.n	80094de <_malloc_r+0x26>
 80094d4:	230c      	movs	r3, #12
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	2000      	movs	r0, #0
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095b4 <_malloc_r+0xfc>
 80094e2:	f000 f869 	bl	80095b8 <__malloc_lock>
 80094e6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ea:	461c      	mov	r4, r3
 80094ec:	bb44      	cbnz	r4, 8009540 <_malloc_r+0x88>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff ffbf 	bl	8009474 <sbrk_aligned>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	4604      	mov	r4, r0
 80094fa:	d158      	bne.n	80095ae <_malloc_r+0xf6>
 80094fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009500:	4627      	mov	r7, r4
 8009502:	2f00      	cmp	r7, #0
 8009504:	d143      	bne.n	800958e <_malloc_r+0xd6>
 8009506:	2c00      	cmp	r4, #0
 8009508:	d04b      	beq.n	80095a2 <_malloc_r+0xea>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	eb04 0903 	add.w	r9, r4, r3
 8009514:	f000 fc8c 	bl	8009e30 <_sbrk_r>
 8009518:	4581      	cmp	r9, r0
 800951a:	d142      	bne.n	80095a2 <_malloc_r+0xea>
 800951c:	6821      	ldr	r1, [r4, #0]
 800951e:	1a6d      	subs	r5, r5, r1
 8009520:	4629      	mov	r1, r5
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ffa6 	bl	8009474 <sbrk_aligned>
 8009528:	3001      	adds	r0, #1
 800952a:	d03a      	beq.n	80095a2 <_malloc_r+0xea>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	442b      	add	r3, r5
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	f8d8 3000 	ldr.w	r3, [r8]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	bb62      	cbnz	r2, 8009594 <_malloc_r+0xdc>
 800953a:	f8c8 7000 	str.w	r7, [r8]
 800953e:	e00f      	b.n	8009560 <_malloc_r+0xa8>
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	1b52      	subs	r2, r2, r5
 8009544:	d420      	bmi.n	8009588 <_malloc_r+0xd0>
 8009546:	2a0b      	cmp	r2, #11
 8009548:	d917      	bls.n	800957a <_malloc_r+0xc2>
 800954a:	1961      	adds	r1, r4, r5
 800954c:	42a3      	cmp	r3, r4
 800954e:	6025      	str	r5, [r4, #0]
 8009550:	bf18      	it	ne
 8009552:	6059      	strne	r1, [r3, #4]
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	bf08      	it	eq
 8009558:	f8c8 1000 	streq.w	r1, [r8]
 800955c:	5162      	str	r2, [r4, r5]
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	4630      	mov	r0, r6
 8009562:	f000 f82f 	bl	80095c4 <__malloc_unlock>
 8009566:	f104 000b 	add.w	r0, r4, #11
 800956a:	1d23      	adds	r3, r4, #4
 800956c:	f020 0007 	bic.w	r0, r0, #7
 8009570:	1ac2      	subs	r2, r0, r3
 8009572:	bf1c      	itt	ne
 8009574:	1a1b      	subne	r3, r3, r0
 8009576:	50a3      	strne	r3, [r4, r2]
 8009578:	e7af      	b.n	80094da <_malloc_r+0x22>
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	42a3      	cmp	r3, r4
 800957e:	bf0c      	ite	eq
 8009580:	f8c8 2000 	streq.w	r2, [r8]
 8009584:	605a      	strne	r2, [r3, #4]
 8009586:	e7eb      	b.n	8009560 <_malloc_r+0xa8>
 8009588:	4623      	mov	r3, r4
 800958a:	6864      	ldr	r4, [r4, #4]
 800958c:	e7ae      	b.n	80094ec <_malloc_r+0x34>
 800958e:	463c      	mov	r4, r7
 8009590:	687f      	ldr	r7, [r7, #4]
 8009592:	e7b6      	b.n	8009502 <_malloc_r+0x4a>
 8009594:	461a      	mov	r2, r3
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	42a3      	cmp	r3, r4
 800959a:	d1fb      	bne.n	8009594 <_malloc_r+0xdc>
 800959c:	2300      	movs	r3, #0
 800959e:	6053      	str	r3, [r2, #4]
 80095a0:	e7de      	b.n	8009560 <_malloc_r+0xa8>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f80c 	bl	80095c4 <__malloc_unlock>
 80095ac:	e794      	b.n	80094d8 <_malloc_r+0x20>
 80095ae:	6005      	str	r5, [r0, #0]
 80095b0:	e7d6      	b.n	8009560 <_malloc_r+0xa8>
 80095b2:	bf00      	nop
 80095b4:	240002f4 	.word	0x240002f4

080095b8 <__malloc_lock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__malloc_lock+0x8>)
 80095ba:	f7ff bf0e 	b.w	80093da <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	240002ec 	.word	0x240002ec

080095c4 <__malloc_unlock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	@ (80095cc <__malloc_unlock+0x8>)
 80095c6:	f7ff bf09 	b.w	80093dc <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	240002ec 	.word	0x240002ec

080095d0 <__ssputs_r>:
 80095d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	688e      	ldr	r6, [r1, #8]
 80095d6:	461f      	mov	r7, r3
 80095d8:	42be      	cmp	r6, r7
 80095da:	680b      	ldr	r3, [r1, #0]
 80095dc:	4682      	mov	sl, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	4690      	mov	r8, r2
 80095e2:	d82d      	bhi.n	8009640 <__ssputs_r+0x70>
 80095e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095ec:	d026      	beq.n	800963c <__ssputs_r+0x6c>
 80095ee:	6965      	ldr	r5, [r4, #20]
 80095f0:	6909      	ldr	r1, [r1, #16]
 80095f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f6:	eba3 0901 	sub.w	r9, r3, r1
 80095fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095fe:	1c7b      	adds	r3, r7, #1
 8009600:	444b      	add	r3, r9
 8009602:	106d      	asrs	r5, r5, #1
 8009604:	429d      	cmp	r5, r3
 8009606:	bf38      	it	cc
 8009608:	461d      	movcc	r5, r3
 800960a:	0553      	lsls	r3, r2, #21
 800960c:	d527      	bpl.n	800965e <__ssputs_r+0x8e>
 800960e:	4629      	mov	r1, r5
 8009610:	f7ff ff52 	bl	80094b8 <_malloc_r>
 8009614:	4606      	mov	r6, r0
 8009616:	b360      	cbz	r0, 8009672 <__ssputs_r+0xa2>
 8009618:	6921      	ldr	r1, [r4, #16]
 800961a:	464a      	mov	r2, r9
 800961c:	f000 fc18 	bl	8009e50 <memcpy>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	6126      	str	r6, [r4, #16]
 800962e:	6165      	str	r5, [r4, #20]
 8009630:	444e      	add	r6, r9
 8009632:	eba5 0509 	sub.w	r5, r5, r9
 8009636:	6026      	str	r6, [r4, #0]
 8009638:	60a5      	str	r5, [r4, #8]
 800963a:	463e      	mov	r6, r7
 800963c:	42be      	cmp	r6, r7
 800963e:	d900      	bls.n	8009642 <__ssputs_r+0x72>
 8009640:	463e      	mov	r6, r7
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	4632      	mov	r2, r6
 8009646:	4641      	mov	r1, r8
 8009648:	f000 fbb6 	bl	8009db8 <memmove>
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	1b9b      	subs	r3, r3, r6
 8009650:	60a3      	str	r3, [r4, #8]
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	4433      	add	r3, r6
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	2000      	movs	r0, #0
 800965a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965e:	462a      	mov	r2, r5
 8009660:	f000 fc04 	bl	8009e6c <_realloc_r>
 8009664:	4606      	mov	r6, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d1e0      	bne.n	800962c <__ssputs_r+0x5c>
 800966a:	6921      	ldr	r1, [r4, #16]
 800966c:	4650      	mov	r0, sl
 800966e:	f7ff feb7 	bl	80093e0 <_free_r>
 8009672:	230c      	movs	r3, #12
 8009674:	f8ca 3000 	str.w	r3, [sl]
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	e7e9      	b.n	800965a <__ssputs_r+0x8a>
	...

08009688 <_svfiprintf_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4698      	mov	r8, r3
 800968e:	898b      	ldrh	r3, [r1, #12]
 8009690:	061b      	lsls	r3, r3, #24
 8009692:	b09d      	sub	sp, #116	@ 0x74
 8009694:	4607      	mov	r7, r0
 8009696:	460d      	mov	r5, r1
 8009698:	4614      	mov	r4, r2
 800969a:	d510      	bpl.n	80096be <_svfiprintf_r+0x36>
 800969c:	690b      	ldr	r3, [r1, #16]
 800969e:	b973      	cbnz	r3, 80096be <_svfiprintf_r+0x36>
 80096a0:	2140      	movs	r1, #64	@ 0x40
 80096a2:	f7ff ff09 	bl	80094b8 <_malloc_r>
 80096a6:	6028      	str	r0, [r5, #0]
 80096a8:	6128      	str	r0, [r5, #16]
 80096aa:	b930      	cbnz	r0, 80096ba <_svfiprintf_r+0x32>
 80096ac:	230c      	movs	r3, #12
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	b01d      	add	sp, #116	@ 0x74
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	2340      	movs	r3, #64	@ 0x40
 80096bc:	616b      	str	r3, [r5, #20]
 80096be:	2300      	movs	r3, #0
 80096c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c2:	2320      	movs	r3, #32
 80096c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096cc:	2330      	movs	r3, #48	@ 0x30
 80096ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800986c <_svfiprintf_r+0x1e4>
 80096d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096d6:	f04f 0901 	mov.w	r9, #1
 80096da:	4623      	mov	r3, r4
 80096dc:	469a      	mov	sl, r3
 80096de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e2:	b10a      	cbz	r2, 80096e8 <_svfiprintf_r+0x60>
 80096e4:	2a25      	cmp	r2, #37	@ 0x25
 80096e6:	d1f9      	bne.n	80096dc <_svfiprintf_r+0x54>
 80096e8:	ebba 0b04 	subs.w	fp, sl, r4
 80096ec:	d00b      	beq.n	8009706 <_svfiprintf_r+0x7e>
 80096ee:	465b      	mov	r3, fp
 80096f0:	4622      	mov	r2, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ff6b 	bl	80095d0 <__ssputs_r>
 80096fa:	3001      	adds	r0, #1
 80096fc:	f000 80a7 	beq.w	800984e <_svfiprintf_r+0x1c6>
 8009700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009702:	445a      	add	r2, fp
 8009704:	9209      	str	r2, [sp, #36]	@ 0x24
 8009706:	f89a 3000 	ldrb.w	r3, [sl]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 809f 	beq.w	800984e <_svfiprintf_r+0x1c6>
 8009710:	2300      	movs	r3, #0
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971a:	f10a 0a01 	add.w	sl, sl, #1
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009726:	931a      	str	r3, [sp, #104]	@ 0x68
 8009728:	4654      	mov	r4, sl
 800972a:	2205      	movs	r2, #5
 800972c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009730:	484e      	ldr	r0, [pc, #312]	@ (800986c <_svfiprintf_r+0x1e4>)
 8009732:	f7f6 fdf5 	bl	8000320 <memchr>
 8009736:	9a04      	ldr	r2, [sp, #16]
 8009738:	b9d8      	cbnz	r0, 8009772 <_svfiprintf_r+0xea>
 800973a:	06d0      	lsls	r0, r2, #27
 800973c:	bf44      	itt	mi
 800973e:	2320      	movmi	r3, #32
 8009740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009744:	0711      	lsls	r1, r2, #28
 8009746:	bf44      	itt	mi
 8009748:	232b      	movmi	r3, #43	@ 0x2b
 800974a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800974e:	f89a 3000 	ldrb.w	r3, [sl]
 8009752:	2b2a      	cmp	r3, #42	@ 0x2a
 8009754:	d015      	beq.n	8009782 <_svfiprintf_r+0xfa>
 8009756:	9a07      	ldr	r2, [sp, #28]
 8009758:	4654      	mov	r4, sl
 800975a:	2000      	movs	r0, #0
 800975c:	f04f 0c0a 	mov.w	ip, #10
 8009760:	4621      	mov	r1, r4
 8009762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009766:	3b30      	subs	r3, #48	@ 0x30
 8009768:	2b09      	cmp	r3, #9
 800976a:	d94b      	bls.n	8009804 <_svfiprintf_r+0x17c>
 800976c:	b1b0      	cbz	r0, 800979c <_svfiprintf_r+0x114>
 800976e:	9207      	str	r2, [sp, #28]
 8009770:	e014      	b.n	800979c <_svfiprintf_r+0x114>
 8009772:	eba0 0308 	sub.w	r3, r0, r8
 8009776:	fa09 f303 	lsl.w	r3, r9, r3
 800977a:	4313      	orrs	r3, r2
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	46a2      	mov	sl, r4
 8009780:	e7d2      	b.n	8009728 <_svfiprintf_r+0xa0>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	1d19      	adds	r1, r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	9103      	str	r1, [sp, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfbb      	ittet	lt
 800978e:	425b      	neglt	r3, r3
 8009790:	f042 0202 	orrlt.w	r2, r2, #2
 8009794:	9307      	strge	r3, [sp, #28]
 8009796:	9307      	strlt	r3, [sp, #28]
 8009798:	bfb8      	it	lt
 800979a:	9204      	strlt	r2, [sp, #16]
 800979c:	7823      	ldrb	r3, [r4, #0]
 800979e:	2b2e      	cmp	r3, #46	@ 0x2e
 80097a0:	d10a      	bne.n	80097b8 <_svfiprintf_r+0x130>
 80097a2:	7863      	ldrb	r3, [r4, #1]
 80097a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a6:	d132      	bne.n	800980e <_svfiprintf_r+0x186>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	9203      	str	r2, [sp, #12]
 80097b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097b4:	3402      	adds	r4, #2
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800987c <_svfiprintf_r+0x1f4>
 80097bc:	7821      	ldrb	r1, [r4, #0]
 80097be:	2203      	movs	r2, #3
 80097c0:	4650      	mov	r0, sl
 80097c2:	f7f6 fdad 	bl	8000320 <memchr>
 80097c6:	b138      	cbz	r0, 80097d8 <_svfiprintf_r+0x150>
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	eba0 000a 	sub.w	r0, r0, sl
 80097ce:	2240      	movs	r2, #64	@ 0x40
 80097d0:	4082      	lsls	r2, r0
 80097d2:	4313      	orrs	r3, r2
 80097d4:	3401      	adds	r4, #1
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097dc:	4824      	ldr	r0, [pc, #144]	@ (8009870 <_svfiprintf_r+0x1e8>)
 80097de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097e2:	2206      	movs	r2, #6
 80097e4:	f7f6 fd9c 	bl	8000320 <memchr>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d036      	beq.n	800985a <_svfiprintf_r+0x1d2>
 80097ec:	4b21      	ldr	r3, [pc, #132]	@ (8009874 <_svfiprintf_r+0x1ec>)
 80097ee:	bb1b      	cbnz	r3, 8009838 <_svfiprintf_r+0x1b0>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	3307      	adds	r3, #7
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	3308      	adds	r3, #8
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fe:	4433      	add	r3, r6
 8009800:	9309      	str	r3, [sp, #36]	@ 0x24
 8009802:	e76a      	b.n	80096da <_svfiprintf_r+0x52>
 8009804:	fb0c 3202 	mla	r2, ip, r2, r3
 8009808:	460c      	mov	r4, r1
 800980a:	2001      	movs	r0, #1
 800980c:	e7a8      	b.n	8009760 <_svfiprintf_r+0xd8>
 800980e:	2300      	movs	r3, #0
 8009810:	3401      	adds	r4, #1
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	4619      	mov	r1, r3
 8009816:	f04f 0c0a 	mov.w	ip, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009820:	3a30      	subs	r2, #48	@ 0x30
 8009822:	2a09      	cmp	r2, #9
 8009824:	d903      	bls.n	800982e <_svfiprintf_r+0x1a6>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0c6      	beq.n	80097b8 <_svfiprintf_r+0x130>
 800982a:	9105      	str	r1, [sp, #20]
 800982c:	e7c4      	b.n	80097b8 <_svfiprintf_r+0x130>
 800982e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009832:	4604      	mov	r4, r0
 8009834:	2301      	movs	r3, #1
 8009836:	e7f0      	b.n	800981a <_svfiprintf_r+0x192>
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	462a      	mov	r2, r5
 800983e:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <_svfiprintf_r+0x1f0>)
 8009840:	a904      	add	r1, sp, #16
 8009842:	4638      	mov	r0, r7
 8009844:	f3af 8000 	nop.w
 8009848:	1c42      	adds	r2, r0, #1
 800984a:	4606      	mov	r6, r0
 800984c:	d1d6      	bne.n	80097fc <_svfiprintf_r+0x174>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	065b      	lsls	r3, r3, #25
 8009852:	f53f af2d 	bmi.w	80096b0 <_svfiprintf_r+0x28>
 8009856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009858:	e72c      	b.n	80096b4 <_svfiprintf_r+0x2c>
 800985a:	ab03      	add	r3, sp, #12
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	462a      	mov	r2, r5
 8009860:	4b05      	ldr	r3, [pc, #20]	@ (8009878 <_svfiprintf_r+0x1f0>)
 8009862:	a904      	add	r1, sp, #16
 8009864:	4638      	mov	r0, r7
 8009866:	f000 f879 	bl	800995c <_printf_i>
 800986a:	e7ed      	b.n	8009848 <_svfiprintf_r+0x1c0>
 800986c:	08009fb0 	.word	0x08009fb0
 8009870:	08009fba 	.word	0x08009fba
 8009874:	00000000 	.word	0x00000000
 8009878:	080095d1 	.word	0x080095d1
 800987c:	08009fb6 	.word	0x08009fb6

08009880 <_printf_common>:
 8009880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009884:	4616      	mov	r6, r2
 8009886:	4698      	mov	r8, r3
 8009888:	688a      	ldr	r2, [r1, #8]
 800988a:	690b      	ldr	r3, [r1, #16]
 800988c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009890:	4293      	cmp	r3, r2
 8009892:	bfb8      	it	lt
 8009894:	4613      	movlt	r3, r2
 8009896:	6033      	str	r3, [r6, #0]
 8009898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800989c:	4607      	mov	r7, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b10a      	cbz	r2, 80098a6 <_printf_common+0x26>
 80098a2:	3301      	adds	r3, #1
 80098a4:	6033      	str	r3, [r6, #0]
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	0699      	lsls	r1, r3, #26
 80098aa:	bf42      	ittt	mi
 80098ac:	6833      	ldrmi	r3, [r6, #0]
 80098ae:	3302      	addmi	r3, #2
 80098b0:	6033      	strmi	r3, [r6, #0]
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	f015 0506 	ands.w	r5, r5, #6
 80098b8:	d106      	bne.n	80098c8 <_printf_common+0x48>
 80098ba:	f104 0a19 	add.w	sl, r4, #25
 80098be:	68e3      	ldr	r3, [r4, #12]
 80098c0:	6832      	ldr	r2, [r6, #0]
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	42ab      	cmp	r3, r5
 80098c6:	dc26      	bgt.n	8009916 <_printf_common+0x96>
 80098c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	3b00      	subs	r3, #0
 80098d0:	bf18      	it	ne
 80098d2:	2301      	movne	r3, #1
 80098d4:	0692      	lsls	r2, r2, #26
 80098d6:	d42b      	bmi.n	8009930 <_printf_common+0xb0>
 80098d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098dc:	4641      	mov	r1, r8
 80098de:	4638      	mov	r0, r7
 80098e0:	47c8      	blx	r9
 80098e2:	3001      	adds	r0, #1
 80098e4:	d01e      	beq.n	8009924 <_printf_common+0xa4>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	6922      	ldr	r2, [r4, #16]
 80098ea:	f003 0306 	and.w	r3, r3, #6
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	bf02      	ittt	eq
 80098f2:	68e5      	ldreq	r5, [r4, #12]
 80098f4:	6833      	ldreq	r3, [r6, #0]
 80098f6:	1aed      	subeq	r5, r5, r3
 80098f8:	68a3      	ldr	r3, [r4, #8]
 80098fa:	bf0c      	ite	eq
 80098fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009900:	2500      	movne	r5, #0
 8009902:	4293      	cmp	r3, r2
 8009904:	bfc4      	itt	gt
 8009906:	1a9b      	subgt	r3, r3, r2
 8009908:	18ed      	addgt	r5, r5, r3
 800990a:	2600      	movs	r6, #0
 800990c:	341a      	adds	r4, #26
 800990e:	42b5      	cmp	r5, r6
 8009910:	d11a      	bne.n	8009948 <_printf_common+0xc8>
 8009912:	2000      	movs	r0, #0
 8009914:	e008      	b.n	8009928 <_printf_common+0xa8>
 8009916:	2301      	movs	r3, #1
 8009918:	4652      	mov	r2, sl
 800991a:	4641      	mov	r1, r8
 800991c:	4638      	mov	r0, r7
 800991e:	47c8      	blx	r9
 8009920:	3001      	adds	r0, #1
 8009922:	d103      	bne.n	800992c <_printf_common+0xac>
 8009924:	f04f 30ff 	mov.w	r0, #4294967295
 8009928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992c:	3501      	adds	r5, #1
 800992e:	e7c6      	b.n	80098be <_printf_common+0x3e>
 8009930:	18e1      	adds	r1, r4, r3
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	2030      	movs	r0, #48	@ 0x30
 8009936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800993a:	4422      	add	r2, r4
 800993c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009944:	3302      	adds	r3, #2
 8009946:	e7c7      	b.n	80098d8 <_printf_common+0x58>
 8009948:	2301      	movs	r3, #1
 800994a:	4622      	mov	r2, r4
 800994c:	4641      	mov	r1, r8
 800994e:	4638      	mov	r0, r7
 8009950:	47c8      	blx	r9
 8009952:	3001      	adds	r0, #1
 8009954:	d0e6      	beq.n	8009924 <_printf_common+0xa4>
 8009956:	3601      	adds	r6, #1
 8009958:	e7d9      	b.n	800990e <_printf_common+0x8e>
	...

0800995c <_printf_i>:
 800995c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	7e0f      	ldrb	r7, [r1, #24]
 8009962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009964:	2f78      	cmp	r7, #120	@ 0x78
 8009966:	4691      	mov	r9, r2
 8009968:	4680      	mov	r8, r0
 800996a:	460c      	mov	r4, r1
 800996c:	469a      	mov	sl, r3
 800996e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009972:	d807      	bhi.n	8009984 <_printf_i+0x28>
 8009974:	2f62      	cmp	r7, #98	@ 0x62
 8009976:	d80a      	bhi.n	800998e <_printf_i+0x32>
 8009978:	2f00      	cmp	r7, #0
 800997a:	f000 80d2 	beq.w	8009b22 <_printf_i+0x1c6>
 800997e:	2f58      	cmp	r7, #88	@ 0x58
 8009980:	f000 80b9 	beq.w	8009af6 <_printf_i+0x19a>
 8009984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800998c:	e03a      	b.n	8009a04 <_printf_i+0xa8>
 800998e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009992:	2b15      	cmp	r3, #21
 8009994:	d8f6      	bhi.n	8009984 <_printf_i+0x28>
 8009996:	a101      	add	r1, pc, #4	@ (adr r1, 800999c <_printf_i+0x40>)
 8009998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800999c:	080099f5 	.word	0x080099f5
 80099a0:	08009a09 	.word	0x08009a09
 80099a4:	08009985 	.word	0x08009985
 80099a8:	08009985 	.word	0x08009985
 80099ac:	08009985 	.word	0x08009985
 80099b0:	08009985 	.word	0x08009985
 80099b4:	08009a09 	.word	0x08009a09
 80099b8:	08009985 	.word	0x08009985
 80099bc:	08009985 	.word	0x08009985
 80099c0:	08009985 	.word	0x08009985
 80099c4:	08009985 	.word	0x08009985
 80099c8:	08009b09 	.word	0x08009b09
 80099cc:	08009a33 	.word	0x08009a33
 80099d0:	08009ac3 	.word	0x08009ac3
 80099d4:	08009985 	.word	0x08009985
 80099d8:	08009985 	.word	0x08009985
 80099dc:	08009b2b 	.word	0x08009b2b
 80099e0:	08009985 	.word	0x08009985
 80099e4:	08009a33 	.word	0x08009a33
 80099e8:	08009985 	.word	0x08009985
 80099ec:	08009985 	.word	0x08009985
 80099f0:	08009acb 	.word	0x08009acb
 80099f4:	6833      	ldr	r3, [r6, #0]
 80099f6:	1d1a      	adds	r2, r3, #4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6032      	str	r2, [r6, #0]
 80099fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a04:	2301      	movs	r3, #1
 8009a06:	e09d      	b.n	8009b44 <_printf_i+0x1e8>
 8009a08:	6833      	ldr	r3, [r6, #0]
 8009a0a:	6820      	ldr	r0, [r4, #0]
 8009a0c:	1d19      	adds	r1, r3, #4
 8009a0e:	6031      	str	r1, [r6, #0]
 8009a10:	0606      	lsls	r6, r0, #24
 8009a12:	d501      	bpl.n	8009a18 <_printf_i+0xbc>
 8009a14:	681d      	ldr	r5, [r3, #0]
 8009a16:	e003      	b.n	8009a20 <_printf_i+0xc4>
 8009a18:	0645      	lsls	r5, r0, #25
 8009a1a:	d5fb      	bpl.n	8009a14 <_printf_i+0xb8>
 8009a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a20:	2d00      	cmp	r5, #0
 8009a22:	da03      	bge.n	8009a2c <_printf_i+0xd0>
 8009a24:	232d      	movs	r3, #45	@ 0x2d
 8009a26:	426d      	negs	r5, r5
 8009a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a2c:	4859      	ldr	r0, [pc, #356]	@ (8009b94 <_printf_i+0x238>)
 8009a2e:	230a      	movs	r3, #10
 8009a30:	e011      	b.n	8009a56 <_printf_i+0xfa>
 8009a32:	6821      	ldr	r1, [r4, #0]
 8009a34:	6833      	ldr	r3, [r6, #0]
 8009a36:	0608      	lsls	r0, r1, #24
 8009a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a3c:	d402      	bmi.n	8009a44 <_printf_i+0xe8>
 8009a3e:	0649      	lsls	r1, r1, #25
 8009a40:	bf48      	it	mi
 8009a42:	b2ad      	uxthmi	r5, r5
 8009a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a46:	4853      	ldr	r0, [pc, #332]	@ (8009b94 <_printf_i+0x238>)
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	bf14      	ite	ne
 8009a4c:	230a      	movne	r3, #10
 8009a4e:	2308      	moveq	r3, #8
 8009a50:	2100      	movs	r1, #0
 8009a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a56:	6866      	ldr	r6, [r4, #4]
 8009a58:	60a6      	str	r6, [r4, #8]
 8009a5a:	2e00      	cmp	r6, #0
 8009a5c:	bfa2      	ittt	ge
 8009a5e:	6821      	ldrge	r1, [r4, #0]
 8009a60:	f021 0104 	bicge.w	r1, r1, #4
 8009a64:	6021      	strge	r1, [r4, #0]
 8009a66:	b90d      	cbnz	r5, 8009a6c <_printf_i+0x110>
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d04b      	beq.n	8009b04 <_printf_i+0x1a8>
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a72:	fb03 5711 	mls	r7, r3, r1, r5
 8009a76:	5dc7      	ldrb	r7, [r0, r7]
 8009a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a7c:	462f      	mov	r7, r5
 8009a7e:	42bb      	cmp	r3, r7
 8009a80:	460d      	mov	r5, r1
 8009a82:	d9f4      	bls.n	8009a6e <_printf_i+0x112>
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d10b      	bne.n	8009aa0 <_printf_i+0x144>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	07df      	lsls	r7, r3, #31
 8009a8c:	d508      	bpl.n	8009aa0 <_printf_i+0x144>
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	6861      	ldr	r1, [r4, #4]
 8009a92:	4299      	cmp	r1, r3
 8009a94:	bfde      	ittt	le
 8009a96:	2330      	movle	r3, #48	@ 0x30
 8009a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009aa0:	1b92      	subs	r2, r2, r6
 8009aa2:	6122      	str	r2, [r4, #16]
 8009aa4:	f8cd a000 	str.w	sl, [sp]
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	aa03      	add	r2, sp, #12
 8009aac:	4621      	mov	r1, r4
 8009aae:	4640      	mov	r0, r8
 8009ab0:	f7ff fee6 	bl	8009880 <_printf_common>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d14a      	bne.n	8009b4e <_printf_i+0x1f2>
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8009abc:	b004      	add	sp, #16
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	f043 0320 	orr.w	r3, r3, #32
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	4833      	ldr	r0, [pc, #204]	@ (8009b98 <_printf_i+0x23c>)
 8009acc:	2778      	movs	r7, #120	@ 0x78
 8009ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	6831      	ldr	r1, [r6, #0]
 8009ad6:	061f      	lsls	r7, r3, #24
 8009ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009adc:	d402      	bmi.n	8009ae4 <_printf_i+0x188>
 8009ade:	065f      	lsls	r7, r3, #25
 8009ae0:	bf48      	it	mi
 8009ae2:	b2ad      	uxthmi	r5, r5
 8009ae4:	6031      	str	r1, [r6, #0]
 8009ae6:	07d9      	lsls	r1, r3, #31
 8009ae8:	bf44      	itt	mi
 8009aea:	f043 0320 	orrmi.w	r3, r3, #32
 8009aee:	6023      	strmi	r3, [r4, #0]
 8009af0:	b11d      	cbz	r5, 8009afa <_printf_i+0x19e>
 8009af2:	2310      	movs	r3, #16
 8009af4:	e7ac      	b.n	8009a50 <_printf_i+0xf4>
 8009af6:	4827      	ldr	r0, [pc, #156]	@ (8009b94 <_printf_i+0x238>)
 8009af8:	e7e9      	b.n	8009ace <_printf_i+0x172>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	f023 0320 	bic.w	r3, r3, #32
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	e7f6      	b.n	8009af2 <_printf_i+0x196>
 8009b04:	4616      	mov	r6, r2
 8009b06:	e7bd      	b.n	8009a84 <_printf_i+0x128>
 8009b08:	6833      	ldr	r3, [r6, #0]
 8009b0a:	6825      	ldr	r5, [r4, #0]
 8009b0c:	6961      	ldr	r1, [r4, #20]
 8009b0e:	1d18      	adds	r0, r3, #4
 8009b10:	6030      	str	r0, [r6, #0]
 8009b12:	062e      	lsls	r6, r5, #24
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	d501      	bpl.n	8009b1c <_printf_i+0x1c0>
 8009b18:	6019      	str	r1, [r3, #0]
 8009b1a:	e002      	b.n	8009b22 <_printf_i+0x1c6>
 8009b1c:	0668      	lsls	r0, r5, #25
 8009b1e:	d5fb      	bpl.n	8009b18 <_printf_i+0x1bc>
 8009b20:	8019      	strh	r1, [r3, #0]
 8009b22:	2300      	movs	r3, #0
 8009b24:	6123      	str	r3, [r4, #16]
 8009b26:	4616      	mov	r6, r2
 8009b28:	e7bc      	b.n	8009aa4 <_printf_i+0x148>
 8009b2a:	6833      	ldr	r3, [r6, #0]
 8009b2c:	1d1a      	adds	r2, r3, #4
 8009b2e:	6032      	str	r2, [r6, #0]
 8009b30:	681e      	ldr	r6, [r3, #0]
 8009b32:	6862      	ldr	r2, [r4, #4]
 8009b34:	2100      	movs	r1, #0
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7f6 fbf2 	bl	8000320 <memchr>
 8009b3c:	b108      	cbz	r0, 8009b42 <_printf_i+0x1e6>
 8009b3e:	1b80      	subs	r0, r0, r6
 8009b40:	6060      	str	r0, [r4, #4]
 8009b42:	6863      	ldr	r3, [r4, #4]
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	2300      	movs	r3, #0
 8009b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b4c:	e7aa      	b.n	8009aa4 <_printf_i+0x148>
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	4632      	mov	r2, r6
 8009b52:	4649      	mov	r1, r9
 8009b54:	4640      	mov	r0, r8
 8009b56:	47d0      	blx	sl
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d0ad      	beq.n	8009ab8 <_printf_i+0x15c>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	079b      	lsls	r3, r3, #30
 8009b60:	d413      	bmi.n	8009b8a <_printf_i+0x22e>
 8009b62:	68e0      	ldr	r0, [r4, #12]
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	4298      	cmp	r0, r3
 8009b68:	bfb8      	it	lt
 8009b6a:	4618      	movlt	r0, r3
 8009b6c:	e7a6      	b.n	8009abc <_printf_i+0x160>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4632      	mov	r2, r6
 8009b72:	4649      	mov	r1, r9
 8009b74:	4640      	mov	r0, r8
 8009b76:	47d0      	blx	sl
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d09d      	beq.n	8009ab8 <_printf_i+0x15c>
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	68e3      	ldr	r3, [r4, #12]
 8009b80:	9903      	ldr	r1, [sp, #12]
 8009b82:	1a5b      	subs	r3, r3, r1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	dcf2      	bgt.n	8009b6e <_printf_i+0x212>
 8009b88:	e7eb      	b.n	8009b62 <_printf_i+0x206>
 8009b8a:	2500      	movs	r5, #0
 8009b8c:	f104 0619 	add.w	r6, r4, #25
 8009b90:	e7f5      	b.n	8009b7e <_printf_i+0x222>
 8009b92:	bf00      	nop
 8009b94:	08009fc1 	.word	0x08009fc1
 8009b98:	08009fd2 	.word	0x08009fd2

08009b9c <__sflush_r>:
 8009b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba4:	0716      	lsls	r6, r2, #28
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	d454      	bmi.n	8009c56 <__sflush_r+0xba>
 8009bac:	684b      	ldr	r3, [r1, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dc02      	bgt.n	8009bb8 <__sflush_r+0x1c>
 8009bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dd48      	ble.n	8009c4a <__sflush_r+0xae>
 8009bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	d045      	beq.n	8009c4a <__sflush_r+0xae>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bc4:	682f      	ldr	r7, [r5, #0]
 8009bc6:	6a21      	ldr	r1, [r4, #32]
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	d030      	beq.n	8009c2e <__sflush_r+0x92>
 8009bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	0759      	lsls	r1, r3, #29
 8009bd2:	d505      	bpl.n	8009be0 <__sflush_r+0x44>
 8009bd4:	6863      	ldr	r3, [r4, #4]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bda:	b10b      	cbz	r3, 8009be0 <__sflush_r+0x44>
 8009bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	2300      	movs	r3, #0
 8009be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be4:	6a21      	ldr	r1, [r4, #32]
 8009be6:	4628      	mov	r0, r5
 8009be8:	47b0      	blx	r6
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	d106      	bne.n	8009bfe <__sflush_r+0x62>
 8009bf0:	6829      	ldr	r1, [r5, #0]
 8009bf2:	291d      	cmp	r1, #29
 8009bf4:	d82b      	bhi.n	8009c4e <__sflush_r+0xb2>
 8009bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8009ca0 <__sflush_r+0x104>)
 8009bf8:	410a      	asrs	r2, r1
 8009bfa:	07d6      	lsls	r6, r2, #31
 8009bfc:	d427      	bmi.n	8009c4e <__sflush_r+0xb2>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	6062      	str	r2, [r4, #4]
 8009c02:	04d9      	lsls	r1, r3, #19
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	6022      	str	r2, [r4, #0]
 8009c08:	d504      	bpl.n	8009c14 <__sflush_r+0x78>
 8009c0a:	1c42      	adds	r2, r0, #1
 8009c0c:	d101      	bne.n	8009c12 <__sflush_r+0x76>
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	b903      	cbnz	r3, 8009c14 <__sflush_r+0x78>
 8009c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c16:	602f      	str	r7, [r5, #0]
 8009c18:	b1b9      	cbz	r1, 8009c4a <__sflush_r+0xae>
 8009c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	d002      	beq.n	8009c28 <__sflush_r+0x8c>
 8009c22:	4628      	mov	r0, r5
 8009c24:	f7ff fbdc 	bl	80093e0 <_free_r>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c2c:	e00d      	b.n	8009c4a <__sflush_r+0xae>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b0      	blx	r6
 8009c34:	4602      	mov	r2, r0
 8009c36:	1c50      	adds	r0, r2, #1
 8009c38:	d1c9      	bne.n	8009bce <__sflush_r+0x32>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0c6      	beq.n	8009bce <__sflush_r+0x32>
 8009c40:	2b1d      	cmp	r3, #29
 8009c42:	d001      	beq.n	8009c48 <__sflush_r+0xac>
 8009c44:	2b16      	cmp	r3, #22
 8009c46:	d11e      	bne.n	8009c86 <__sflush_r+0xea>
 8009c48:	602f      	str	r7, [r5, #0]
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e022      	b.n	8009c94 <__sflush_r+0xf8>
 8009c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c52:	b21b      	sxth	r3, r3
 8009c54:	e01b      	b.n	8009c8e <__sflush_r+0xf2>
 8009c56:	690f      	ldr	r7, [r1, #16]
 8009c58:	2f00      	cmp	r7, #0
 8009c5a:	d0f6      	beq.n	8009c4a <__sflush_r+0xae>
 8009c5c:	0793      	lsls	r3, r2, #30
 8009c5e:	680e      	ldr	r6, [r1, #0]
 8009c60:	bf08      	it	eq
 8009c62:	694b      	ldreq	r3, [r1, #20]
 8009c64:	600f      	str	r7, [r1, #0]
 8009c66:	bf18      	it	ne
 8009c68:	2300      	movne	r3, #0
 8009c6a:	eba6 0807 	sub.w	r8, r6, r7
 8009c6e:	608b      	str	r3, [r1, #8]
 8009c70:	f1b8 0f00 	cmp.w	r8, #0
 8009c74:	dde9      	ble.n	8009c4a <__sflush_r+0xae>
 8009c76:	6a21      	ldr	r1, [r4, #32]
 8009c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c7a:	4643      	mov	r3, r8
 8009c7c:	463a      	mov	r2, r7
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b0      	blx	r6
 8009c82:	2800      	cmp	r0, #0
 8009c84:	dc08      	bgt.n	8009c98 <__sflush_r+0xfc>
 8009c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	4407      	add	r7, r0
 8009c9a:	eba8 0800 	sub.w	r8, r8, r0
 8009c9e:	e7e7      	b.n	8009c70 <__sflush_r+0xd4>
 8009ca0:	dfbffffe 	.word	0xdfbffffe

08009ca4 <_fflush_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	690b      	ldr	r3, [r1, #16]
 8009ca8:	4605      	mov	r5, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	b913      	cbnz	r3, 8009cb4 <_fflush_r+0x10>
 8009cae:	2500      	movs	r5, #0
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	b118      	cbz	r0, 8009cbe <_fflush_r+0x1a>
 8009cb6:	6a03      	ldr	r3, [r0, #32]
 8009cb8:	b90b      	cbnz	r3, 8009cbe <_fflush_r+0x1a>
 8009cba:	f7ff f989 	bl	8008fd0 <__sinit>
 8009cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f3      	beq.n	8009cae <_fflush_r+0xa>
 8009cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc8:	07d0      	lsls	r0, r2, #31
 8009cca:	d404      	bmi.n	8009cd6 <_fflush_r+0x32>
 8009ccc:	0599      	lsls	r1, r3, #22
 8009cce:	d402      	bmi.n	8009cd6 <_fflush_r+0x32>
 8009cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cd2:	f7ff fb82 	bl	80093da <__retarget_lock_acquire_recursive>
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	4621      	mov	r1, r4
 8009cda:	f7ff ff5f 	bl	8009b9c <__sflush_r>
 8009cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ce0:	07da      	lsls	r2, r3, #31
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	d4e4      	bmi.n	8009cb0 <_fflush_r+0xc>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	059b      	lsls	r3, r3, #22
 8009cea:	d4e1      	bmi.n	8009cb0 <_fflush_r+0xc>
 8009cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cee:	f7ff fb75 	bl	80093dc <__retarget_lock_release_recursive>
 8009cf2:	e7dd      	b.n	8009cb0 <_fflush_r+0xc>

08009cf4 <__swhatbuf_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	b096      	sub	sp, #88	@ 0x58
 8009d00:	4615      	mov	r5, r2
 8009d02:	461e      	mov	r6, r3
 8009d04:	da0d      	bge.n	8009d22 <__swhatbuf_r+0x2e>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	bf14      	ite	ne
 8009d12:	2340      	movne	r3, #64	@ 0x40
 8009d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d18:	2000      	movs	r0, #0
 8009d1a:	6031      	str	r1, [r6, #0]
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	b016      	add	sp, #88	@ 0x58
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	466a      	mov	r2, sp
 8009d24:	f000 f862 	bl	8009dec <_fstat_r>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	dbec      	blt.n	8009d06 <__swhatbuf_r+0x12>
 8009d2c:	9901      	ldr	r1, [sp, #4]
 8009d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d36:	4259      	negs	r1, r3
 8009d38:	4159      	adcs	r1, r3
 8009d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3e:	e7eb      	b.n	8009d18 <__swhatbuf_r+0x24>

08009d40 <__smakebuf_r>:
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d44:	079d      	lsls	r5, r3, #30
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	d507      	bpl.n	8009d5c <__smakebuf_r+0x1c>
 8009d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	2301      	movs	r3, #1
 8009d56:	6163      	str	r3, [r4, #20]
 8009d58:	b003      	add	sp, #12
 8009d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5c:	ab01      	add	r3, sp, #4
 8009d5e:	466a      	mov	r2, sp
 8009d60:	f7ff ffc8 	bl	8009cf4 <__swhatbuf_r>
 8009d64:	9f00      	ldr	r7, [sp, #0]
 8009d66:	4605      	mov	r5, r0
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff fba4 	bl	80094b8 <_malloc_r>
 8009d70:	b948      	cbnz	r0, 8009d86 <__smakebuf_r+0x46>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	059a      	lsls	r2, r3, #22
 8009d78:	d4ee      	bmi.n	8009d58 <__smakebuf_r+0x18>
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	f043 0302 	orr.w	r3, r3, #2
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	e7e2      	b.n	8009d4c <__smakebuf_r+0xc>
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	6020      	str	r0, [r4, #0]
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x70>
 8009d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f837 	bl	8009e10 <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x70>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	431d      	orrs	r5, r3
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cf      	b.n	8009d58 <__smakebuf_r+0x18>

08009db8 <memmove>:
 8009db8:	4288      	cmp	r0, r1
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	eb01 0402 	add.w	r4, r1, r2
 8009dc0:	d902      	bls.n	8009dc8 <memmove+0x10>
 8009dc2:	4284      	cmp	r4, r0
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	d807      	bhi.n	8009dd8 <memmove+0x20>
 8009dc8:	1e43      	subs	r3, r0, #1
 8009dca:	42a1      	cmp	r1, r4
 8009dcc:	d008      	beq.n	8009de0 <memmove+0x28>
 8009dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd6:	e7f8      	b.n	8009dca <memmove+0x12>
 8009dd8:	4402      	add	r2, r0
 8009dda:	4601      	mov	r1, r0
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d100      	bne.n	8009de2 <memmove+0x2a>
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dea:	e7f7      	b.n	8009ddc <memmove+0x24>

08009dec <_fstat_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	@ (8009e0c <_fstat_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 f864 	bl	8000ec6 <_fstat>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_fstat_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_fstat_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	240002e8 	.word	0x240002e8

08009e10 <_isatty_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d06      	ldr	r5, [pc, #24]	@ (8009e2c <_isatty_r+0x1c>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	602b      	str	r3, [r5, #0]
 8009e1c:	f7f7 f863 	bl	8000ee6 <_isatty>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_isatty_r+0x1a>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_isatty_r+0x1a>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	240002e8 	.word	0x240002e8

08009e30 <_sbrk_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	@ (8009e4c <_sbrk_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f7 f86c 	bl	8000f18 <_sbrk>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_sbrk_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_sbrk_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	240002e8 	.word	0x240002e8

08009e50 <memcpy>:
 8009e50:	440a      	add	r2, r1
 8009e52:	4291      	cmp	r1, r2
 8009e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	4770      	bx	lr
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e66:	4291      	cmp	r1, r2
 8009e68:	d1f9      	bne.n	8009e5e <memcpy+0xe>
 8009e6a:	bd10      	pop	{r4, pc}

08009e6c <_realloc_r>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	4680      	mov	r8, r0
 8009e72:	4615      	mov	r5, r2
 8009e74:	460c      	mov	r4, r1
 8009e76:	b921      	cbnz	r1, 8009e82 <_realloc_r+0x16>
 8009e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	f7ff bb1b 	b.w	80094b8 <_malloc_r>
 8009e82:	b92a      	cbnz	r2, 8009e90 <_realloc_r+0x24>
 8009e84:	f7ff faac 	bl	80093e0 <_free_r>
 8009e88:	2400      	movs	r4, #0
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	f000 f81a 	bl	8009ec8 <_malloc_usable_size_r>
 8009e94:	4285      	cmp	r5, r0
 8009e96:	4606      	mov	r6, r0
 8009e98:	d802      	bhi.n	8009ea0 <_realloc_r+0x34>
 8009e9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e9e:	d8f4      	bhi.n	8009e8a <_realloc_r+0x1e>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff fb08 	bl	80094b8 <_malloc_r>
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0ec      	beq.n	8009e88 <_realloc_r+0x1c>
 8009eae:	42b5      	cmp	r5, r6
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	bf28      	it	cs
 8009eb6:	4632      	movcs	r2, r6
 8009eb8:	f7ff ffca 	bl	8009e50 <memcpy>
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	f7ff fa8e 	bl	80093e0 <_free_r>
 8009ec4:	463c      	mov	r4, r7
 8009ec6:	e7e0      	b.n	8009e8a <_realloc_r+0x1e>

08009ec8 <_malloc_usable_size_r>:
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f18      	subs	r0, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfbc      	itt	lt
 8009ed2:	580b      	ldrlt	r3, [r1, r0]
 8009ed4:	18c0      	addlt	r0, r0, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
